
Tetris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006418  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  080065b8  080065b8  000165b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006710  08006710  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08006710  08006710  00016710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006718  08006718  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006718  08006718  00016718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800671c  0800671c  0001671c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006720  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  2000007c  0800679c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  0800679c  000203bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef58  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025ed  00000000  00000000  0002f004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  000315f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d00  00000000  00000000  00032430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000196e7  00000000  00000000  00033130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000110fd  00000000  00000000  0004c817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bdf1  00000000  00000000  0005d914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f9705  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004434  00000000  00000000  000f9758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080065a0 	.word	0x080065a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	080065a0 	.word	0x080065a0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800058a:	463b      	mov	r3, r7
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000596:	4b21      	ldr	r3, [pc, #132]	; (800061c <MX_ADC1_Init+0x98>)
 8000598:	4a21      	ldr	r2, [pc, #132]	; (8000620 <MX_ADC1_Init+0x9c>)
 800059a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800059c:	4b1f      	ldr	r3, [pc, #124]	; (800061c <MX_ADC1_Init+0x98>)
 800059e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005a4:	4b1d      	ldr	r3, [pc, #116]	; (800061c <MX_ADC1_Init+0x98>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005aa:	4b1c      	ldr	r3, [pc, #112]	; (800061c <MX_ADC1_Init+0x98>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005b0:	4b1a      	ldr	r3, [pc, #104]	; (800061c <MX_ADC1_Init+0x98>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005b6:	4b19      	ldr	r3, [pc, #100]	; (800061c <MX_ADC1_Init+0x98>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005be:	4b17      	ldr	r3, [pc, #92]	; (800061c <MX_ADC1_Init+0x98>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005c4:	4b15      	ldr	r3, [pc, #84]	; (800061c <MX_ADC1_Init+0x98>)
 80005c6:	4a17      	ldr	r2, [pc, #92]	; (8000624 <MX_ADC1_Init+0xa0>)
 80005c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ca:	4b14      	ldr	r3, [pc, #80]	; (800061c <MX_ADC1_Init+0x98>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <MX_ADC1_Init+0x98>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <MX_ADC1_Init+0x98>)
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005de:	4b0f      	ldr	r3, [pc, #60]	; (800061c <MX_ADC1_Init+0x98>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005e4:	480d      	ldr	r0, [pc, #52]	; (800061c <MX_ADC1_Init+0x98>)
 80005e6:	f002 fb7d 	bl	8002ce4 <HAL_ADC_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005f0:	f001 fff6 	bl	80025e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005f8:	2301      	movs	r3, #1
 80005fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000600:	463b      	mov	r3, r7
 8000602:	4619      	mov	r1, r3
 8000604:	4805      	ldr	r0, [pc, #20]	; (800061c <MX_ADC1_Init+0x98>)
 8000606:	f002 fcfd 	bl	8003004 <HAL_ADC_ConfigChannel>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000610:	f001 ffe6 	bl	80025e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000614:	bf00      	nop
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000098 	.word	0x20000098
 8000620:	40012000 	.word	0x40012000
 8000624:	0f000001 	.word	0x0f000001

08000628 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	; 0x28
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a17      	ldr	r2, [pc, #92]	; (80006a4 <HAL_ADC_MspInit+0x7c>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d127      	bne.n	800069a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	613b      	str	r3, [r7, #16]
 800064e:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <HAL_ADC_MspInit+0x80>)
 8000650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000652:	4a15      	ldr	r2, [pc, #84]	; (80006a8 <HAL_ADC_MspInit+0x80>)
 8000654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000658:	6453      	str	r3, [r2, #68]	; 0x44
 800065a:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <HAL_ADC_MspInit+0x80>)
 800065c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800065e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000662:	613b      	str	r3, [r7, #16]
 8000664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <HAL_ADC_MspInit+0x80>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <HAL_ADC_MspInit+0x80>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <HAL_ADC_MspInit+0x80>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000682:	2301      	movs	r3, #1
 8000684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000686:	2303      	movs	r3, #3
 8000688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	4619      	mov	r1, r3
 8000694:	4805      	ldr	r0, [pc, #20]	; (80006ac <HAL_ADC_MspInit+0x84>)
 8000696:	f002 fff5 	bl	8003684 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800069a:	bf00      	nop
 800069c:	3728      	adds	r7, #40	; 0x28
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40012000 	.word	0x40012000
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40020000 	.word	0x40020000

080006b0 <disp1color_FillScreenbuff>:

//==============================================================================
// Процедура заполняет буфер кадра значением FillValue
//==============================================================================
void disp1color_FillScreenbuff(uint8_t FillValue)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]
  memset(disp1color_buff, FillValue, sizeof(disp1color_buff));
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	2240      	movs	r2, #64	; 0x40
 80006be:	4619      	mov	r1, r3
 80006c0:	4803      	ldr	r0, [pc, #12]	; (80006d0 <disp1color_FillScreenbuff+0x20>)
 80006c2:	f004 ff2d 	bl	8005520 <memset>
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000160 	.word	0x20000160

080006d4 <disp1color_UpdateFromBuff>:

//==============================================================================
// Процедура обновляет состояние индикаторов в соответствии с буфером кадра disp1color_buff
//==============================================================================
void disp1color_UpdateFromBuff(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  DMD_1COLOR_DisplayFullUpdate(disp1color_buff, sizeof(disp1color_buff));
 80006d8:	2140      	movs	r1, #64	; 0x40
 80006da:	4802      	ldr	r0, [pc, #8]	; (80006e4 <disp1color_UpdateFromBuff+0x10>)
 80006dc:	f000 f920 	bl	8000920 <DMD_1COLOR_DisplayFullUpdate>

  //printf("BUF horz:\n");
  //print_buf(DMD_1COLOR_Buff, sizeof(DMD_1COLOR_Buff));
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000160 	.word	0x20000160

080006e8 <disp1color_DrawPixel>:

//==============================================================================
// Процедура устанавливает состояние 1 пикселя дисплея
//==============================================================================
void disp1color_DrawPixel(int16_t X, int16_t Y, uint8_t State)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	80fb      	strh	r3, [r7, #6]
 80006f2:	460b      	mov	r3, r1
 80006f4:	80bb      	strh	r3, [r7, #4]
 80006f6:	4613      	mov	r3, r2
 80006f8:	70fb      	strb	r3, [r7, #3]
  //Х и У координаты пикселя, отсчитываются слева направо (Х) сверху вниз (У) с 0
  // Проверяем, находится ли точка в поле отрисовки дисплея
  if ((X >= DISP1COLOR_Width) || (Y >= DISP1COLOR_Height) || (X < 0) || (Y < 0))
 80006fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006fe:	2b1f      	cmp	r3, #31
 8000700:	dc48      	bgt.n	8000794 <disp1color_DrawPixel+0xac>
 8000702:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000706:	2b0f      	cmp	r3, #15
 8000708:	dc44      	bgt.n	8000794 <disp1color_DrawPixel+0xac>
 800070a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800070e:	2b00      	cmp	r3, #0
 8000710:	db40      	blt.n	8000794 <disp1color_DrawPixel+0xac>
 8000712:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000716:	2b00      	cmp	r3, #0
 8000718:	db3c      	blt.n	8000794 <disp1color_DrawPixel+0xac>
    return;
  
  //Байты относительно матрицы расположены вертикально, в 2 ряда
  uint16_t ByteIdx = Y >> 3;
 800071a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800071e:	10db      	asrs	r3, r3, #3
 8000720:	b21b      	sxth	r3, r3
 8000722:	81fb      	strh	r3, [r7, #14]
  uint8_t BitIdx = Y - (ByteIdx << 3); // Высота относительно строки байт (0<=Y<=7)
 8000724:	88bb      	ldrh	r3, [r7, #4]
 8000726:	b2da      	uxtb	r2, r3
 8000728:	89fb      	ldrh	r3, [r7, #14]
 800072a:	b2db      	uxtb	r3, r3
 800072c:	00db      	lsls	r3, r3, #3
 800072e:	b2db      	uxtb	r3, r3
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	737b      	strb	r3, [r7, #13]
  ByteIdx *= DISP1COLOR_Width;  
 8000734:	89fb      	ldrh	r3, [r7, #14]
 8000736:	015b      	lsls	r3, r3, #5
 8000738:	81fb      	strh	r3, [r7, #14]
  ByteIdx += X;
 800073a:	88fa      	ldrh	r2, [r7, #6]
 800073c:	89fb      	ldrh	r3, [r7, #14]
 800073e:	4413      	add	r3, r2
 8000740:	81fb      	strh	r3, [r7, #14]
  
  //Заполнение буфера данных для отрисовки
  if (State)
 8000742:	78fb      	ldrb	r3, [r7, #3]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d00f      	beq.n	8000768 <disp1color_DrawPixel+0x80>
    disp1color_buff[ByteIdx] |= (1 << BitIdx);
 8000748:	89fb      	ldrh	r3, [r7, #14]
 800074a:	4a15      	ldr	r2, [pc, #84]	; (80007a0 <disp1color_DrawPixel+0xb8>)
 800074c:	5cd3      	ldrb	r3, [r2, r3]
 800074e:	b25a      	sxtb	r2, r3
 8000750:	7b7b      	ldrb	r3, [r7, #13]
 8000752:	2101      	movs	r1, #1
 8000754:	fa01 f303 	lsl.w	r3, r1, r3
 8000758:	b25b      	sxtb	r3, r3
 800075a:	4313      	orrs	r3, r2
 800075c:	b25a      	sxtb	r2, r3
 800075e:	89fb      	ldrh	r3, [r7, #14]
 8000760:	b2d1      	uxtb	r1, r2
 8000762:	4a0f      	ldr	r2, [pc, #60]	; (80007a0 <disp1color_DrawPixel+0xb8>)
 8000764:	54d1      	strb	r1, [r2, r3]
 8000766:	e010      	b.n	800078a <disp1color_DrawPixel+0xa2>
  else
    disp1color_buff[ByteIdx] &= ~(1 << BitIdx);
 8000768:	89fb      	ldrh	r3, [r7, #14]
 800076a:	4a0d      	ldr	r2, [pc, #52]	; (80007a0 <disp1color_DrawPixel+0xb8>)
 800076c:	5cd3      	ldrb	r3, [r2, r3]
 800076e:	b25a      	sxtb	r2, r3
 8000770:	7b7b      	ldrb	r3, [r7, #13]
 8000772:	2101      	movs	r1, #1
 8000774:	fa01 f303 	lsl.w	r3, r1, r3
 8000778:	b25b      	sxtb	r3, r3
 800077a:	43db      	mvns	r3, r3
 800077c:	b25b      	sxtb	r3, r3
 800077e:	4013      	ands	r3, r2
 8000780:	b25a      	sxtb	r2, r3
 8000782:	89fb      	ldrh	r3, [r7, #14]
 8000784:	b2d1      	uxtb	r1, r2
 8000786:	4a06      	ldr	r2, [pc, #24]	; (80007a0 <disp1color_DrawPixel+0xb8>)
 8000788:	54d1      	strb	r1, [r2, r3]

 // printf("PIX:%d%s", disp1color_buff[ByteIdx], "\n");
  uint8_t buf = disp1color_buff[ByteIdx];
 800078a:	89fb      	ldrh	r3, [r7, #14]
 800078c:	4a04      	ldr	r2, [pc, #16]	; (80007a0 <disp1color_DrawPixel+0xb8>)
 800078e:	5cd3      	ldrb	r3, [r2, r3]
 8000790:	733b      	strb	r3, [r7, #12]
 8000792:	e000      	b.n	8000796 <disp1color_DrawPixel+0xae>
    return;
 8000794:	bf00      	nop
//  for (int i = 0; i < 8; i++) {
//	  printf("%c", (buf & 0x80) ? '1' : '0');
//	  buf <<= 1;
//  }
//  printf("\n");
}
 8000796:	3714      	adds	r7, #20
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	20000160 	.word	0x20000160

080007a4 <disp1color_DrawLine>:

//==============================================================================
// Процедура рисует прямую линию в буфере кадра дисплея
//==============================================================================
void disp1color_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2) 
{
 80007a4:	b590      	push	{r4, r7, lr}
 80007a6:	b087      	sub	sp, #28
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4604      	mov	r4, r0
 80007ac:	4608      	mov	r0, r1
 80007ae:	4611      	mov	r1, r2
 80007b0:	461a      	mov	r2, r3
 80007b2:	4623      	mov	r3, r4
 80007b4:	80fb      	strh	r3, [r7, #6]
 80007b6:	4603      	mov	r3, r0
 80007b8:	80bb      	strh	r3, [r7, #4]
 80007ba:	460b      	mov	r3, r1
 80007bc:	807b      	strh	r3, [r7, #2]
 80007be:	4613      	mov	r3, r2
 80007c0:	803b      	strh	r3, [r7, #0]
  const int16_t deltaX = abs(x2 - x1);
 80007c2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80007c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007ca:	1ad3      	subs	r3, r2, r3
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	bfb8      	it	lt
 80007d0:	425b      	neglt	r3, r3
 80007d2:	82bb      	strh	r3, [r7, #20]
  const int16_t deltaY = abs(y2 - y1);
 80007d4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80007d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	2b00      	cmp	r3, #0
 80007e0:	bfb8      	it	lt
 80007e2:	425b      	neglt	r3, r3
 80007e4:	827b      	strh	r3, [r7, #18]
  const int16_t signX = x1 < x2 ? 1 : -1;
 80007e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80007ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	da01      	bge.n	80007f6 <disp1color_DrawLine+0x52>
 80007f2:	2301      	movs	r3, #1
 80007f4:	e001      	b.n	80007fa <disp1color_DrawLine+0x56>
 80007f6:	f04f 33ff 	mov.w	r3, #4294967295
 80007fa:	823b      	strh	r3, [r7, #16]
  const int16_t signY = y1 < y2 ? 1 : -1;
 80007fc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000800:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000804:	429a      	cmp	r2, r3
 8000806:	da01      	bge.n	800080c <disp1color_DrawLine+0x68>
 8000808:	2301      	movs	r3, #1
 800080a:	e001      	b.n	8000810 <disp1color_DrawLine+0x6c>
 800080c:	f04f 33ff 	mov.w	r3, #4294967295
 8000810:	81fb      	strh	r3, [r7, #14]

  int16_t error = deltaX - deltaY;
 8000812:	8aba      	ldrh	r2, [r7, #20]
 8000814:	8a7b      	ldrh	r3, [r7, #18]
 8000816:	1ad3      	subs	r3, r2, r3
 8000818:	b29b      	uxth	r3, r3
 800081a:	82fb      	strh	r3, [r7, #22]

  disp1color_DrawPixel(x2, y2, 1);
 800081c:	f9b7 1000 	ldrsh.w	r1, [r7]
 8000820:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000824:	2201      	movs	r2, #1
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff ff5e 	bl	80006e8 <disp1color_DrawPixel>

  while (x1 != x2 || y1 != y2) 
 800082c:	e02c      	b.n	8000888 <disp1color_DrawLine+0xe4>
  {
    disp1color_DrawPixel(x1, y1, 1);
 800082e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000836:	2201      	movs	r2, #1
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ff55 	bl	80006e8 <disp1color_DrawPixel>
    const int16_t error2 = error * 2;
 800083e:	8afb      	ldrh	r3, [r7, #22]
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	b29b      	uxth	r3, r3
 8000844:	81bb      	strh	r3, [r7, #12]
 
    if (error2 > -deltaY) 
 8000846:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800084a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800084e:	425b      	negs	r3, r3
 8000850:	429a      	cmp	r2, r3
 8000852:	dd09      	ble.n	8000868 <disp1color_DrawLine+0xc4>
    {
      error -= deltaY;
 8000854:	8afa      	ldrh	r2, [r7, #22]
 8000856:	8a7b      	ldrh	r3, [r7, #18]
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	b29b      	uxth	r3, r3
 800085c:	82fb      	strh	r3, [r7, #22]
      x1 += signX;
 800085e:	88fa      	ldrh	r2, [r7, #6]
 8000860:	8a3b      	ldrh	r3, [r7, #16]
 8000862:	4413      	add	r3, r2
 8000864:	b29b      	uxth	r3, r3
 8000866:	80fb      	strh	r3, [r7, #6]
    }
    if (error2 < deltaX)
 8000868:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800086c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000870:	429a      	cmp	r2, r3
 8000872:	da09      	bge.n	8000888 <disp1color_DrawLine+0xe4>
    {
      error += deltaX;
 8000874:	8afa      	ldrh	r2, [r7, #22]
 8000876:	8abb      	ldrh	r3, [r7, #20]
 8000878:	4413      	add	r3, r2
 800087a:	b29b      	uxth	r3, r3
 800087c:	82fb      	strh	r3, [r7, #22]
      y1 += signY;
 800087e:	88ba      	ldrh	r2, [r7, #4]
 8000880:	89fb      	ldrh	r3, [r7, #14]
 8000882:	4413      	add	r3, r2
 8000884:	b29b      	uxth	r3, r3
 8000886:	80bb      	strh	r3, [r7, #4]
  while (x1 != x2 || y1 != y2) 
 8000888:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800088c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000890:	429a      	cmp	r2, r3
 8000892:	d1cc      	bne.n	800082e <disp1color_DrawLine+0x8a>
 8000894:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000898:	f9b7 3000 	ldrsh.w	r3, [r7]
 800089c:	429a      	cmp	r2, r3
 800089e:	d1c6      	bne.n	800082e <disp1color_DrawLine+0x8a>
    }
  }
}
 80008a0:	bf00      	nop
 80008a2:	bf00      	nop
 80008a4:	371c      	adds	r7, #28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd90      	pop	{r4, r7, pc}

080008aa <disp1color_DrawRectangle>:

//==============================================================================
// Процедура рисует прямоугольник в буфере кадра дисплея
//==============================================================================
void disp1color_DrawRectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2) 
{
 80008aa:	b590      	push	{r4, r7, lr}
 80008ac:	b083      	sub	sp, #12
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	4604      	mov	r4, r0
 80008b2:	4608      	mov	r0, r1
 80008b4:	4611      	mov	r1, r2
 80008b6:	461a      	mov	r2, r3
 80008b8:	4623      	mov	r3, r4
 80008ba:	80fb      	strh	r3, [r7, #6]
 80008bc:	4603      	mov	r3, r0
 80008be:	80bb      	strh	r3, [r7, #4]
 80008c0:	460b      	mov	r3, r1
 80008c2:	807b      	strh	r3, [r7, #2]
 80008c4:	4613      	mov	r3, r2
 80008c6:	803b      	strh	r3, [r7, #0]
  disp1color_DrawLine(x1, y1, x1, y2);
 80008c8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80008cc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80008d0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80008d4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80008d8:	f7ff ff64 	bl	80007a4 <disp1color_DrawLine>
  disp1color_DrawLine(x2, y1, x2, y2);
 80008dc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80008e0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80008e4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80008e8:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80008ec:	f7ff ff5a 	bl	80007a4 <disp1color_DrawLine>
  disp1color_DrawLine(x1, y1, x2, y1);
 80008f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008f4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80008f8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80008fc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000900:	f7ff ff50 	bl	80007a4 <disp1color_DrawLine>
  disp1color_DrawLine(x1, y2, x2, y2);
 8000904:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000908:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800090c:	f9b7 1000 	ldrsh.w	r1, [r7]
 8000910:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000914:	f7ff ff46 	bl	80007a4 <disp1color_DrawLine>
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	bd90      	pop	{r4, r7, pc}

08000920 <DMD_1COLOR_DisplayFullUpdate>:

//==============================================================================
// Процедура подготавливает буфер на передачу в экран в соответствии с буфером pBuff графической бибилиотеки
//==============================================================================
void DMD_1COLOR_DisplayFullUpdate(uint8_t *pBuff, uint16_t BuffLen)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	460b      	mov	r3, r1
 800092a:	807b      	strh	r3, [r7, #2]
	DMD_1COLOR_UpdateRow4(0, pBuff, BuffLen);
 800092c:	887b      	ldrh	r3, [r7, #2]
 800092e:	461a      	mov	r2, r3
 8000930:	6879      	ldr	r1, [r7, #4]
 8000932:	2000      	movs	r0, #0
 8000934:	f000 f816 	bl	8000964 <DMD_1COLOR_UpdateRow4>
	DMD_1COLOR_UpdateRow4(1, pBuff, BuffLen);
 8000938:	887b      	ldrh	r3, [r7, #2]
 800093a:	461a      	mov	r2, r3
 800093c:	6879      	ldr	r1, [r7, #4]
 800093e:	2001      	movs	r0, #1
 8000940:	f000 f810 	bl	8000964 <DMD_1COLOR_UpdateRow4>
	DMD_1COLOR_UpdateRow4(2, pBuff, BuffLen);
 8000944:	887b      	ldrh	r3, [r7, #2]
 8000946:	461a      	mov	r2, r3
 8000948:	6879      	ldr	r1, [r7, #4]
 800094a:	2002      	movs	r0, #2
 800094c:	f000 f80a 	bl	8000964 <DMD_1COLOR_UpdateRow4>
	DMD_1COLOR_UpdateRow4(3, pBuff, BuffLen);
 8000950:	887b      	ldrh	r3, [r7, #2]
 8000952:	461a      	mov	r2, r3
 8000954:	6879      	ldr	r1, [r7, #4]
 8000956:	2003      	movs	r0, #3
 8000958:	f000 f804 	bl	8000964 <DMD_1COLOR_UpdateRow4>
}
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <DMD_1COLOR_UpdateRow4>:

//==============================================================================
// Процедура обновляет поочерёдно все матрицы экрана
//==============================================================================
void DMD_1COLOR_UpdateRow4(uint8_t Row4, uint8_t *pBuff, uint16_t BuffLen)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	6039      	str	r1, [r7, #0]
 800096e:	71fb      	strb	r3, [r7, #7]
 8000970:	4613      	mov	r3, r2
 8000972:	80bb      	strh	r3, [r7, #4]
	// Подготавливаем данные для передачи
	uint16_t MatrixInRow = DMD_1COLOR_ScreenWidth / DMD_1COLOR_MatrixWidth;
 8000974:	4b2e      	ldr	r3, [pc, #184]	; (8000a30 <DMD_1COLOR_UpdateRow4+0xcc>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	095b      	lsrs	r3, r3, #5
 800097a:	b2db      	uxtb	r3, r3
 800097c:	81bb      	strh	r3, [r7, #12]
	uint16_t MatrixInCol = DMD_1COLOR_ScreenHeight / DMD_1COLOR_MatrixHeight;
 800097e:	4b2d      	ldr	r3, [pc, #180]	; (8000a34 <DMD_1COLOR_UpdateRow4+0xd0>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	091b      	lsrs	r3, r3, #4
 8000984:	b2db      	uxtb	r3, r3
 8000986:	817b      	strh	r3, [r7, #10]
	uint8_t MatrixLines8 = DMD_1COLOR_MatrixHeight >> 3;
 8000988:	2302      	movs	r3, #2
 800098a:	727b      	strb	r3, [r7, #9]
	uint16_t StartIdxRow = 0, StartIdxCol = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	83fb      	strh	r3, [r7, #30]
 8000990:	2300      	movs	r3, #0
 8000992:	83bb      	strh	r3, [r7, #28]

	for (uint8_t Row = 0; Row < MatrixInRow; Row++)
 8000994:	2300      	movs	r3, #0
 8000996:	76fb      	strb	r3, [r7, #27]
 8000998:	e040      	b.n	8000a1c <DMD_1COLOR_UpdateRow4+0xb8>
	{
		StartIdxCol = StartIdxRow;
 800099a:	8bfb      	ldrh	r3, [r7, #30]
 800099c:	83bb      	strh	r3, [r7, #28]

		for (uint8_t Col = 0; Col < MatrixInCol; Col++)
 800099e:	2300      	movs	r3, #0
 80009a0:	76bb      	strb	r3, [r7, #26]
 80009a2:	e028      	b.n	80009f6 <DMD_1COLOR_UpdateRow4+0x92>
		{
			// Копируем буфер кадра одной матрицы
			uint8_t *pDst = DMD_1COLOR_MatrixBuff;
 80009a4:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <DMD_1COLOR_UpdateRow4+0xd4>)
 80009a6:	617b      	str	r3, [r7, #20]
			uint8_t *pSrc = &pBuff[StartIdxCol];
 80009a8:	8bbb      	ldrh	r3, [r7, #28]
 80009aa:	683a      	ldr	r2, [r7, #0]
 80009ac:	4413      	add	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]

			for (uint8_t Line8 = 0; Line8 < MatrixLines8; Line8++)
 80009b0:	2300      	movs	r3, #0
 80009b2:	73fb      	strb	r3, [r7, #15]
 80009b4:	e015      	b.n	80009e2 <DMD_1COLOR_UpdateRow4+0x7e>
			{
				memcpy(pDst, pSrc, DMD_1COLOR_MatrixWidth);
 80009b6:	2220      	movs	r2, #32
 80009b8:	6939      	ldr	r1, [r7, #16]
 80009ba:	6978      	ldr	r0, [r7, #20]
 80009bc:	f004 fda2 	bl	8005504 <memcpy>
				DMD_1COLOR_SendFromMatrixBuff(Row4, DMD_1COLOR_MatrixBuff);
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	491d      	ldr	r1, [pc, #116]	; (8000a38 <DMD_1COLOR_UpdateRow4+0xd4>)
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 f839 	bl	8000a3c <DMD_1COLOR_SendFromMatrixBuff>
				pDst += DMD_1COLOR_MatrixWidth;
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	3320      	adds	r3, #32
 80009ce:	617b      	str	r3, [r7, #20]
				pSrc += DMD_1COLOR_ScreenWidth;
 80009d0:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <DMD_1COLOR_UpdateRow4+0xcc>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	461a      	mov	r2, r3
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	4413      	add	r3, r2
 80009da:	613b      	str	r3, [r7, #16]
			for (uint8_t Line8 = 0; Line8 < MatrixLines8; Line8++)
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	3301      	adds	r3, #1
 80009e0:	73fb      	strb	r3, [r7, #15]
 80009e2:	7bfa      	ldrb	r2, [r7, #15]
 80009e4:	7a7b      	ldrb	r3, [r7, #9]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d3e5      	bcc.n	80009b6 <DMD_1COLOR_UpdateRow4+0x52>
			}

			StartIdxCol += DMD_1COLOR_MatrixWidth;
 80009ea:	8bbb      	ldrh	r3, [r7, #28]
 80009ec:	3320      	adds	r3, #32
 80009ee:	83bb      	strh	r3, [r7, #28]
		for (uint8_t Col = 0; Col < MatrixInCol; Col++)
 80009f0:	7ebb      	ldrb	r3, [r7, #26]
 80009f2:	3301      	adds	r3, #1
 80009f4:	76bb      	strb	r3, [r7, #26]
 80009f6:	7ebb      	ldrb	r3, [r7, #26]
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	897a      	ldrh	r2, [r7, #10]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d8d1      	bhi.n	80009a4 <DMD_1COLOR_UpdateRow4+0x40>
		}
		StartIdxRow += MatrixLines8 * DMD_1COLOR_ScreenWidth;
 8000a00:	7a7b      	ldrb	r3, [r7, #9]
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <DMD_1COLOR_UpdateRow4+0xcc>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	fb12 f303 	smulbb	r3, r2, r3
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	8bfb      	ldrh	r3, [r7, #30]
 8000a12:	4413      	add	r3, r2
 8000a14:	83fb      	strh	r3, [r7, #30]
	for (uint8_t Row = 0; Row < MatrixInRow; Row++)
 8000a16:	7efb      	ldrb	r3, [r7, #27]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	76fb      	strb	r3, [r7, #27]
 8000a1c:	7efb      	ldrb	r3, [r7, #27]
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	89ba      	ldrh	r2, [r7, #12]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d8b9      	bhi.n	800099a <DMD_1COLOR_UpdateRow4+0x36>
	}
}
 8000a26:	bf00      	nop
 8000a28:	bf00      	nop
 8000a2a:	3720      	adds	r7, #32
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000001 	.word	0x20000001
 8000a34:	20000000 	.word	0x20000000
 8000a38:	200000e0 	.word	0x200000e0

08000a3c <DMD_1COLOR_SendFromMatrixBuff>:

//==============================================================================
// Процедура обновляет 1 матрицу
//==============================================================================
void DMD_1COLOR_SendFromMatrixBuff(uint8_t Row4, uint8_t *pBuff)
{
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b087      	sub	sp, #28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	6039      	str	r1, [r7, #0]
 8000a46:	71fb      	strb	r3, [r7, #7]
	uint8_t MatrixRows8bit = DMD_1COLOR_MatrixHeight >> 3;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	747b      	strb	r3, [r7, #17]
	uint8_t MatrixCols8bit = DMD_1COLOR_MatrixWidth >> 3;
 8000a4c:	2304      	movs	r3, #4
 8000a4e:	743b      	strb	r3, [r7, #16]
	uint8_t *pPart = (uint8_t *) &(DMD_1COLOR_Buff[Row4][0]);
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	011b      	lsls	r3, r3, #4
 8000a54:	4a22      	ldr	r2, [pc, #136]	; (8000ae0 <DMD_1COLOR_SendFromMatrixBuff+0xa4>)
 8000a56:	4413      	add	r3, r2
 8000a58:	617b      	str	r3, [r7, #20]

	for (uint8_t Col = 0; Col < MatrixCols8bit; Col++)
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	74fb      	strb	r3, [r7, #19]
 8000a5e:	e035      	b.n	8000acc <DMD_1COLOR_SendFromMatrixBuff+0x90>
	{
		for (uint8_t Row = MatrixRows8bit; Row; Row--)
 8000a60:	7c7b      	ldrb	r3, [r7, #17]
 8000a62:	74bb      	strb	r3, [r7, #18]
 8000a64:	e02c      	b.n	8000ac0 <DMD_1COLOR_SendFromMatrixBuff+0x84>
		{
			uint8_t *p8Bytes = pBuff + ((Row - 1) * DMD_1COLOR_MatrixWidth);
 8000a66:	7cbb      	ldrb	r3, [r7, #18]
 8000a68:	3b01      	subs	r3, #1
 8000a6a:	015b      	lsls	r3, r3, #5
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	4413      	add	r3, r2
 8000a72:	60fb      	str	r3, [r7, #12]
			p8Bytes += (Col << 3);
 8000a74:	7cfb      	ldrb	r3, [r7, #19]
 8000a76:	00db      	lsls	r3, r3, #3
 8000a78:	461a      	mov	r2, r3
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	60fb      	str	r3, [r7, #12]

			*(pPart++) = DMD_1COLOR_GetFrom8ScreenBytes(1 << (Row4 + 4), p8Bytes);
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	3304      	adds	r3, #4
 8000a84:	2201      	movs	r2, #1
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	697c      	ldr	r4, [r7, #20]
 8000a8e:	1c63      	adds	r3, r4, #1
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	68f9      	ldr	r1, [r7, #12]
 8000a94:	4610      	mov	r0, r2
 8000a96:	f000 f825 	bl	8000ae4 <DMD_1COLOR_GetFrom8ScreenBytes>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	7023      	strb	r3, [r4, #0]
			*(pPart++) = DMD_1COLOR_GetFrom8ScreenBytes(1 << Row4, p8Bytes);
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	697c      	ldr	r4, [r7, #20]
 8000aaa:	1c63      	adds	r3, r4, #1
 8000aac:	617b      	str	r3, [r7, #20]
 8000aae:	68f9      	ldr	r1, [r7, #12]
 8000ab0:	4610      	mov	r0, r2
 8000ab2:	f000 f817 	bl	8000ae4 <DMD_1COLOR_GetFrom8ScreenBytes>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	7023      	strb	r3, [r4, #0]
		for (uint8_t Row = MatrixRows8bit; Row; Row--)
 8000aba:	7cbb      	ldrb	r3, [r7, #18]
 8000abc:	3b01      	subs	r3, #1
 8000abe:	74bb      	strb	r3, [r7, #18]
 8000ac0:	7cbb      	ldrb	r3, [r7, #18]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d1cf      	bne.n	8000a66 <DMD_1COLOR_SendFromMatrixBuff+0x2a>
	for (uint8_t Col = 0; Col < MatrixCols8bit; Col++)
 8000ac6:	7cfb      	ldrb	r3, [r7, #19]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	74fb      	strb	r3, [r7, #19]
 8000acc:	7cfa      	ldrb	r2, [r7, #19]
 8000ace:	7c3b      	ldrb	r3, [r7, #16]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d3c5      	bcc.n	8000a60 <DMD_1COLOR_SendFromMatrixBuff+0x24>
		}
	}
}
 8000ad4:	bf00      	nop
 8000ad6:	bf00      	nop
 8000ad8:	371c      	adds	r7, #28
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd90      	pop	{r4, r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000120 	.word	0x20000120

08000ae4 <DMD_1COLOR_GetFrom8ScreenBytes>:
//==============================================================================
// Функция возвращает байт (строку из 8 светодиодов) по 8-байтному фрагменту буфера
// графической библиотеки и маске соответствующей строки светодиодов во фрагменте
//==============================================================================
uint8_t DMD_1COLOR_GetFrom8ScreenBytes(uint8_t Mask, uint8_t *pBuff)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	6039      	str	r1, [r7, #0]
 8000aee:	71fb      	strb	r3, [r7, #7]
	uint8_t Byte = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	73fb      	strb	r3, [r7, #15]
	//Переводим "вертикальные" байты из массива в горизонтальные
	//в соответствии с текущей строкой.
	//В итоге получается массив, где биты расположены горизонтально,
	//Первый бит слева внизу, счет увеличивается вверх и вправо.
	//Но строки в секторе расположены сверху вниз
	for (uint8_t BitMask = 0x80; BitMask; BitMask >>= 1, pBuff++)
 8000af4:	2380      	movs	r3, #128	; 0x80
 8000af6:	73bb      	strb	r3, [r7, #14]
 8000af8:	e010      	b.n	8000b1c <DMD_1COLOR_GetFrom8ScreenBytes+0x38>
	{
		if (*pBuff & Mask)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	781a      	ldrb	r2, [r3, #0]
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	4013      	ands	r3, r2
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d003      	beq.n	8000b10 <DMD_1COLOR_GetFrom8ScreenBytes+0x2c>
			Byte |= BitMask;
 8000b08:	7bfa      	ldrb	r2, [r7, #15]
 8000b0a:	7bbb      	ldrb	r3, [r7, #14]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	73fb      	strb	r3, [r7, #15]
	for (uint8_t BitMask = 0x80; BitMask; BitMask >>= 1, pBuff++)
 8000b10:	7bbb      	ldrb	r3, [r7, #14]
 8000b12:	085b      	lsrs	r3, r3, #1
 8000b14:	73bb      	strb	r3, [r7, #14]
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	7bbb      	ldrb	r3, [r7, #14]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d1eb      	bne.n	8000afa <DMD_1COLOR_GetFrom8ScreenBytes+0x16>
	}

//#if (DMD_1COLOR_Inverse == 1)
	//Инвертируем данные (так как LED панель горит при 0)
	Byte ^= 0xFF;
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
 8000b24:	43db      	mvns	r3, r3
 8000b26:	73fb      	strb	r3, [r7, #15]
//#endif

	return Byte;
 8000b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
	...

08000b38 <prepare_data>:
//==============================================================================


//Копирование из подготовленного буфера в массивиы для построчного вводы в матрицу
void prepare_data() {
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
	//Идем по строкам
	for (uint8_t i = 0; i < 4; i++) {
 8000b3e:	2300      	movs	r3, #0
 8000b40:	71fb      	strb	r3, [r7, #7]
 8000b42:	e042      	b.n	8000bca <prepare_data+0x92>
		//По столбцам
		for (uint8_t k = 0; k < 16; k++) {
 8000b44:	2300      	movs	r3, #0
 8000b46:	71bb      	strb	r3, [r7, #6]
 8000b48:	e039      	b.n	8000bbe <prepare_data+0x86>
			if (i == 0) {
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d10a      	bne.n	8000b66 <prepare_data+0x2e>
				data1[k] = DMD_1COLOR_Buff[i][k];
 8000b50:	79f9      	ldrb	r1, [r7, #7]
 8000b52:	79ba      	ldrb	r2, [r7, #6]
 8000b54:	79bb      	ldrb	r3, [r7, #6]
 8000b56:	4822      	ldr	r0, [pc, #136]	; (8000be0 <prepare_data+0xa8>)
 8000b58:	0109      	lsls	r1, r1, #4
 8000b5a:	4401      	add	r1, r0
 8000b5c:	440a      	add	r2, r1
 8000b5e:	7811      	ldrb	r1, [r2, #0]
 8000b60:	4a20      	ldr	r2, [pc, #128]	; (8000be4 <prepare_data+0xac>)
 8000b62:	54d1      	strb	r1, [r2, r3]
 8000b64:	e028      	b.n	8000bb8 <prepare_data+0x80>
			}
			else if (i == 1) {
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d10a      	bne.n	8000b82 <prepare_data+0x4a>
				data2[k] = DMD_1COLOR_Buff[i][k];
 8000b6c:	79f9      	ldrb	r1, [r7, #7]
 8000b6e:	79ba      	ldrb	r2, [r7, #6]
 8000b70:	79bb      	ldrb	r3, [r7, #6]
 8000b72:	481b      	ldr	r0, [pc, #108]	; (8000be0 <prepare_data+0xa8>)
 8000b74:	0109      	lsls	r1, r1, #4
 8000b76:	4401      	add	r1, r0
 8000b78:	440a      	add	r2, r1
 8000b7a:	7811      	ldrb	r1, [r2, #0]
 8000b7c:	4a1a      	ldr	r2, [pc, #104]	; (8000be8 <prepare_data+0xb0>)
 8000b7e:	54d1      	strb	r1, [r2, r3]
 8000b80:	e01a      	b.n	8000bb8 <prepare_data+0x80>
			}
			else if (i == 2) {
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d10a      	bne.n	8000b9e <prepare_data+0x66>
				data3[k] = DMD_1COLOR_Buff[i][k];
 8000b88:	79f9      	ldrb	r1, [r7, #7]
 8000b8a:	79ba      	ldrb	r2, [r7, #6]
 8000b8c:	79bb      	ldrb	r3, [r7, #6]
 8000b8e:	4814      	ldr	r0, [pc, #80]	; (8000be0 <prepare_data+0xa8>)
 8000b90:	0109      	lsls	r1, r1, #4
 8000b92:	4401      	add	r1, r0
 8000b94:	440a      	add	r2, r1
 8000b96:	7811      	ldrb	r1, [r2, #0]
 8000b98:	4a14      	ldr	r2, [pc, #80]	; (8000bec <prepare_data+0xb4>)
 8000b9a:	54d1      	strb	r1, [r2, r3]
 8000b9c:	e00c      	b.n	8000bb8 <prepare_data+0x80>
			}
			else if (i == 3) {
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	2b03      	cmp	r3, #3
 8000ba2:	d109      	bne.n	8000bb8 <prepare_data+0x80>
				data4[k] = DMD_1COLOR_Buff[i][k];
 8000ba4:	79f9      	ldrb	r1, [r7, #7]
 8000ba6:	79ba      	ldrb	r2, [r7, #6]
 8000ba8:	79bb      	ldrb	r3, [r7, #6]
 8000baa:	480d      	ldr	r0, [pc, #52]	; (8000be0 <prepare_data+0xa8>)
 8000bac:	0109      	lsls	r1, r1, #4
 8000bae:	4401      	add	r1, r0
 8000bb0:	440a      	add	r2, r1
 8000bb2:	7811      	ldrb	r1, [r2, #0]
 8000bb4:	4a0e      	ldr	r2, [pc, #56]	; (8000bf0 <prepare_data+0xb8>)
 8000bb6:	54d1      	strb	r1, [r2, r3]
		for (uint8_t k = 0; k < 16; k++) {
 8000bb8:	79bb      	ldrb	r3, [r7, #6]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	71bb      	strb	r3, [r7, #6]
 8000bbe:	79bb      	ldrb	r3, [r7, #6]
 8000bc0:	2b0f      	cmp	r3, #15
 8000bc2:	d9c2      	bls.n	8000b4a <prepare_data+0x12>
	for (uint8_t i = 0; i < 4; i++) {
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	71fb      	strb	r3, [r7, #7]
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	2b03      	cmp	r3, #3
 8000bce:	d9b9      	bls.n	8000b44 <prepare_data+0xc>
			}
		}
	}
}
 8000bd0:	bf00      	nop
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	20000120 	.word	0x20000120
 8000be4:	200001a0 	.word	0x200001a0
 8000be8:	200001b0 	.word	0x200001b0
 8000bec:	200001c0 	.word	0x200001c0
 8000bf0:	200001d0 	.word	0x200001d0

08000bf4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b088      	sub	sp, #32
 8000bf8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfa:	f107 030c 	add.w	r3, r7, #12
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	4b3f      	ldr	r3, [pc, #252]	; (8000d0c <MX_GPIO_Init+0x118>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a3e      	ldr	r2, [pc, #248]	; (8000d0c <MX_GPIO_Init+0x118>)
 8000c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b3c      	ldr	r3, [pc, #240]	; (8000d0c <MX_GPIO_Init+0x118>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	4b38      	ldr	r3, [pc, #224]	; (8000d0c <MX_GPIO_Init+0x118>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a37      	ldr	r2, [pc, #220]	; (8000d0c <MX_GPIO_Init+0x118>)
 8000c30:	f043 0304 	orr.w	r3, r3, #4
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b35      	ldr	r3, [pc, #212]	; (8000d0c <MX_GPIO_Init+0x118>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0304 	and.w	r3, r3, #4
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	603b      	str	r3, [r7, #0]
 8000c46:	4b31      	ldr	r3, [pc, #196]	; (8000d0c <MX_GPIO_Init+0x118>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a30      	ldr	r2, [pc, #192]	; (8000d0c <MX_GPIO_Init+0x118>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b2e      	ldr	r3, [pc, #184]	; (8000d0c <MX_GPIO_Init+0x118>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nOE_Pin|SCLK_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2150      	movs	r1, #80	; 0x50
 8000c62:	482b      	ldr	r0, [pc, #172]	; (8000d10 <MX_GPIO_Init+0x11c>)
 8000c64:	f002 fe92 	bl	800398c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A_Pin|B_Pin, GPIO_PIN_RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2130      	movs	r1, #48	; 0x30
 8000c6c:	4829      	ldr	r0, [pc, #164]	; (8000d14 <MX_GPIO_Init+0x120>)
 8000c6e:	f002 fe8d 	bl	800398c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin|ROTATE_Pin|DROP_Pin;
 8000c72:	230f      	movs	r3, #15
 8000c74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c80:	f107 030c 	add.w	r3, r7, #12
 8000c84:	4619      	mov	r1, r3
 8000c86:	4823      	ldr	r0, [pc, #140]	; (8000d14 <MX_GPIO_Init+0x120>)
 8000c88:	f002 fcfc 	bl	8003684 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = nOE_Pin|SCLK_Pin;
 8000c8c:	2350      	movs	r3, #80	; 0x50
 8000c8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9c:	f107 030c 	add.w	r3, r7, #12
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	481b      	ldr	r0, [pc, #108]	; (8000d10 <MX_GPIO_Init+0x11c>)
 8000ca4:	f002 fcee 	bl	8003684 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin;
 8000ca8:	2330      	movs	r3, #48	; 0x30
 8000caa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb8:	f107 030c 	add.w	r3, r7, #12
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4815      	ldr	r0, [pc, #84]	; (8000d14 <MX_GPIO_Init+0x120>)
 8000cc0:	f002 fce0 	bl	8003684 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2006      	movs	r0, #6
 8000cca:	f002 fca4 	bl	8003616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000cce:	2006      	movs	r0, #6
 8000cd0:	f002 fcbd 	bl	800364e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	2007      	movs	r0, #7
 8000cda:	f002 fc9c 	bl	8003616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000cde:	2007      	movs	r0, #7
 8000ce0:	f002 fcb5 	bl	800364e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	2008      	movs	r0, #8
 8000cea:	f002 fc94 	bl	8003616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000cee:	2008      	movs	r0, #8
 8000cf0:	f002 fcad 	bl	800364e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2009      	movs	r0, #9
 8000cfa:	f002 fc8c 	bl	8003616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000cfe:	2009      	movs	r0, #9
 8000d00:	f002 fca5 	bl	800364e <HAL_NVIC_EnableIRQ>

}
 8000d04:	bf00      	nop
 8000d06:	3720      	adds	r7, #32
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020000 	.word	0x40020000
 8000d14:	40020800 	.word	0x40020800

08000d18 <inside_play_field>:
volatile uint8_t rotated, hard_drop;
int8_t i,j;
uint8_t game_over = 0;
uint16_t adc_noise;

uint8_t inside_play_field(){
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
	return (gridX+i>=0)&&(gridX+i<8)&&(gridY+j<16)&&(gridY+j>=0);
 8000d1c:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <inside_play_field+0x68>)
 8000d1e:	881b      	ldrh	r3, [r3, #0]
 8000d20:	b21b      	sxth	r3, r3
 8000d22:	461a      	mov	r2, r3
 8000d24:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <inside_play_field+0x6c>)
 8000d26:	f993 3000 	ldrsb.w	r3, [r3]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	db1f      	blt.n	8000d70 <inside_play_field+0x58>
 8000d30:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <inside_play_field+0x68>)
 8000d32:	881b      	ldrh	r3, [r3, #0]
 8000d34:	b21b      	sxth	r3, r3
 8000d36:	461a      	mov	r2, r3
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <inside_play_field+0x6c>)
 8000d3a:	f993 3000 	ldrsb.w	r3, [r3]
 8000d3e:	4413      	add	r3, r2
 8000d40:	2b07      	cmp	r3, #7
 8000d42:	dc15      	bgt.n	8000d70 <inside_play_field+0x58>
 8000d44:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <inside_play_field+0x70>)
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	b21b      	sxth	r3, r3
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <inside_play_field+0x74>)
 8000d4e:	f993 3000 	ldrsb.w	r3, [r3]
 8000d52:	4413      	add	r3, r2
 8000d54:	2b0f      	cmp	r3, #15
 8000d56:	dc0b      	bgt.n	8000d70 <inside_play_field+0x58>
 8000d58:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <inside_play_field+0x70>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	b21b      	sxth	r3, r3
 8000d5e:	461a      	mov	r2, r3
 8000d60:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <inside_play_field+0x74>)
 8000d62:	f993 3000 	ldrsb.w	r3, [r3]
 8000d66:	4413      	add	r3, r2
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	db01      	blt.n	8000d70 <inside_play_field+0x58>
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e000      	b.n	8000d72 <inside_play_field+0x5a>
 8000d70:	2300      	movs	r3, #0
 8000d72:	b2db      	uxtb	r3, r3
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	200001e0 	.word	0x200001e0
 8000d84:	200002fd 	.word	0x200002fd
 8000d88:	200001e2 	.word	0x200001e2
 8000d8c:	200002fe 	.word	0x200002fe

08000d90 <generate_piece>:


void generate_piece(char piece){
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
	for(i = 0; i < 4;i++){
 8000d9a:	4b60      	ldr	r3, [pc, #384]	; (8000f1c <generate_piece+0x18c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
 8000da0:	e028      	b.n	8000df4 <generate_piece+0x64>
		for(j = 0; j < 4; j++){
 8000da2:	4b5f      	ldr	r3, [pc, #380]	; (8000f20 <generate_piece+0x190>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
 8000da8:	e016      	b.n	8000dd8 <generate_piece+0x48>
			piece_matrix[i][j] = 0;
 8000daa:	4b5c      	ldr	r3, [pc, #368]	; (8000f1c <generate_piece+0x18c>)
 8000dac:	f993 3000 	ldrsb.w	r3, [r3]
 8000db0:	4618      	mov	r0, r3
 8000db2:	4b5b      	ldr	r3, [pc, #364]	; (8000f20 <generate_piece+0x190>)
 8000db4:	f993 3000 	ldrsb.w	r3, [r3]
 8000db8:	4619      	mov	r1, r3
 8000dba:	4a5a      	ldr	r2, [pc, #360]	; (8000f24 <generate_piece+0x194>)
 8000dbc:	0083      	lsls	r3, r0, #2
 8000dbe:	4413      	add	r3, r2
 8000dc0:	440b      	add	r3, r1
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 4; j++){
 8000dc6:	4b56      	ldr	r3, [pc, #344]	; (8000f20 <generate_piece+0x190>)
 8000dc8:	f993 3000 	ldrsb.w	r3, [r3]
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	3301      	adds	r3, #1
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	b25a      	sxtb	r2, r3
 8000dd4:	4b52      	ldr	r3, [pc, #328]	; (8000f20 <generate_piece+0x190>)
 8000dd6:	701a      	strb	r2, [r3, #0]
 8000dd8:	4b51      	ldr	r3, [pc, #324]	; (8000f20 <generate_piece+0x190>)
 8000dda:	f993 3000 	ldrsb.w	r3, [r3]
 8000dde:	2b03      	cmp	r3, #3
 8000de0:	dde3      	ble.n	8000daa <generate_piece+0x1a>
	for(i = 0; i < 4;i++){
 8000de2:	4b4e      	ldr	r3, [pc, #312]	; (8000f1c <generate_piece+0x18c>)
 8000de4:	f993 3000 	ldrsb.w	r3, [r3]
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	3301      	adds	r3, #1
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	b25a      	sxtb	r2, r3
 8000df0:	4b4a      	ldr	r3, [pc, #296]	; (8000f1c <generate_piece+0x18c>)
 8000df2:	701a      	strb	r2, [r3, #0]
 8000df4:	4b49      	ldr	r3, [pc, #292]	; (8000f1c <generate_piece+0x18c>)
 8000df6:	f993 3000 	ldrsb.w	r3, [r3]
 8000dfa:	2b03      	cmp	r3, #3
 8000dfc:	ddd1      	ble.n	8000da2 <generate_piece+0x12>
		}
	}
	switch (piece){
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	3b49      	subs	r3, #73	; 0x49
 8000e02:	2b11      	cmp	r3, #17
 8000e04:	f200 8083 	bhi.w	8000f0e <generate_piece+0x17e>
 8000e08:	a201      	add	r2, pc, #4	; (adr r2, 8000e10 <generate_piece+0x80>)
 8000e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0e:	bf00      	nop
 8000e10:	08000ef5 	.word	0x08000ef5
 8000e14:	08000ea7 	.word	0x08000ea7
 8000e18:	08000f0f 	.word	0x08000f0f
 8000e1c:	08000e8d 	.word	0x08000e8d
 8000e20:	08000f0f 	.word	0x08000f0f
 8000e24:	08000f0f 	.word	0x08000f0f
 8000e28:	08000ec1 	.word	0x08000ec1
 8000e2c:	08000f0f 	.word	0x08000f0f
 8000e30:	08000f0f 	.word	0x08000f0f
 8000e34:	08000f0f 	.word	0x08000f0f
 8000e38:	08000e73 	.word	0x08000e73
 8000e3c:	08000edb 	.word	0x08000edb
 8000e40:	08000f0f 	.word	0x08000f0f
 8000e44:	08000f0f 	.word	0x08000f0f
 8000e48:	08000f0f 	.word	0x08000f0f
 8000e4c:	08000f0f 	.word	0x08000f0f
 8000e50:	08000f0f 	.word	0x08000f0f
 8000e54:	08000e59 	.word	0x08000e59
		case 'Z':{
			piece_matrix[0][1] = 1;
 8000e58:	4b32      	ldr	r3, [pc, #200]	; (8000f24 <generate_piece+0x194>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	705a      	strb	r2, [r3, #1]
			piece_matrix[1][1] = 1;
 8000e5e:	4b31      	ldr	r3, [pc, #196]	; (8000f24 <generate_piece+0x194>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	715a      	strb	r2, [r3, #5]
			piece_matrix[1][2] = 1;
 8000e64:	4b2f      	ldr	r3, [pc, #188]	; (8000f24 <generate_piece+0x194>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	719a      	strb	r2, [r3, #6]
			piece_matrix[2][2] = 1;
 8000e6a:	4b2e      	ldr	r3, [pc, #184]	; (8000f24 <generate_piece+0x194>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	729a      	strb	r2, [r3, #10]
//			 {{0, 0, 0, 0},
//		  	  {1, 1, 0, 0},
//		 	  {0, 1, 1, 0},
//			  {0, 0, 0, 0}};
			break;
 8000e70:	e04d      	b.n	8000f0e <generate_piece+0x17e>
		}
		case 'S':{
			piece_matrix[1][1] = 1;
 8000e72:	4b2c      	ldr	r3, [pc, #176]	; (8000f24 <generate_piece+0x194>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	715a      	strb	r2, [r3, #5]
			piece_matrix[2][1] = 1;
 8000e78:	4b2a      	ldr	r3, [pc, #168]	; (8000f24 <generate_piece+0x194>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	725a      	strb	r2, [r3, #9]
			piece_matrix[0][2] = 1;
 8000e7e:	4b29      	ldr	r3, [pc, #164]	; (8000f24 <generate_piece+0x194>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	709a      	strb	r2, [r3, #2]
			piece_matrix[1][2] = 1;
 8000e84:	4b27      	ldr	r3, [pc, #156]	; (8000f24 <generate_piece+0x194>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	719a      	strb	r2, [r3, #6]
//			 {{0, 0, 0, 0},
//	  		  {0, 1, 1, 0},
//	 		  {1, 1, 0, 0},
// 			  {0, 0, 0, 0}};
		}
			break;
 8000e8a:	e040      	b.n	8000f0e <generate_piece+0x17e>
		case 'L':{
			piece_matrix[1][0] = 1;
 8000e8c:	4b25      	ldr	r3, [pc, #148]	; (8000f24 <generate_piece+0x194>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	711a      	strb	r2, [r3, #4]
			piece_matrix[1][1] = 1;
 8000e92:	4b24      	ldr	r3, [pc, #144]	; (8000f24 <generate_piece+0x194>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	715a      	strb	r2, [r3, #5]
			piece_matrix[1][2] = 1;
 8000e98:	4b22      	ldr	r3, [pc, #136]	; (8000f24 <generate_piece+0x194>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	719a      	strb	r2, [r3, #6]
			piece_matrix[2][2] = 1;
 8000e9e:	4b21      	ldr	r3, [pc, #132]	; (8000f24 <generate_piece+0x194>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	729a      	strb	r2, [r3, #10]
//			 {{0, 1, 0, 0},
//	  		  {0, 1, 0, 0},
//	 		  {0, 1, 1, 0},
// 			  {0, 0, 0, 0}};
			break;
 8000ea4:	e033      	b.n	8000f0e <generate_piece+0x17e>
		}
		case 'J':{
			piece_matrix[2][0] = 1;
 8000ea6:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <generate_piece+0x194>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	721a      	strb	r2, [r3, #8]
			piece_matrix[2][1] = 1;
 8000eac:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <generate_piece+0x194>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	725a      	strb	r2, [r3, #9]
			piece_matrix[1][2] = 1;
 8000eb2:	4b1c      	ldr	r3, [pc, #112]	; (8000f24 <generate_piece+0x194>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	719a      	strb	r2, [r3, #6]
			piece_matrix[2][2] = 1;
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <generate_piece+0x194>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	729a      	strb	r2, [r3, #10]
//			 {{0, 0, 1, 0},
//	  		  {0, 0, 1, 0},
//	 		  {0, 1, 1, 0},
// 			  {0, 0, 0, 0}};
			break;
 8000ebe:	e026      	b.n	8000f0e <generate_piece+0x17e>
		}
		case 'O':{
			piece_matrix[1][1] = 1;
 8000ec0:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <generate_piece+0x194>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	715a      	strb	r2, [r3, #5]
			piece_matrix[2][1] = 1;
 8000ec6:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <generate_piece+0x194>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	725a      	strb	r2, [r3, #9]
			piece_matrix[1][2] = 1;
 8000ecc:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <generate_piece+0x194>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	719a      	strb	r2, [r3, #6]
			piece_matrix[2][2] = 1;
 8000ed2:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <generate_piece+0x194>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	729a      	strb	r2, [r3, #10]
//			 {{0, 0, 0, 0},
//	  		  {0, 1, 1, 0},
//	 		  {0, 1, 1, 0},
// 			  {0, 0, 0, 0}};
			break;
 8000ed8:	e019      	b.n	8000f0e <generate_piece+0x17e>
		}
		case 'T':{
			piece_matrix[0][1] = 1;
 8000eda:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <generate_piece+0x194>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	705a      	strb	r2, [r3, #1]
			piece_matrix[1][1] = 1;
 8000ee0:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <generate_piece+0x194>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	715a      	strb	r2, [r3, #5]
			piece_matrix[2][1] = 1;
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <generate_piece+0x194>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	725a      	strb	r2, [r3, #9]
			piece_matrix[1][2] = 1;
 8000eec:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <generate_piece+0x194>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	719a      	strb	r2, [r3, #6]
//			 {{0, 0, 0, 0},
//	  		  {1, 1, 1, 0},
//	 		  {0, 1, 0, 0},
// 			  {0, 0, 0, 0}};
			break;
 8000ef2:	e00c      	b.n	8000f0e <generate_piece+0x17e>
		}
		case 'I':{
			piece_matrix[1][0] = 1;
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <generate_piece+0x194>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	711a      	strb	r2, [r3, #4]
			piece_matrix[1][1] = 1;
 8000efa:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <generate_piece+0x194>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	715a      	strb	r2, [r3, #5]
			piece_matrix[1][2] = 1;
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <generate_piece+0x194>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	719a      	strb	r2, [r3, #6]
			piece_matrix[1][3] = 1;
 8000f06:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <generate_piece+0x194>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	71da      	strb	r2, [r3, #7]
//			 {{0, 1, 0, 0},
//	  		  {0, 1, 0, 0},
//	 		  {0, 1, 0, 0},
// 			  {0, 1, 0, 0}};
			break;
 8000f0c:	bf00      	nop
		}
	}
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	200002fd 	.word	0x200002fd
 8000f20:	200002fe 	.word	0x200002fe
 8000f24:	200002e8 	.word	0x200002e8

08000f28 <rotate_clockwise>:

void rotate_clockwise(uint8_t matrix[4][4])
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b087      	sub	sp, #28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
    int i, j, temp;

    // Transpose the matrix in place
    for (i = 0; i < 4; i++) {
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	e02d      	b.n	8000f92 <rotate_clockwise+0x6a>
        for (j = i + 1; j < 4; j++) {
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	e023      	b.n	8000f86 <rotate_clockwise+0x5e>
            temp = matrix[i][j];
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	441a      	add	r2, r3
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	4413      	add	r3, r2
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	60fb      	str	r3, [r7, #12]
            matrix[i][j] = matrix[j][i];
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	18d1      	adds	r1, r2, r3
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	441a      	add	r2, r3
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	440b      	add	r3, r1
 8000f62:	7819      	ldrb	r1, [r3, #0]
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4413      	add	r3, r2
 8000f68:	460a      	mov	r2, r1
 8000f6a:	701a      	strb	r2, [r3, #0]
            matrix[j][i] = temp;
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	441a      	add	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	b2d9      	uxtb	r1, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	460a      	mov	r2, r1
 8000f7e:	701a      	strb	r2, [r3, #0]
        for (j = i + 1; j < 4; j++) {
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	3301      	adds	r3, #1
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	2b03      	cmp	r3, #3
 8000f8a:	ddd8      	ble.n	8000f3e <rotate_clockwise+0x16>
    for (i = 0; i < 4; i++) {
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	2b03      	cmp	r3, #3
 8000f96:	ddce      	ble.n	8000f36 <rotate_clockwise+0xe>
        }
    }

    // Reverse the rows of the transposed matrix
    for (i = 0; i < 2; i++) {
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	e030      	b.n	8001000 <rotate_clockwise+0xd8>
        for (j = 0; j < 4; j++) {
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	e027      	b.n	8000ff4 <rotate_clockwise+0xcc>
            temp = matrix[i][j];
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	441a      	add	r2, r3
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	4413      	add	r3, r2
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	60fb      	str	r3, [r7, #12]
            matrix[i][j] = matrix[3 - i][j];
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	f1c3 0303 	rsb	r3, r3, #3
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	18d1      	adds	r1, r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	441a      	add	r2, r3
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	440b      	add	r3, r1
 8000fcc:	7819      	ldrb	r1, [r3, #0]
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	460a      	mov	r2, r1
 8000fd4:	701a      	strb	r2, [r3, #0]
            matrix[3 - i][j] = temp;
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	f1c3 0303 	rsb	r3, r3, #3
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	441a      	add	r2, r3
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	b2d9      	uxtb	r1, r3
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	4413      	add	r3, r2
 8000fea:	460a      	mov	r2, r1
 8000fec:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < 4; j++) {
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	ddd4      	ble.n	8000fa4 <rotate_clockwise+0x7c>
    for (i = 0; i < 2; i++) {
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	2b01      	cmp	r3, #1
 8001004:	ddcb      	ble.n	8000f9e <rotate_clockwise+0x76>
        }
    }
}
 8001006:	bf00      	nop
 8001008:	bf00      	nop
 800100a:	371c      	adds	r7, #28
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <rotate_counter_clockwise>:

void rotate_counter_clockwise(uint8_t matrix[4][4])
{
 8001014:	b480      	push	{r7}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
    int i, j, temp;

    // Reverse the columns of the matrix
    for (i = 0; i < 4; i++) {
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	e02d      	b.n	800107e <rotate_counter_clockwise+0x6a>
        for (j = 0; j < 2; j++) {
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	e024      	b.n	8001072 <rotate_counter_clockwise+0x5e>
            temp = matrix[i][j];
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	441a      	add	r2, r3
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	4413      	add	r3, r2
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	60fb      	str	r3, [r7, #12]
            matrix[i][j] = matrix[i][3 - j];
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	18d1      	adds	r1, r2, r3
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	f1c3 0303 	rsb	r3, r3, #3
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	0092      	lsls	r2, r2, #2
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	4402      	add	r2, r0
 800104e:	5cc9      	ldrb	r1, [r1, r3]
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	4413      	add	r3, r2
 8001054:	460a      	mov	r2, r1
 8001056:	701a      	strb	r2, [r3, #0]
            matrix[i][3 - j] = temp;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	441a      	add	r2, r3
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	f1c3 0303 	rsb	r3, r3, #3
 8001066:	68f9      	ldr	r1, [r7, #12]
 8001068:	b2c9      	uxtb	r1, r1
 800106a:	54d1      	strb	r1, [r2, r3]
        for (j = 0; j < 2; j++) {
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	3301      	adds	r3, #1
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	2b01      	cmp	r3, #1
 8001076:	ddd7      	ble.n	8001028 <rotate_counter_clockwise+0x14>
    for (i = 0; i < 4; i++) {
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	3301      	adds	r3, #1
 800107c:	617b      	str	r3, [r7, #20]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	2b03      	cmp	r3, #3
 8001082:	ddce      	ble.n	8001022 <rotate_counter_clockwise+0xe>
        }
    }

    // Transpose the matrix in place
    for (i = 0; i < 4; i++) {
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	e02d      	b.n	80010e6 <rotate_counter_clockwise+0xd2>
        for (j = i + 1; j < 4; j++) {
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	3301      	adds	r3, #1
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	e023      	b.n	80010da <rotate_counter_clockwise+0xc6>
            temp = matrix[i][j];
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	441a      	add	r2, r3
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4413      	add	r3, r2
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	60fb      	str	r3, [r7, #12]
            matrix[i][j] = matrix[j][i];
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	18d1      	adds	r1, r2, r3
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	441a      	add	r2, r3
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	440b      	add	r3, r1
 80010b6:	7819      	ldrb	r1, [r3, #0]
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	4413      	add	r3, r2
 80010bc:	460a      	mov	r2, r1
 80010be:	701a      	strb	r2, [r3, #0]
            matrix[j][i] = temp;
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	441a      	add	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	b2d9      	uxtb	r1, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	4413      	add	r3, r2
 80010d0:	460a      	mov	r2, r1
 80010d2:	701a      	strb	r2, [r3, #0]
        for (j = i + 1; j < 4; j++) {
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	3301      	adds	r3, #1
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	2b03      	cmp	r3, #3
 80010de:	ddd8      	ble.n	8001092 <rotate_counter_clockwise+0x7e>
    for (i = 0; i < 4; i++) {
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	3301      	adds	r3, #1
 80010e4:	617b      	str	r3, [r7, #20]
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	2b03      	cmp	r3, #3
 80010ea:	ddce      	ble.n	800108a <rotate_counter_clockwise+0x76>
        }
    }
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	371c      	adds	r7, #28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <disp_row>:
			  grid[X+i][Y+j] = 0;
	  			  }
	  		  }
}

void disp_row(int row){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]



	  if (row == 0){
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d120      	bne.n	800114c <disp_row+0x50>

		  		HAL_SPI_Transmit(&hspi1, data1, 16, 10);
 800110a:	230a      	movs	r3, #10
 800110c:	2210      	movs	r2, #16
 800110e:	4951      	ldr	r1, [pc, #324]	; (8001254 <disp_row+0x158>)
 8001110:	4851      	ldr	r0, [pc, #324]	; (8001258 <disp_row+0x15c>)
 8001112:	f003 f926 	bl	8004362 <HAL_SPI_Transmit>
		  		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001116:	bf00      	nop
 8001118:	484f      	ldr	r0, [pc, #316]	; (8001258 <disp_row+0x15c>)
 800111a:	f003 fa5e 	bl	80045da <HAL_SPI_GetState>
 800111e:	4603      	mov	r3, r0
 8001120:	2b01      	cmp	r3, #1
 8001122:	d1f9      	bne.n	8001118 <disp_row+0x1c>

		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	2140      	movs	r1, #64	; 0x40
 8001128:	484c      	ldr	r0, [pc, #304]	; (800125c <disp_row+0x160>)
 800112a:	f002 fc2f 	bl	800398c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 800112e:	2201      	movs	r2, #1
 8001130:	2140      	movs	r1, #64	; 0x40
 8001132:	484a      	ldr	r0, [pc, #296]	; (800125c <disp_row+0x160>)
 8001134:	f002 fc2a 	bl	800398c <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8001138:	2200      	movs	r2, #0
 800113a:	2110      	movs	r1, #16
 800113c:	4848      	ldr	r0, [pc, #288]	; (8001260 <disp_row+0x164>)
 800113e:	f002 fc25 	bl	800398c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	2120      	movs	r1, #32
 8001146:	4846      	ldr	r0, [pc, #280]	; (8001260 <disp_row+0x164>)
 8001148:	f002 fc20 	bl	800398c <HAL_GPIO_WritePin>
	  }
	  if (row == 1){
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d120      	bne.n	8001194 <disp_row+0x98>

	  		HAL_SPI_Transmit(&hspi1, data2, 16, 10);
 8001152:	230a      	movs	r3, #10
 8001154:	2210      	movs	r2, #16
 8001156:	4943      	ldr	r1, [pc, #268]	; (8001264 <disp_row+0x168>)
 8001158:	483f      	ldr	r0, [pc, #252]	; (8001258 <disp_row+0x15c>)
 800115a:	f003 f902 	bl	8004362 <HAL_SPI_Transmit>
	  		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800115e:	bf00      	nop
 8001160:	483d      	ldr	r0, [pc, #244]	; (8001258 <disp_row+0x15c>)
 8001162:	f003 fa3a 	bl	80045da <HAL_SPI_GetState>
 8001166:	4603      	mov	r3, r0
 8001168:	2b01      	cmp	r3, #1
 800116a:	d1f9      	bne.n	8001160 <disp_row+0x64>

		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 800116c:	2200      	movs	r2, #0
 800116e:	2140      	movs	r1, #64	; 0x40
 8001170:	483a      	ldr	r0, [pc, #232]	; (800125c <disp_row+0x160>)
 8001172:	f002 fc0b 	bl	800398c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8001176:	2201      	movs	r2, #1
 8001178:	2140      	movs	r1, #64	; 0x40
 800117a:	4838      	ldr	r0, [pc, #224]	; (800125c <disp_row+0x160>)
 800117c:	f002 fc06 	bl	800398c <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8001180:	2201      	movs	r2, #1
 8001182:	2110      	movs	r1, #16
 8001184:	4836      	ldr	r0, [pc, #216]	; (8001260 <disp_row+0x164>)
 8001186:	f002 fc01 	bl	800398c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	2120      	movs	r1, #32
 800118e:	4834      	ldr	r0, [pc, #208]	; (8001260 <disp_row+0x164>)
 8001190:	f002 fbfc 	bl	800398c <HAL_GPIO_WritePin>

	  }

	  if (row == 2){
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b02      	cmp	r3, #2
 8001198:	d120      	bne.n	80011dc <disp_row+0xe0>

	  		HAL_SPI_Transmit(&hspi1, data3, 16, 10);
 800119a:	230a      	movs	r3, #10
 800119c:	2210      	movs	r2, #16
 800119e:	4932      	ldr	r1, [pc, #200]	; (8001268 <disp_row+0x16c>)
 80011a0:	482d      	ldr	r0, [pc, #180]	; (8001258 <disp_row+0x15c>)
 80011a2:	f003 f8de 	bl	8004362 <HAL_SPI_Transmit>
	  		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80011a6:	bf00      	nop
 80011a8:	482b      	ldr	r0, [pc, #172]	; (8001258 <disp_row+0x15c>)
 80011aa:	f003 fa16 	bl	80045da <HAL_SPI_GetState>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d1f9      	bne.n	80011a8 <disp_row+0xac>

		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2140      	movs	r1, #64	; 0x40
 80011b8:	4828      	ldr	r0, [pc, #160]	; (800125c <disp_row+0x160>)
 80011ba:	f002 fbe7 	bl	800398c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 80011be:	2201      	movs	r2, #1
 80011c0:	2140      	movs	r1, #64	; 0x40
 80011c2:	4826      	ldr	r0, [pc, #152]	; (800125c <disp_row+0x160>)
 80011c4:	f002 fbe2 	bl	800398c <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2110      	movs	r1, #16
 80011cc:	4824      	ldr	r0, [pc, #144]	; (8001260 <disp_row+0x164>)
 80011ce:	f002 fbdd 	bl	800398c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 80011d2:	2201      	movs	r2, #1
 80011d4:	2120      	movs	r1, #32
 80011d6:	4822      	ldr	r0, [pc, #136]	; (8001260 <disp_row+0x164>)
 80011d8:	f002 fbd8 	bl	800398c <HAL_GPIO_WritePin>

	  }

	  if (row == 3){
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b03      	cmp	r3, #3
 80011e0:	d120      	bne.n	8001224 <disp_row+0x128>

	  		HAL_SPI_Transmit(&hspi1, data4, 16, 10);
 80011e2:	230a      	movs	r3, #10
 80011e4:	2210      	movs	r2, #16
 80011e6:	4921      	ldr	r1, [pc, #132]	; (800126c <disp_row+0x170>)
 80011e8:	481b      	ldr	r0, [pc, #108]	; (8001258 <disp_row+0x15c>)
 80011ea:	f003 f8ba 	bl	8004362 <HAL_SPI_Transmit>
	  		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80011ee:	bf00      	nop
 80011f0:	4819      	ldr	r0, [pc, #100]	; (8001258 <disp_row+0x15c>)
 80011f2:	f003 f9f2 	bl	80045da <HAL_SPI_GetState>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d1f9      	bne.n	80011f0 <disp_row+0xf4>

		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2140      	movs	r1, #64	; 0x40
 8001200:	4816      	ldr	r0, [pc, #88]	; (800125c <disp_row+0x160>)
 8001202:	f002 fbc3 	bl	800398c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8001206:	2201      	movs	r2, #1
 8001208:	2140      	movs	r1, #64	; 0x40
 800120a:	4814      	ldr	r0, [pc, #80]	; (800125c <disp_row+0x160>)
 800120c:	f002 fbbe 	bl	800398c <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8001210:	2201      	movs	r2, #1
 8001212:	2110      	movs	r1, #16
 8001214:	4812      	ldr	r0, [pc, #72]	; (8001260 <disp_row+0x164>)
 8001216:	f002 fbb9 	bl	800398c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 800121a:	2201      	movs	r2, #1
 800121c:	2120      	movs	r1, #32
 800121e:	4810      	ldr	r0, [pc, #64]	; (8001260 <disp_row+0x164>)
 8001220:	f002 fbb4 	bl	800398c <HAL_GPIO_WritePin>

	  }


	  HAL_GPIO_WritePin(nOE_GPIO_Port, nOE_Pin, GPIO_PIN_SET);
 8001224:	2201      	movs	r2, #1
 8001226:	2110      	movs	r1, #16
 8001228:	480c      	ldr	r0, [pc, #48]	; (800125c <disp_row+0x160>)
 800122a:	f002 fbaf 	bl	800398c <HAL_GPIO_WritePin>
		  for(uint32_t x=0; x<=500; x++) {};
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	e002      	b.n	800123a <disp_row+0x13e>
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	3301      	adds	r3, #1
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001240:	d9f8      	bls.n	8001234 <disp_row+0x138>
	 HAL_GPIO_WritePin(nOE_GPIO_Port, nOE_Pin, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	2110      	movs	r1, #16
 8001246:	4805      	ldr	r0, [pc, #20]	; (800125c <disp_row+0x160>)
 8001248:	f002 fba0 	bl	800398c <HAL_GPIO_WritePin>
  }
 800124c:	bf00      	nop
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	200001a0 	.word	0x200001a0
 8001258:	20000304 	.word	0x20000304
 800125c:	40020000 	.word	0x40020000
 8001260:	40020800 	.word	0x40020800
 8001264:	200001b0 	.word	0x200001b0
 8001268:	200001c0 	.word	0x200001c0
 800126c:	200001d0 	.word	0x200001d0

08001270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001270:	b5b0      	push	{r4, r5, r7, lr}
 8001272:	b0ac      	sub	sp, #176	; 0xb0
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001276:	f001 fc9f 	bl	8002bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800127a:	f001 f949 	bl	8002510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800127e:	f7ff fcb9 	bl	8000bf4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001282:	f001 f9b3 	bl	80025ec <MX_SPI1_Init>
  MX_TIM3_Init();
 8001286:	f001 fbd1 	bl	8002a2c <MX_TIM3_Init>
  MX_ADC1_Init();
 800128a:	f7ff f97b 	bl	8000584 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
 HAL_GPIO_WritePin(nOE_GPIO_Port, nOE_Pin, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	2110      	movs	r1, #16
 8001292:	4881      	ldr	r0, [pc, #516]	; (8001498 <main+0x228>)
 8001294:	f002 fb7a 	bl	800398c <HAL_GPIO_WritePin>
 HAL_TIM_Base_Start_IT(&htim3);
 8001298:	4880      	ldr	r0, [pc, #512]	; (800149c <main+0x22c>)
 800129a:	f003 fac7 	bl	800482c <HAL_TIM_Base_Start_IT>
 //initialize grid
 for (i = 0; i < 8; i++){
 800129e:	4b80      	ldr	r3, [pc, #512]	; (80014a0 <main+0x230>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
 80012a4:	e028      	b.n	80012f8 <main+0x88>
	 for(j = 0; j < 16; j++){
 80012a6:	4b7f      	ldr	r3, [pc, #508]	; (80014a4 <main+0x234>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
 80012ac:	e016      	b.n	80012dc <main+0x6c>
		 grid[i][j] = 0;
 80012ae:	4b7c      	ldr	r3, [pc, #496]	; (80014a0 <main+0x230>)
 80012b0:	f993 3000 	ldrsb.w	r3, [r3]
 80012b4:	4618      	mov	r0, r3
 80012b6:	4b7b      	ldr	r3, [pc, #492]	; (80014a4 <main+0x234>)
 80012b8:	f993 3000 	ldrsb.w	r3, [r3]
 80012bc:	4619      	mov	r1, r3
 80012be:	4a7a      	ldr	r2, [pc, #488]	; (80014a8 <main+0x238>)
 80012c0:	0103      	lsls	r3, r0, #4
 80012c2:	4413      	add	r3, r2
 80012c4:	440b      	add	r3, r1
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
	 for(j = 0; j < 16; j++){
 80012ca:	4b76      	ldr	r3, [pc, #472]	; (80014a4 <main+0x234>)
 80012cc:	f993 3000 	ldrsb.w	r3, [r3]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	3301      	adds	r3, #1
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	b25a      	sxtb	r2, r3
 80012d8:	4b72      	ldr	r3, [pc, #456]	; (80014a4 <main+0x234>)
 80012da:	701a      	strb	r2, [r3, #0]
 80012dc:	4b71      	ldr	r3, [pc, #452]	; (80014a4 <main+0x234>)
 80012de:	f993 3000 	ldrsb.w	r3, [r3]
 80012e2:	2b0f      	cmp	r3, #15
 80012e4:	dde3      	ble.n	80012ae <main+0x3e>
 for (i = 0; i < 8; i++){
 80012e6:	4b6e      	ldr	r3, [pc, #440]	; (80014a0 <main+0x230>)
 80012e8:	f993 3000 	ldrsb.w	r3, [r3]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	3301      	adds	r3, #1
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	b25a      	sxtb	r2, r3
 80012f4:	4b6a      	ldr	r3, [pc, #424]	; (80014a0 <main+0x230>)
 80012f6:	701a      	strb	r2, [r3, #0]
 80012f8:	4b69      	ldr	r3, [pc, #420]	; (80014a0 <main+0x230>)
 80012fa:	f993 3000 	ldrsb.w	r3, [r3]
 80012fe:	2b07      	cmp	r3, #7
 8001300:	ddd1      	ble.n	80012a6 <main+0x36>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  while(!game_over){
 8001302:	f001 b8b6 	b.w	8002472 <main+0x1202>
		  if(new_turn){
 8001306:	4b69      	ldr	r3, [pc, #420]	; (80014ac <main+0x23c>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 8141 	beq.w	8001592 <main+0x322>
			  //clear lines
			  //-----------

			  //check for lines to clear
			  uint8_t line_to_clear[16];
			  uint8_t temp_line = 1;
 8001310:	2301      	movs	r3, #1
 8001312:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
			  for(j = 0; j < 16; j++){
 8001316:	4b63      	ldr	r3, [pc, #396]	; (80014a4 <main+0x234>)
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
 800131c:	e045      	b.n	80013aa <main+0x13a>
				  for(i = 0; i < 8; i++){
 800131e:	4b60      	ldr	r3, [pc, #384]	; (80014a0 <main+0x230>)
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]
 8001324:	e01b      	b.n	800135e <main+0xee>
					  temp_line = temp_line*grid[i][j];
 8001326:	4b5e      	ldr	r3, [pc, #376]	; (80014a0 <main+0x230>)
 8001328:	f993 3000 	ldrsb.w	r3, [r3]
 800132c:	4618      	mov	r0, r3
 800132e:	4b5d      	ldr	r3, [pc, #372]	; (80014a4 <main+0x234>)
 8001330:	f993 3000 	ldrsb.w	r3, [r3]
 8001334:	4619      	mov	r1, r3
 8001336:	4a5c      	ldr	r2, [pc, #368]	; (80014a8 <main+0x238>)
 8001338:	0103      	lsls	r3, r0, #4
 800133a:	4413      	add	r3, r2
 800133c:	440b      	add	r3, r1
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 8001344:	fb12 f303 	smulbb	r3, r2, r3
 8001348:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
				  for(i = 0; i < 8; i++){
 800134c:	4b54      	ldr	r3, [pc, #336]	; (80014a0 <main+0x230>)
 800134e:	f993 3000 	ldrsb.w	r3, [r3]
 8001352:	b2db      	uxtb	r3, r3
 8001354:	3301      	adds	r3, #1
 8001356:	b2db      	uxtb	r3, r3
 8001358:	b25a      	sxtb	r2, r3
 800135a:	4b51      	ldr	r3, [pc, #324]	; (80014a0 <main+0x230>)
 800135c:	701a      	strb	r2, [r3, #0]
 800135e:	4b50      	ldr	r3, [pc, #320]	; (80014a0 <main+0x230>)
 8001360:	f993 3000 	ldrsb.w	r3, [r3]
 8001364:	2b07      	cmp	r3, #7
 8001366:	ddde      	ble.n	8001326 <main+0xb6>
				  }
				  if (temp_line) line_to_clear[j] = 1;
 8001368:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800136c:	2b00      	cmp	r3, #0
 800136e:	d008      	beq.n	8001382 <main+0x112>
 8001370:	4b4c      	ldr	r3, [pc, #304]	; (80014a4 <main+0x234>)
 8001372:	f993 3000 	ldrsb.w	r3, [r3]
 8001376:	33b0      	adds	r3, #176	; 0xb0
 8001378:	443b      	add	r3, r7
 800137a:	2201      	movs	r2, #1
 800137c:	f803 2c20 	strb.w	r2, [r3, #-32]
 8001380:	e007      	b.n	8001392 <main+0x122>
				  else line_to_clear[j] = 0;
 8001382:	4b48      	ldr	r3, [pc, #288]	; (80014a4 <main+0x234>)
 8001384:	f993 3000 	ldrsb.w	r3, [r3]
 8001388:	33b0      	adds	r3, #176	; 0xb0
 800138a:	443b      	add	r3, r7
 800138c:	2200      	movs	r2, #0
 800138e:	f803 2c20 	strb.w	r2, [r3, #-32]
				  temp_line = 1;
 8001392:	2301      	movs	r3, #1
 8001394:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
			  for(j = 0; j < 16; j++){
 8001398:	4b42      	ldr	r3, [pc, #264]	; (80014a4 <main+0x234>)
 800139a:	f993 3000 	ldrsb.w	r3, [r3]
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	3301      	adds	r3, #1
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	b25a      	sxtb	r2, r3
 80013a6:	4b3f      	ldr	r3, [pc, #252]	; (80014a4 <main+0x234>)
 80013a8:	701a      	strb	r2, [r3, #0]
 80013aa:	4b3e      	ldr	r3, [pc, #248]	; (80014a4 <main+0x234>)
 80013ac:	f993 3000 	ldrsb.w	r3, [r3]
 80013b0:	2b0f      	cmp	r3, #15
 80013b2:	ddb4      	ble.n	800131e <main+0xae>
			  }

			  //delete lines on grid
			  for (int8_t line = 15; line >= 0; line--){
 80013b4:	230f      	movs	r3, #15
 80013b6:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 80013ba:	e0a7      	b.n	800150c <main+0x29c>
				  if(line_to_clear[line]){
 80013bc:	f997 30ae 	ldrsb.w	r3, [r7, #174]	; 0xae
 80013c0:	33b0      	adds	r3, #176	; 0xb0
 80013c2:	443b      	add	r3, r7
 80013c4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f000 8098 	beq.w	80014fe <main+0x28e>
					for(j = line; j >= 0; j--){
 80013ce:	4a35      	ldr	r2, [pc, #212]	; (80014a4 <main+0x234>)
 80013d0:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80013d4:	7013      	strb	r3, [r2, #0]
 80013d6:	e049      	b.n	800146c <main+0x1fc>
					  for(i = 0; i < 8; i++){
 80013d8:	4b31      	ldr	r3, [pc, #196]	; (80014a0 <main+0x230>)
 80013da:	2200      	movs	r2, #0
 80013dc:	701a      	strb	r2, [r3, #0]
 80013de:	e037      	b.n	8001450 <main+0x1e0>
						  if (j == 0) grid[i][j] = 0;
 80013e0:	4b30      	ldr	r3, [pc, #192]	; (80014a4 <main+0x234>)
 80013e2:	f993 3000 	ldrsb.w	r3, [r3]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10e      	bne.n	8001408 <main+0x198>
 80013ea:	4b2d      	ldr	r3, [pc, #180]	; (80014a0 <main+0x230>)
 80013ec:	f993 3000 	ldrsb.w	r3, [r3]
 80013f0:	4618      	mov	r0, r3
 80013f2:	4b2c      	ldr	r3, [pc, #176]	; (80014a4 <main+0x234>)
 80013f4:	f993 3000 	ldrsb.w	r3, [r3]
 80013f8:	4619      	mov	r1, r3
 80013fa:	4a2b      	ldr	r2, [pc, #172]	; (80014a8 <main+0x238>)
 80013fc:	0103      	lsls	r3, r0, #4
 80013fe:	4413      	add	r3, r2
 8001400:	440b      	add	r3, r1
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
 8001406:	e01a      	b.n	800143e <main+0x1ce>
						  else grid[i][j] = grid[i][j-1];
 8001408:	4b25      	ldr	r3, [pc, #148]	; (80014a0 <main+0x230>)
 800140a:	f993 3000 	ldrsb.w	r3, [r3]
 800140e:	461d      	mov	r5, r3
 8001410:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <main+0x234>)
 8001412:	f993 3000 	ldrsb.w	r3, [r3]
 8001416:	3b01      	subs	r3, #1
 8001418:	4a21      	ldr	r2, [pc, #132]	; (80014a0 <main+0x230>)
 800141a:	f992 2000 	ldrsb.w	r2, [r2]
 800141e:	4614      	mov	r4, r2
 8001420:	4a20      	ldr	r2, [pc, #128]	; (80014a4 <main+0x234>)
 8001422:	f992 2000 	ldrsb.w	r2, [r2]
 8001426:	4610      	mov	r0, r2
 8001428:	491f      	ldr	r1, [pc, #124]	; (80014a8 <main+0x238>)
 800142a:	012a      	lsls	r2, r5, #4
 800142c:	440a      	add	r2, r1
 800142e:	4413      	add	r3, r2
 8001430:	7819      	ldrb	r1, [r3, #0]
 8001432:	4a1d      	ldr	r2, [pc, #116]	; (80014a8 <main+0x238>)
 8001434:	0123      	lsls	r3, r4, #4
 8001436:	4413      	add	r3, r2
 8001438:	4403      	add	r3, r0
 800143a:	460a      	mov	r2, r1
 800143c:	701a      	strb	r2, [r3, #0]
					  for(i = 0; i < 8; i++){
 800143e:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <main+0x230>)
 8001440:	f993 3000 	ldrsb.w	r3, [r3]
 8001444:	b2db      	uxtb	r3, r3
 8001446:	3301      	adds	r3, #1
 8001448:	b2db      	uxtb	r3, r3
 800144a:	b25a      	sxtb	r2, r3
 800144c:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <main+0x230>)
 800144e:	701a      	strb	r2, [r3, #0]
 8001450:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <main+0x230>)
 8001452:	f993 3000 	ldrsb.w	r3, [r3]
 8001456:	2b07      	cmp	r3, #7
 8001458:	ddc2      	ble.n	80013e0 <main+0x170>
					for(j = line; j >= 0; j--){
 800145a:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <main+0x234>)
 800145c:	f993 3000 	ldrsb.w	r3, [r3]
 8001460:	b2db      	uxtb	r3, r3
 8001462:	3b01      	subs	r3, #1
 8001464:	b2db      	uxtb	r3, r3
 8001466:	b25a      	sxtb	r2, r3
 8001468:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <main+0x234>)
 800146a:	701a      	strb	r2, [r3, #0]
 800146c:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <main+0x234>)
 800146e:	f993 3000 	ldrsb.w	r3, [r3]
 8001472:	2b00      	cmp	r3, #0
 8001474:	dab0      	bge.n	80013d8 <main+0x168>
					  }
					}

					//move everything down
					for(int8_t line_fix = 15; line_fix >= 0; line_fix--){
 8001476:	230f      	movs	r3, #15
 8001478:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
 800147c:	e02c      	b.n	80014d8 <main+0x268>
						if (line_fix == 0) line_to_clear[line_fix] = 0;
 800147e:	f997 30ad 	ldrsb.w	r3, [r7, #173]	; 0xad
 8001482:	2b00      	cmp	r3, #0
 8001484:	d114      	bne.n	80014b0 <main+0x240>
 8001486:	f997 30ad 	ldrsb.w	r3, [r7, #173]	; 0xad
 800148a:	33b0      	adds	r3, #176	; 0xb0
 800148c:	443b      	add	r3, r7
 800148e:	2200      	movs	r2, #0
 8001490:	f803 2c20 	strb.w	r2, [r3, #-32]
 8001494:	e019      	b.n	80014ca <main+0x25a>
 8001496:	bf00      	nop
 8001498:	40020000 	.word	0x40020000
 800149c:	20000360 	.word	0x20000360
 80014a0:	200002fd 	.word	0x200002fd
 80014a4:	200002fe 	.word	0x200002fe
 80014a8:	200001e4 	.word	0x200001e4
 80014ac:	2000000b 	.word	0x2000000b
						else line_to_clear[line_fix] = line_to_clear[line_fix-1];
 80014b0:	f997 30ad 	ldrsb.w	r3, [r7, #173]	; 0xad
 80014b4:	1e5a      	subs	r2, r3, #1
 80014b6:	f997 30ad 	ldrsb.w	r3, [r7, #173]	; 0xad
 80014ba:	32b0      	adds	r2, #176	; 0xb0
 80014bc:	443a      	add	r2, r7
 80014be:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 80014c2:	33b0      	adds	r3, #176	; 0xb0
 80014c4:	443b      	add	r3, r7
 80014c6:	f803 2c20 	strb.w	r2, [r3, #-32]
					for(int8_t line_fix = 15; line_fix >= 0; line_fix--){
 80014ca:	f997 30ad 	ldrsb.w	r3, [r7, #173]	; 0xad
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	3b01      	subs	r3, #1
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
 80014d8:	f997 30ad 	ldrsb.w	r3, [r7, #173]	; 0xad
 80014dc:	2b00      	cmp	r3, #0
 80014de:	dace      	bge.n	800147e <main+0x20e>
					}

					if(line_to_clear[line]) line++;
 80014e0:	f997 30ae 	ldrsb.w	r3, [r7, #174]	; 0xae
 80014e4:	33b0      	adds	r3, #176	; 0xb0
 80014e6:	443b      	add	r3, r7
 80014e8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d006      	beq.n	80014fe <main+0x28e>
 80014f0:	f997 30ae 	ldrsb.w	r3, [r7, #174]	; 0xae
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	3301      	adds	r3, #1
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
			  for (int8_t line = 15; line >= 0; line--){
 80014fe:	f997 30ae 	ldrsb.w	r3, [r7, #174]	; 0xae
 8001502:	b2db      	uxtb	r3, r3
 8001504:	3b01      	subs	r3, #1
 8001506:	b2db      	uxtb	r3, r3
 8001508:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 800150c:	f997 30ae 	ldrsb.w	r3, [r7, #174]	; 0xae
 8001510:	2b00      	cmp	r3, #0
 8001512:	f6bf af53 	bge.w	80013bc <main+0x14c>
				  }
			  }

			  HAL_ADC_Start(&hadc1);
 8001516:	4899      	ldr	r0, [pc, #612]	; (800177c <main+0x50c>)
 8001518:	f001 fc28 	bl	8002d6c <HAL_ADC_Start>
			  HAL_ADC_PollForConversion(&hadc1, 1);
 800151c:	2101      	movs	r1, #1
 800151e:	4897      	ldr	r0, [pc, #604]	; (800177c <main+0x50c>)
 8001520:	f001 fcd8 	bl	8002ed4 <HAL_ADC_PollForConversion>
			  adc_noise = HAL_ADC_GetValue(&hadc1);
 8001524:	4895      	ldr	r0, [pc, #596]	; (800177c <main+0x50c>)
 8001526:	f001 fd60 	bl	8002fea <HAL_ADC_GetValue>
 800152a:	4603      	mov	r3, r0
 800152c:	b29a      	uxth	r2, r3
 800152e:	4b94      	ldr	r3, [pc, #592]	; (8001780 <main+0x510>)
 8001530:	801a      	strh	r2, [r3, #0]
			  piece = piece_pool[(rand()+adc_noise)%7];
 8001532:	f003 fffd 	bl	8005530 <rand>
 8001536:	4603      	mov	r3, r0
 8001538:	4a91      	ldr	r2, [pc, #580]	; (8001780 <main+0x510>)
 800153a:	8812      	ldrh	r2, [r2, #0]
 800153c:	441a      	add	r2, r3
 800153e:	4b91      	ldr	r3, [pc, #580]	; (8001784 <main+0x514>)
 8001540:	fb83 1302 	smull	r1, r3, r3, r2
 8001544:	4413      	add	r3, r2
 8001546:	1099      	asrs	r1, r3, #2
 8001548:	17d3      	asrs	r3, r2, #31
 800154a:	1ac9      	subs	r1, r1, r3
 800154c:	460b      	mov	r3, r1
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	1a5b      	subs	r3, r3, r1
 8001552:	1ad1      	subs	r1, r2, r3
 8001554:	4b8c      	ldr	r3, [pc, #560]	; (8001788 <main+0x518>)
 8001556:	5c5a      	ldrb	r2, [r3, r1]
 8001558:	4b8c      	ldr	r3, [pc, #560]	; (800178c <main+0x51c>)
 800155a:	701a      	strb	r2, [r3, #0]
			  generate_piece(piece);
 800155c:	4b8b      	ldr	r3, [pc, #556]	; (800178c <main+0x51c>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fc15 	bl	8000d90 <generate_piece>
			  gridX = 2;
 8001566:	4b8a      	ldr	r3, [pc, #552]	; (8001790 <main+0x520>)
 8001568:	2202      	movs	r2, #2
 800156a:	801a      	strh	r2, [r3, #0]
			  gridY = -3;
 800156c:	4b89      	ldr	r3, [pc, #548]	; (8001794 <main+0x524>)
 800156e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8001572:	801a      	strh	r2, [r3, #0]
			  new_turn = 0;
 8001574:	4b88      	ldr	r3, [pc, #544]	; (8001798 <main+0x528>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
			  moved_down = 0;
 800157a:	4b88      	ldr	r3, [pc, #544]	; (800179c <main+0x52c>)
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]
			  moved_left = 0;
 8001580:	4b87      	ldr	r3, [pc, #540]	; (80017a0 <main+0x530>)
 8001582:	2200      	movs	r2, #0
 8001584:	701a      	strb	r2, [r3, #0]
			  moved_right = 0;
 8001586:	4b87      	ldr	r3, [pc, #540]	; (80017a4 <main+0x534>)
 8001588:	2200      	movs	r2, #0
 800158a:	701a      	strb	r2, [r3, #0]
			  hard_drop = 0;
 800158c:	4b86      	ldr	r3, [pc, #536]	; (80017a8 <main+0x538>)
 800158e:	2200      	movs	r2, #0
 8001590:	701a      	strb	r2, [r3, #0]
		  }

		  //check for every event
		  if(moved_down){
 8001592:	4b82      	ldr	r3, [pc, #520]	; (800179c <main+0x52c>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 8149 	beq.w	8001830 <main+0x5c0>
			  //check for collision with grid
						uint8_t floor_collided = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
						for(i = 0; i < 4; i++){
 80015a4:	4b81      	ldr	r3, [pc, #516]	; (80017ac <main+0x53c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	701a      	strb	r2, [r3, #0]
 80015aa:	e09b      	b.n	80016e4 <main+0x474>
							for(j= 0; j < 4; j++){
 80015ac:	4b80      	ldr	r3, [pc, #512]	; (80017b0 <main+0x540>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
 80015b2:	e088      	b.n	80016c6 <main+0x456>
								if (gridY + j >= 16) floor_collided += piece_matrix[i][j]*1;
 80015b4:	4b77      	ldr	r3, [pc, #476]	; (8001794 <main+0x524>)
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	461a      	mov	r2, r3
 80015bc:	4b7c      	ldr	r3, [pc, #496]	; (80017b0 <main+0x540>)
 80015be:	f993 3000 	ldrsb.w	r3, [r3]
 80015c2:	4413      	add	r3, r2
 80015c4:	2b0f      	cmp	r3, #15
 80015c6:	dd12      	ble.n	80015ee <main+0x37e>
 80015c8:	4b78      	ldr	r3, [pc, #480]	; (80017ac <main+0x53c>)
 80015ca:	f993 3000 	ldrsb.w	r3, [r3]
 80015ce:	4618      	mov	r0, r3
 80015d0:	4b77      	ldr	r3, [pc, #476]	; (80017b0 <main+0x540>)
 80015d2:	f993 3000 	ldrsb.w	r3, [r3]
 80015d6:	4619      	mov	r1, r3
 80015d8:	4a76      	ldr	r2, [pc, #472]	; (80017b4 <main+0x544>)
 80015da:	0083      	lsls	r3, r0, #2
 80015dc:	4413      	add	r3, r2
 80015de:	440b      	add	r3, r1
 80015e0:	781a      	ldrb	r2, [r3, #0]
 80015e2:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 80015e6:	4413      	add	r3, r2
 80015e8:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
 80015ec:	e02f      	b.n	800164e <main+0x3de>
								else if (inside_play_field()) floor_collided += piece_matrix[i][j]*grid[gridX+i][gridY+j];
 80015ee:	f7ff fb93 	bl	8000d18 <inside_play_field>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d02a      	beq.n	800164e <main+0x3de>
 80015f8:	4b6c      	ldr	r3, [pc, #432]	; (80017ac <main+0x53c>)
 80015fa:	f993 3000 	ldrsb.w	r3, [r3]
 80015fe:	4618      	mov	r0, r3
 8001600:	4b6b      	ldr	r3, [pc, #428]	; (80017b0 <main+0x540>)
 8001602:	f993 3000 	ldrsb.w	r3, [r3]
 8001606:	4619      	mov	r1, r3
 8001608:	4a6a      	ldr	r2, [pc, #424]	; (80017b4 <main+0x544>)
 800160a:	0083      	lsls	r3, r0, #2
 800160c:	4413      	add	r3, r2
 800160e:	440b      	add	r3, r1
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	4b5e      	ldr	r3, [pc, #376]	; (8001790 <main+0x520>)
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	b21b      	sxth	r3, r3
 800161a:	461a      	mov	r2, r3
 800161c:	4b63      	ldr	r3, [pc, #396]	; (80017ac <main+0x53c>)
 800161e:	f993 3000 	ldrsb.w	r3, [r3]
 8001622:	441a      	add	r2, r3
 8001624:	4b5b      	ldr	r3, [pc, #364]	; (8001794 <main+0x524>)
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	b21b      	sxth	r3, r3
 800162a:	4619      	mov	r1, r3
 800162c:	4b60      	ldr	r3, [pc, #384]	; (80017b0 <main+0x540>)
 800162e:	f993 3000 	ldrsb.w	r3, [r3]
 8001632:	440b      	add	r3, r1
 8001634:	4960      	ldr	r1, [pc, #384]	; (80017b8 <main+0x548>)
 8001636:	0112      	lsls	r2, r2, #4
 8001638:	440a      	add	r2, r1
 800163a:	4413      	add	r3, r2
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	fb00 f303 	mul.w	r3, r0, r3
 8001642:	b2da      	uxtb	r2, r3
 8001644:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8001648:	4413      	add	r3, r2
 800164a:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
								if((piece_matrix[i][j]&&grid[gridX+i][gridY+j]) && (gridY+j == 0)) game_over = 1;
 800164e:	4b57      	ldr	r3, [pc, #348]	; (80017ac <main+0x53c>)
 8001650:	f993 3000 	ldrsb.w	r3, [r3]
 8001654:	4618      	mov	r0, r3
 8001656:	4b56      	ldr	r3, [pc, #344]	; (80017b0 <main+0x540>)
 8001658:	f993 3000 	ldrsb.w	r3, [r3]
 800165c:	4619      	mov	r1, r3
 800165e:	4a55      	ldr	r2, [pc, #340]	; (80017b4 <main+0x544>)
 8001660:	0083      	lsls	r3, r0, #2
 8001662:	4413      	add	r3, r2
 8001664:	440b      	add	r3, r1
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d023      	beq.n	80016b4 <main+0x444>
 800166c:	4b48      	ldr	r3, [pc, #288]	; (8001790 <main+0x520>)
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	b21b      	sxth	r3, r3
 8001672:	461a      	mov	r2, r3
 8001674:	4b4d      	ldr	r3, [pc, #308]	; (80017ac <main+0x53c>)
 8001676:	f993 3000 	ldrsb.w	r3, [r3]
 800167a:	441a      	add	r2, r3
 800167c:	4b45      	ldr	r3, [pc, #276]	; (8001794 <main+0x524>)
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	b21b      	sxth	r3, r3
 8001682:	4619      	mov	r1, r3
 8001684:	4b4a      	ldr	r3, [pc, #296]	; (80017b0 <main+0x540>)
 8001686:	f993 3000 	ldrsb.w	r3, [r3]
 800168a:	440b      	add	r3, r1
 800168c:	494a      	ldr	r1, [pc, #296]	; (80017b8 <main+0x548>)
 800168e:	0112      	lsls	r2, r2, #4
 8001690:	440a      	add	r2, r1
 8001692:	4413      	add	r3, r2
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00c      	beq.n	80016b4 <main+0x444>
 800169a:	4b3e      	ldr	r3, [pc, #248]	; (8001794 <main+0x524>)
 800169c:	881b      	ldrh	r3, [r3, #0]
 800169e:	b21b      	sxth	r3, r3
 80016a0:	461a      	mov	r2, r3
 80016a2:	4b43      	ldr	r3, [pc, #268]	; (80017b0 <main+0x540>)
 80016a4:	f993 3000 	ldrsb.w	r3, [r3]
 80016a8:	4413      	add	r3, r2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d102      	bne.n	80016b4 <main+0x444>
 80016ae:	4b43      	ldr	r3, [pc, #268]	; (80017bc <main+0x54c>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	701a      	strb	r2, [r3, #0]
							for(j= 0; j < 4; j++){
 80016b4:	4b3e      	ldr	r3, [pc, #248]	; (80017b0 <main+0x540>)
 80016b6:	f993 3000 	ldrsb.w	r3, [r3]
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	3301      	adds	r3, #1
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	b25a      	sxtb	r2, r3
 80016c2:	4b3b      	ldr	r3, [pc, #236]	; (80017b0 <main+0x540>)
 80016c4:	701a      	strb	r2, [r3, #0]
 80016c6:	4b3a      	ldr	r3, [pc, #232]	; (80017b0 <main+0x540>)
 80016c8:	f993 3000 	ldrsb.w	r3, [r3]
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	f77f af71 	ble.w	80015b4 <main+0x344>
						for(i = 0; i < 4; i++){
 80016d2:	4b36      	ldr	r3, [pc, #216]	; (80017ac <main+0x53c>)
 80016d4:	f993 3000 	ldrsb.w	r3, [r3]
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	3301      	adds	r3, #1
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	b25a      	sxtb	r2, r3
 80016e0:	4b32      	ldr	r3, [pc, #200]	; (80017ac <main+0x53c>)
 80016e2:	701a      	strb	r2, [r3, #0]
 80016e4:	4b31      	ldr	r3, [pc, #196]	; (80017ac <main+0x53c>)
 80016e6:	f993 3000 	ldrsb.w	r3, [r3]
 80016ea:	2b03      	cmp	r3, #3
 80016ec:	f77f af5e 	ble.w	80015ac <main+0x33c>
							}
						}
						if (floor_collided) {
 80016f0:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 8098 	beq.w	800182a <main+0x5ba>
							new_turn = 1;
 80016fa:	4b27      	ldr	r3, [pc, #156]	; (8001798 <main+0x528>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	701a      	strb	r2, [r3, #0]
							gridY--;
 8001700:	4b24      	ldr	r3, [pc, #144]	; (8001794 <main+0x524>)
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	b21b      	sxth	r3, r3
 8001706:	b29b      	uxth	r3, r3
 8001708:	3b01      	subs	r3, #1
 800170a:	b29b      	uxth	r3, r3
 800170c:	b21a      	sxth	r2, r3
 800170e:	4b21      	ldr	r3, [pc, #132]	; (8001794 <main+0x524>)
 8001710:	801a      	strh	r2, [r3, #0]
							//save grid
							  for(i = 0; i<4; i++){
 8001712:	4b26      	ldr	r3, [pc, #152]	; (80017ac <main+0x53c>)
 8001714:	2200      	movs	r2, #0
 8001716:	701a      	strb	r2, [r3, #0]
 8001718:	e081      	b.n	800181e <main+0x5ae>
								  for(j = 0; j<4; j++){
 800171a:	4b25      	ldr	r3, [pc, #148]	; (80017b0 <main+0x540>)
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]
 8001720:	e06f      	b.n	8001802 <main+0x592>
									  if(inside_play_field())
 8001722:	f7ff faf9 	bl	8000d18 <inside_play_field>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d061      	beq.n	80017f0 <main+0x580>
									  grid[gridX+i][gridY+j] = grid[gridX+i][gridY+j]||piece_matrix[i][j];
 800172c:	4b18      	ldr	r3, [pc, #96]	; (8001790 <main+0x520>)
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	b21b      	sxth	r3, r3
 8001732:	461a      	mov	r2, r3
 8001734:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <main+0x53c>)
 8001736:	f993 3000 	ldrsb.w	r3, [r3]
 800173a:	441a      	add	r2, r3
 800173c:	4b15      	ldr	r3, [pc, #84]	; (8001794 <main+0x524>)
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	b21b      	sxth	r3, r3
 8001742:	4619      	mov	r1, r3
 8001744:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <main+0x540>)
 8001746:	f993 3000 	ldrsb.w	r3, [r3]
 800174a:	440b      	add	r3, r1
 800174c:	491a      	ldr	r1, [pc, #104]	; (80017b8 <main+0x548>)
 800174e:	0112      	lsls	r2, r2, #4
 8001750:	440a      	add	r2, r1
 8001752:	4413      	add	r3, r2
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d10e      	bne.n	8001778 <main+0x508>
 800175a:	4b14      	ldr	r3, [pc, #80]	; (80017ac <main+0x53c>)
 800175c:	f993 3000 	ldrsb.w	r3, [r3]
 8001760:	4618      	mov	r0, r3
 8001762:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <main+0x540>)
 8001764:	f993 3000 	ldrsb.w	r3, [r3]
 8001768:	4619      	mov	r1, r3
 800176a:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <main+0x544>)
 800176c:	0083      	lsls	r3, r0, #2
 800176e:	4413      	add	r3, r2
 8001770:	440b      	add	r3, r1
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d023      	beq.n	80017c0 <main+0x550>
 8001778:	2101      	movs	r1, #1
 800177a:	e022      	b.n	80017c2 <main+0x552>
 800177c:	20000098 	.word	0x20000098
 8001780:	20000300 	.word	0x20000300
 8001784:	92492493 	.word	0x92492493
 8001788:	20000004 	.word	0x20000004
 800178c:	200002e4 	.word	0x200002e4
 8001790:	200001e0 	.word	0x200001e0
 8001794:	200001e2 	.word	0x200001e2
 8001798:	2000000b 	.word	0x2000000b
 800179c:	200002f8 	.word	0x200002f8
 80017a0:	200002f9 	.word	0x200002f9
 80017a4:	200002fa 	.word	0x200002fa
 80017a8:	200002fc 	.word	0x200002fc
 80017ac:	200002fd 	.word	0x200002fd
 80017b0:	200002fe 	.word	0x200002fe
 80017b4:	200002e8 	.word	0x200002e8
 80017b8:	200001e4 	.word	0x200001e4
 80017bc:	200002ff 	.word	0x200002ff
 80017c0:	2100      	movs	r1, #0
 80017c2:	4b9b      	ldr	r3, [pc, #620]	; (8001a30 <main+0x7c0>)
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	b21b      	sxth	r3, r3
 80017c8:	461a      	mov	r2, r3
 80017ca:	4b9a      	ldr	r3, [pc, #616]	; (8001a34 <main+0x7c4>)
 80017cc:	f993 3000 	ldrsb.w	r3, [r3]
 80017d0:	441a      	add	r2, r3
 80017d2:	4b99      	ldr	r3, [pc, #612]	; (8001a38 <main+0x7c8>)
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	b21b      	sxth	r3, r3
 80017d8:	4618      	mov	r0, r3
 80017da:	4b98      	ldr	r3, [pc, #608]	; (8001a3c <main+0x7cc>)
 80017dc:	f993 3000 	ldrsb.w	r3, [r3]
 80017e0:	4403      	add	r3, r0
 80017e2:	b2c8      	uxtb	r0, r1
 80017e4:	4996      	ldr	r1, [pc, #600]	; (8001a40 <main+0x7d0>)
 80017e6:	0112      	lsls	r2, r2, #4
 80017e8:	440a      	add	r2, r1
 80017ea:	4413      	add	r3, r2
 80017ec:	4602      	mov	r2, r0
 80017ee:	701a      	strb	r2, [r3, #0]
								  for(j = 0; j<4; j++){
 80017f0:	4b92      	ldr	r3, [pc, #584]	; (8001a3c <main+0x7cc>)
 80017f2:	f993 3000 	ldrsb.w	r3, [r3]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	3301      	adds	r3, #1
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	b25a      	sxtb	r2, r3
 80017fe:	4b8f      	ldr	r3, [pc, #572]	; (8001a3c <main+0x7cc>)
 8001800:	701a      	strb	r2, [r3, #0]
 8001802:	4b8e      	ldr	r3, [pc, #568]	; (8001a3c <main+0x7cc>)
 8001804:	f993 3000 	ldrsb.w	r3, [r3]
 8001808:	2b03      	cmp	r3, #3
 800180a:	dd8a      	ble.n	8001722 <main+0x4b2>
							  for(i = 0; i<4; i++){
 800180c:	4b89      	ldr	r3, [pc, #548]	; (8001a34 <main+0x7c4>)
 800180e:	f993 3000 	ldrsb.w	r3, [r3]
 8001812:	b2db      	uxtb	r3, r3
 8001814:	3301      	adds	r3, #1
 8001816:	b2db      	uxtb	r3, r3
 8001818:	b25a      	sxtb	r2, r3
 800181a:	4b86      	ldr	r3, [pc, #536]	; (8001a34 <main+0x7c4>)
 800181c:	701a      	strb	r2, [r3, #0]
 800181e:	4b85      	ldr	r3, [pc, #532]	; (8001a34 <main+0x7c4>)
 8001820:	f993 3000 	ldrsb.w	r3, [r3]
 8001824:	2b03      	cmp	r3, #3
 8001826:	f77f af78 	ble.w	800171a <main+0x4aa>
								  }
							  }
						}
			  moved_down = 0;
 800182a:	4b86      	ldr	r3, [pc, #536]	; (8001a44 <main+0x7d4>)
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
		  }

		  if(hard_drop){
 8001830:	4b85      	ldr	r3, [pc, #532]	; (8001a48 <main+0x7d8>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 8145 	beq.w	8001ac6 <main+0x856>
			  //move piece down until collided
			  	uint8_t floor_collided = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
			  	while(!floor_collided){
 8001842:	e0ae      	b.n	80019a2 <main+0x732>
				  gridY++;
 8001844:	4b7c      	ldr	r3, [pc, #496]	; (8001a38 <main+0x7c8>)
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	b21b      	sxth	r3, r3
 800184a:	b29b      	uxth	r3, r3
 800184c:	3301      	adds	r3, #1
 800184e:	b29b      	uxth	r3, r3
 8001850:	b21a      	sxth	r2, r3
 8001852:	4b79      	ldr	r3, [pc, #484]	; (8001a38 <main+0x7c8>)
 8001854:	801a      	strh	r2, [r3, #0]
				  for(i = 0; i < 4; i++){
 8001856:	4b77      	ldr	r3, [pc, #476]	; (8001a34 <main+0x7c4>)
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]
 800185c:	e09b      	b.n	8001996 <main+0x726>
					  for(j= 0; j < 4; j++){
 800185e:	4b77      	ldr	r3, [pc, #476]	; (8001a3c <main+0x7cc>)
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
 8001864:	e088      	b.n	8001978 <main+0x708>
							if (gridY + j >= 16) floor_collided += piece_matrix[i][j]*1;
 8001866:	4b74      	ldr	r3, [pc, #464]	; (8001a38 <main+0x7c8>)
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	b21b      	sxth	r3, r3
 800186c:	461a      	mov	r2, r3
 800186e:	4b73      	ldr	r3, [pc, #460]	; (8001a3c <main+0x7cc>)
 8001870:	f993 3000 	ldrsb.w	r3, [r3]
 8001874:	4413      	add	r3, r2
 8001876:	2b0f      	cmp	r3, #15
 8001878:	dd12      	ble.n	80018a0 <main+0x630>
 800187a:	4b6e      	ldr	r3, [pc, #440]	; (8001a34 <main+0x7c4>)
 800187c:	f993 3000 	ldrsb.w	r3, [r3]
 8001880:	4618      	mov	r0, r3
 8001882:	4b6e      	ldr	r3, [pc, #440]	; (8001a3c <main+0x7cc>)
 8001884:	f993 3000 	ldrsb.w	r3, [r3]
 8001888:	4619      	mov	r1, r3
 800188a:	4a70      	ldr	r2, [pc, #448]	; (8001a4c <main+0x7dc>)
 800188c:	0083      	lsls	r3, r0, #2
 800188e:	4413      	add	r3, r2
 8001890:	440b      	add	r3, r1
 8001892:	781a      	ldrb	r2, [r3, #0]
 8001894:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8001898:	4413      	add	r3, r2
 800189a:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 800189e:	e02f      	b.n	8001900 <main+0x690>
							else if (inside_play_field()) floor_collided += piece_matrix[i][j]*grid[gridX+i][gridY+j];
 80018a0:	f7ff fa3a 	bl	8000d18 <inside_play_field>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d02a      	beq.n	8001900 <main+0x690>
 80018aa:	4b62      	ldr	r3, [pc, #392]	; (8001a34 <main+0x7c4>)
 80018ac:	f993 3000 	ldrsb.w	r3, [r3]
 80018b0:	4618      	mov	r0, r3
 80018b2:	4b62      	ldr	r3, [pc, #392]	; (8001a3c <main+0x7cc>)
 80018b4:	f993 3000 	ldrsb.w	r3, [r3]
 80018b8:	4619      	mov	r1, r3
 80018ba:	4a64      	ldr	r2, [pc, #400]	; (8001a4c <main+0x7dc>)
 80018bc:	0083      	lsls	r3, r0, #2
 80018be:	4413      	add	r3, r2
 80018c0:	440b      	add	r3, r1
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	4b5a      	ldr	r3, [pc, #360]	; (8001a30 <main+0x7c0>)
 80018c8:	881b      	ldrh	r3, [r3, #0]
 80018ca:	b21b      	sxth	r3, r3
 80018cc:	461a      	mov	r2, r3
 80018ce:	4b59      	ldr	r3, [pc, #356]	; (8001a34 <main+0x7c4>)
 80018d0:	f993 3000 	ldrsb.w	r3, [r3]
 80018d4:	441a      	add	r2, r3
 80018d6:	4b58      	ldr	r3, [pc, #352]	; (8001a38 <main+0x7c8>)
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	b21b      	sxth	r3, r3
 80018dc:	4619      	mov	r1, r3
 80018de:	4b57      	ldr	r3, [pc, #348]	; (8001a3c <main+0x7cc>)
 80018e0:	f993 3000 	ldrsb.w	r3, [r3]
 80018e4:	440b      	add	r3, r1
 80018e6:	4956      	ldr	r1, [pc, #344]	; (8001a40 <main+0x7d0>)
 80018e8:	0112      	lsls	r2, r2, #4
 80018ea:	440a      	add	r2, r1
 80018ec:	4413      	add	r3, r2
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	fb00 f303 	mul.w	r3, r0, r3
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 80018fa:	4413      	add	r3, r2
 80018fc:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
							if((piece_matrix[i][j]&&grid[gridX+i][gridY+j]) && (gridY+j == 0)) game_over = 1;
 8001900:	4b4c      	ldr	r3, [pc, #304]	; (8001a34 <main+0x7c4>)
 8001902:	f993 3000 	ldrsb.w	r3, [r3]
 8001906:	4618      	mov	r0, r3
 8001908:	4b4c      	ldr	r3, [pc, #304]	; (8001a3c <main+0x7cc>)
 800190a:	f993 3000 	ldrsb.w	r3, [r3]
 800190e:	4619      	mov	r1, r3
 8001910:	4a4e      	ldr	r2, [pc, #312]	; (8001a4c <main+0x7dc>)
 8001912:	0083      	lsls	r3, r0, #2
 8001914:	4413      	add	r3, r2
 8001916:	440b      	add	r3, r1
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d023      	beq.n	8001966 <main+0x6f6>
 800191e:	4b44      	ldr	r3, [pc, #272]	; (8001a30 <main+0x7c0>)
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	b21b      	sxth	r3, r3
 8001924:	461a      	mov	r2, r3
 8001926:	4b43      	ldr	r3, [pc, #268]	; (8001a34 <main+0x7c4>)
 8001928:	f993 3000 	ldrsb.w	r3, [r3]
 800192c:	441a      	add	r2, r3
 800192e:	4b42      	ldr	r3, [pc, #264]	; (8001a38 <main+0x7c8>)
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	b21b      	sxth	r3, r3
 8001934:	4619      	mov	r1, r3
 8001936:	4b41      	ldr	r3, [pc, #260]	; (8001a3c <main+0x7cc>)
 8001938:	f993 3000 	ldrsb.w	r3, [r3]
 800193c:	440b      	add	r3, r1
 800193e:	4940      	ldr	r1, [pc, #256]	; (8001a40 <main+0x7d0>)
 8001940:	0112      	lsls	r2, r2, #4
 8001942:	440a      	add	r2, r1
 8001944:	4413      	add	r3, r2
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d00c      	beq.n	8001966 <main+0x6f6>
 800194c:	4b3a      	ldr	r3, [pc, #232]	; (8001a38 <main+0x7c8>)
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	b21b      	sxth	r3, r3
 8001952:	461a      	mov	r2, r3
 8001954:	4b39      	ldr	r3, [pc, #228]	; (8001a3c <main+0x7cc>)
 8001956:	f993 3000 	ldrsb.w	r3, [r3]
 800195a:	4413      	add	r3, r2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d102      	bne.n	8001966 <main+0x6f6>
 8001960:	4b3b      	ldr	r3, [pc, #236]	; (8001a50 <main+0x7e0>)
 8001962:	2201      	movs	r2, #1
 8001964:	701a      	strb	r2, [r3, #0]
					  for(j= 0; j < 4; j++){
 8001966:	4b35      	ldr	r3, [pc, #212]	; (8001a3c <main+0x7cc>)
 8001968:	f993 3000 	ldrsb.w	r3, [r3]
 800196c:	b2db      	uxtb	r3, r3
 800196e:	3301      	adds	r3, #1
 8001970:	b2db      	uxtb	r3, r3
 8001972:	b25a      	sxtb	r2, r3
 8001974:	4b31      	ldr	r3, [pc, #196]	; (8001a3c <main+0x7cc>)
 8001976:	701a      	strb	r2, [r3, #0]
 8001978:	4b30      	ldr	r3, [pc, #192]	; (8001a3c <main+0x7cc>)
 800197a:	f993 3000 	ldrsb.w	r3, [r3]
 800197e:	2b03      	cmp	r3, #3
 8001980:	f77f af71 	ble.w	8001866 <main+0x5f6>
				  for(i = 0; i < 4; i++){
 8001984:	4b2b      	ldr	r3, [pc, #172]	; (8001a34 <main+0x7c4>)
 8001986:	f993 3000 	ldrsb.w	r3, [r3]
 800198a:	b2db      	uxtb	r3, r3
 800198c:	3301      	adds	r3, #1
 800198e:	b2db      	uxtb	r3, r3
 8001990:	b25a      	sxtb	r2, r3
 8001992:	4b28      	ldr	r3, [pc, #160]	; (8001a34 <main+0x7c4>)
 8001994:	701a      	strb	r2, [r3, #0]
 8001996:	4b27      	ldr	r3, [pc, #156]	; (8001a34 <main+0x7c4>)
 8001998:	f993 3000 	ldrsb.w	r3, [r3]
 800199c:	2b03      	cmp	r3, #3
 800199e:	f77f af5e 	ble.w	800185e <main+0x5ee>
			  	while(!floor_collided){
 80019a2:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f43f af4c 	beq.w	8001844 <main+0x5d4>
					  }
				  }
			  	}
			  	new_turn = 1;
 80019ac:	4b29      	ldr	r3, [pc, #164]	; (8001a54 <main+0x7e4>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	701a      	strb	r2, [r3, #0]
				gridY--;
 80019b2:	4b21      	ldr	r3, [pc, #132]	; (8001a38 <main+0x7c8>)
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	b21b      	sxth	r3, r3
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	3b01      	subs	r3, #1
 80019bc:	b29b      	uxth	r3, r3
 80019be:	b21a      	sxth	r2, r3
 80019c0:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <main+0x7c8>)
 80019c2:	801a      	strh	r2, [r3, #0]
				//save grid
				  for(i = 0; i<4; i++){
 80019c4:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <main+0x7c4>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	701a      	strb	r2, [r3, #0]
 80019ca:	e074      	b.n	8001ab6 <main+0x846>
					  for(j = 0; j<4; j++){
 80019cc:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <main+0x7cc>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
 80019d2:	e062      	b.n	8001a9a <main+0x82a>
						  if(inside_play_field())
 80019d4:	f7ff f9a0 	bl	8000d18 <inside_play_field>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d054      	beq.n	8001a88 <main+0x818>
						  grid[gridX+i][gridY+j] = grid[gridX+i][gridY+j]||piece_matrix[i][j];
 80019de:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <main+0x7c0>)
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	b21b      	sxth	r3, r3
 80019e4:	461a      	mov	r2, r3
 80019e6:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <main+0x7c4>)
 80019e8:	f993 3000 	ldrsb.w	r3, [r3]
 80019ec:	441a      	add	r2, r3
 80019ee:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <main+0x7c8>)
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	b21b      	sxth	r3, r3
 80019f4:	4619      	mov	r1, r3
 80019f6:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <main+0x7cc>)
 80019f8:	f993 3000 	ldrsb.w	r3, [r3]
 80019fc:	440b      	add	r3, r1
 80019fe:	4910      	ldr	r1, [pc, #64]	; (8001a40 <main+0x7d0>)
 8001a00:	0112      	lsls	r2, r2, #4
 8001a02:	440a      	add	r2, r1
 8001a04:	4413      	add	r3, r2
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10e      	bne.n	8001a2a <main+0x7ba>
 8001a0c:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <main+0x7c4>)
 8001a0e:	f993 3000 	ldrsb.w	r3, [r3]
 8001a12:	4618      	mov	r0, r3
 8001a14:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <main+0x7cc>)
 8001a16:	f993 3000 	ldrsb.w	r3, [r3]
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4a0b      	ldr	r2, [pc, #44]	; (8001a4c <main+0x7dc>)
 8001a1e:	0083      	lsls	r3, r0, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	440b      	add	r3, r1
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d016      	beq.n	8001a58 <main+0x7e8>
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	e015      	b.n	8001a5a <main+0x7ea>
 8001a2e:	bf00      	nop
 8001a30:	200001e0 	.word	0x200001e0
 8001a34:	200002fd 	.word	0x200002fd
 8001a38:	200001e2 	.word	0x200001e2
 8001a3c:	200002fe 	.word	0x200002fe
 8001a40:	200001e4 	.word	0x200001e4
 8001a44:	200002f8 	.word	0x200002f8
 8001a48:	200002fc 	.word	0x200002fc
 8001a4c:	200002e8 	.word	0x200002e8
 8001a50:	200002ff 	.word	0x200002ff
 8001a54:	2000000b 	.word	0x2000000b
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4bac      	ldr	r3, [pc, #688]	; (8001d0c <main+0xa9c>)
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	b21b      	sxth	r3, r3
 8001a60:	461a      	mov	r2, r3
 8001a62:	4bab      	ldr	r3, [pc, #684]	; (8001d10 <main+0xaa0>)
 8001a64:	f993 3000 	ldrsb.w	r3, [r3]
 8001a68:	441a      	add	r2, r3
 8001a6a:	4baa      	ldr	r3, [pc, #680]	; (8001d14 <main+0xaa4>)
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	b21b      	sxth	r3, r3
 8001a70:	4618      	mov	r0, r3
 8001a72:	4ba9      	ldr	r3, [pc, #676]	; (8001d18 <main+0xaa8>)
 8001a74:	f993 3000 	ldrsb.w	r3, [r3]
 8001a78:	4403      	add	r3, r0
 8001a7a:	b2c8      	uxtb	r0, r1
 8001a7c:	49a7      	ldr	r1, [pc, #668]	; (8001d1c <main+0xaac>)
 8001a7e:	0112      	lsls	r2, r2, #4
 8001a80:	440a      	add	r2, r1
 8001a82:	4413      	add	r3, r2
 8001a84:	4602      	mov	r2, r0
 8001a86:	701a      	strb	r2, [r3, #0]
					  for(j = 0; j<4; j++){
 8001a88:	4ba3      	ldr	r3, [pc, #652]	; (8001d18 <main+0xaa8>)
 8001a8a:	f993 3000 	ldrsb.w	r3, [r3]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	b25a      	sxtb	r2, r3
 8001a96:	4ba0      	ldr	r3, [pc, #640]	; (8001d18 <main+0xaa8>)
 8001a98:	701a      	strb	r2, [r3, #0]
 8001a9a:	4b9f      	ldr	r3, [pc, #636]	; (8001d18 <main+0xaa8>)
 8001a9c:	f993 3000 	ldrsb.w	r3, [r3]
 8001aa0:	2b03      	cmp	r3, #3
 8001aa2:	dd97      	ble.n	80019d4 <main+0x764>
				  for(i = 0; i<4; i++){
 8001aa4:	4b9a      	ldr	r3, [pc, #616]	; (8001d10 <main+0xaa0>)
 8001aa6:	f993 3000 	ldrsb.w	r3, [r3]
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	3301      	adds	r3, #1
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	b25a      	sxtb	r2, r3
 8001ab2:	4b97      	ldr	r3, [pc, #604]	; (8001d10 <main+0xaa0>)
 8001ab4:	701a      	strb	r2, [r3, #0]
 8001ab6:	4b96      	ldr	r3, [pc, #600]	; (8001d10 <main+0xaa0>)
 8001ab8:	f993 3000 	ldrsb.w	r3, [r3]
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	dd85      	ble.n	80019cc <main+0x75c>
					  }
				  }
				hard_drop = 0;
 8001ac0:	4b97      	ldr	r3, [pc, #604]	; (8001d20 <main+0xab0>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	701a      	strb	r2, [r3, #0]
		  }

		  if(moved_left){
 8001ac6:	4b97      	ldr	r3, [pc, #604]	; (8001d24 <main+0xab4>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 8084 	beq.w	8001bda <main+0x96a>
			  //check for collision with anything on the left
				uint8_t left_wall_collided = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
				for(i = 0; i < 4; i++){
 8001ad8:	4b8d      	ldr	r3, [pc, #564]	; (8001d10 <main+0xaa0>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
 8001ade:	e067      	b.n	8001bb0 <main+0x940>
					for(j= 0; j < 4; j++){
 8001ae0:	4b8d      	ldr	r3, [pc, #564]	; (8001d18 <main+0xaa8>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
 8001ae6:	e055      	b.n	8001b94 <main+0x924>
						if (gridX + i < 0) left_wall_collided += piece_matrix[i][j]*1;
 8001ae8:	4b88      	ldr	r3, [pc, #544]	; (8001d0c <main+0xa9c>)
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	b21b      	sxth	r3, r3
 8001aee:	461a      	mov	r2, r3
 8001af0:	4b87      	ldr	r3, [pc, #540]	; (8001d10 <main+0xaa0>)
 8001af2:	f993 3000 	ldrsb.w	r3, [r3]
 8001af6:	4413      	add	r3, r2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	da12      	bge.n	8001b22 <main+0x8b2>
 8001afc:	4b84      	ldr	r3, [pc, #528]	; (8001d10 <main+0xaa0>)
 8001afe:	f993 3000 	ldrsb.w	r3, [r3]
 8001b02:	4618      	mov	r0, r3
 8001b04:	4b84      	ldr	r3, [pc, #528]	; (8001d18 <main+0xaa8>)
 8001b06:	f993 3000 	ldrsb.w	r3, [r3]
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4a86      	ldr	r2, [pc, #536]	; (8001d28 <main+0xab8>)
 8001b0e:	0083      	lsls	r3, r0, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	440b      	add	r3, r1
 8001b14:	781a      	ldrb	r2, [r3, #0]
 8001b16:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 8001b1a:	4413      	add	r3, r2
 8001b1c:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
 8001b20:	e02f      	b.n	8001b82 <main+0x912>
						else if (inside_play_field()) left_wall_collided += piece_matrix[i][j]*grid[gridX+i][gridY+j];
 8001b22:	f7ff f8f9 	bl	8000d18 <inside_play_field>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d02a      	beq.n	8001b82 <main+0x912>
 8001b2c:	4b78      	ldr	r3, [pc, #480]	; (8001d10 <main+0xaa0>)
 8001b2e:	f993 3000 	ldrsb.w	r3, [r3]
 8001b32:	4618      	mov	r0, r3
 8001b34:	4b78      	ldr	r3, [pc, #480]	; (8001d18 <main+0xaa8>)
 8001b36:	f993 3000 	ldrsb.w	r3, [r3]
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4a7a      	ldr	r2, [pc, #488]	; (8001d28 <main+0xab8>)
 8001b3e:	0083      	lsls	r3, r0, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	440b      	add	r3, r1
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	4b70      	ldr	r3, [pc, #448]	; (8001d0c <main+0xa9c>)
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	b21b      	sxth	r3, r3
 8001b4e:	461a      	mov	r2, r3
 8001b50:	4b6f      	ldr	r3, [pc, #444]	; (8001d10 <main+0xaa0>)
 8001b52:	f993 3000 	ldrsb.w	r3, [r3]
 8001b56:	441a      	add	r2, r3
 8001b58:	4b6e      	ldr	r3, [pc, #440]	; (8001d14 <main+0xaa4>)
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	b21b      	sxth	r3, r3
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4b6d      	ldr	r3, [pc, #436]	; (8001d18 <main+0xaa8>)
 8001b62:	f993 3000 	ldrsb.w	r3, [r3]
 8001b66:	440b      	add	r3, r1
 8001b68:	496c      	ldr	r1, [pc, #432]	; (8001d1c <main+0xaac>)
 8001b6a:	0112      	lsls	r2, r2, #4
 8001b6c:	440a      	add	r2, r1
 8001b6e:	4413      	add	r3, r2
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	fb00 f303 	mul.w	r3, r0, r3
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 8001b7c:	4413      	add	r3, r2
 8001b7e:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
					for(j= 0; j < 4; j++){
 8001b82:	4b65      	ldr	r3, [pc, #404]	; (8001d18 <main+0xaa8>)
 8001b84:	f993 3000 	ldrsb.w	r3, [r3]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	b25a      	sxtb	r2, r3
 8001b90:	4b61      	ldr	r3, [pc, #388]	; (8001d18 <main+0xaa8>)
 8001b92:	701a      	strb	r2, [r3, #0]
 8001b94:	4b60      	ldr	r3, [pc, #384]	; (8001d18 <main+0xaa8>)
 8001b96:	f993 3000 	ldrsb.w	r3, [r3]
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	dda4      	ble.n	8001ae8 <main+0x878>
				for(i = 0; i < 4; i++){
 8001b9e:	4b5c      	ldr	r3, [pc, #368]	; (8001d10 <main+0xaa0>)
 8001ba0:	f993 3000 	ldrsb.w	r3, [r3]
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	b25a      	sxtb	r2, r3
 8001bac:	4b58      	ldr	r3, [pc, #352]	; (8001d10 <main+0xaa0>)
 8001bae:	701a      	strb	r2, [r3, #0]
 8001bb0:	4b57      	ldr	r3, [pc, #348]	; (8001d10 <main+0xaa0>)
 8001bb2:	f993 3000 	ldrsb.w	r3, [r3]
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	dd92      	ble.n	8001ae0 <main+0x870>
					}
				}
				if (left_wall_collided) {
 8001bba:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d008      	beq.n	8001bd4 <main+0x964>
					gridX++;
 8001bc2:	4b52      	ldr	r3, [pc, #328]	; (8001d0c <main+0xa9c>)
 8001bc4:	881b      	ldrh	r3, [r3, #0]
 8001bc6:	b21b      	sxth	r3, r3
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	3301      	adds	r3, #1
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	b21a      	sxth	r2, r3
 8001bd0:	4b4e      	ldr	r3, [pc, #312]	; (8001d0c <main+0xa9c>)
 8001bd2:	801a      	strh	r2, [r3, #0]
				}
			  moved_left = 0;
 8001bd4:	4b53      	ldr	r3, [pc, #332]	; (8001d24 <main+0xab4>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	701a      	strb	r2, [r3, #0]
		  }

		  if(moved_right){
 8001bda:	4b54      	ldr	r3, [pc, #336]	; (8001d2c <main+0xabc>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 8084 	beq.w	8001cee <main+0xa7e>
			  //check for collision with right wall
				uint8_t right_wall_collided = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
				for(i = 0; i < 4; i++){
 8001bec:	4b48      	ldr	r3, [pc, #288]	; (8001d10 <main+0xaa0>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	701a      	strb	r2, [r3, #0]
 8001bf2:	e067      	b.n	8001cc4 <main+0xa54>
					for(j= 0; j < 4; j++){
 8001bf4:	4b48      	ldr	r3, [pc, #288]	; (8001d18 <main+0xaa8>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	701a      	strb	r2, [r3, #0]
 8001bfa:	e055      	b.n	8001ca8 <main+0xa38>
						if (gridX + i >= 8) right_wall_collided += piece_matrix[i][j]*1;
 8001bfc:	4b43      	ldr	r3, [pc, #268]	; (8001d0c <main+0xa9c>)
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	b21b      	sxth	r3, r3
 8001c02:	461a      	mov	r2, r3
 8001c04:	4b42      	ldr	r3, [pc, #264]	; (8001d10 <main+0xaa0>)
 8001c06:	f993 3000 	ldrsb.w	r3, [r3]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	2b07      	cmp	r3, #7
 8001c0e:	dd12      	ble.n	8001c36 <main+0x9c6>
 8001c10:	4b3f      	ldr	r3, [pc, #252]	; (8001d10 <main+0xaa0>)
 8001c12:	f993 3000 	ldrsb.w	r3, [r3]
 8001c16:	4618      	mov	r0, r3
 8001c18:	4b3f      	ldr	r3, [pc, #252]	; (8001d18 <main+0xaa8>)
 8001c1a:	f993 3000 	ldrsb.w	r3, [r3]
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4a41      	ldr	r2, [pc, #260]	; (8001d28 <main+0xab8>)
 8001c22:	0083      	lsls	r3, r0, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	440b      	add	r3, r1
 8001c28:	781a      	ldrb	r2, [r3, #0]
 8001c2a:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8001c2e:	4413      	add	r3, r2
 8001c30:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
 8001c34:	e02f      	b.n	8001c96 <main+0xa26>
						else if (inside_play_field()) right_wall_collided += piece_matrix[i][j]*grid[gridX+i][gridY+j];
 8001c36:	f7ff f86f 	bl	8000d18 <inside_play_field>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d02a      	beq.n	8001c96 <main+0xa26>
 8001c40:	4b33      	ldr	r3, [pc, #204]	; (8001d10 <main+0xaa0>)
 8001c42:	f993 3000 	ldrsb.w	r3, [r3]
 8001c46:	4618      	mov	r0, r3
 8001c48:	4b33      	ldr	r3, [pc, #204]	; (8001d18 <main+0xaa8>)
 8001c4a:	f993 3000 	ldrsb.w	r3, [r3]
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4a35      	ldr	r2, [pc, #212]	; (8001d28 <main+0xab8>)
 8001c52:	0083      	lsls	r3, r0, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	440b      	add	r3, r1
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	4b2b      	ldr	r3, [pc, #172]	; (8001d0c <main+0xa9c>)
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	b21b      	sxth	r3, r3
 8001c62:	461a      	mov	r2, r3
 8001c64:	4b2a      	ldr	r3, [pc, #168]	; (8001d10 <main+0xaa0>)
 8001c66:	f993 3000 	ldrsb.w	r3, [r3]
 8001c6a:	441a      	add	r2, r3
 8001c6c:	4b29      	ldr	r3, [pc, #164]	; (8001d14 <main+0xaa4>)
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	b21b      	sxth	r3, r3
 8001c72:	4619      	mov	r1, r3
 8001c74:	4b28      	ldr	r3, [pc, #160]	; (8001d18 <main+0xaa8>)
 8001c76:	f993 3000 	ldrsb.w	r3, [r3]
 8001c7a:	440b      	add	r3, r1
 8001c7c:	4927      	ldr	r1, [pc, #156]	; (8001d1c <main+0xaac>)
 8001c7e:	0112      	lsls	r2, r2, #4
 8001c80:	440a      	add	r2, r1
 8001c82:	4413      	add	r3, r2
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	fb00 f303 	mul.w	r3, r0, r3
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8001c90:	4413      	add	r3, r2
 8001c92:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
					for(j= 0; j < 4; j++){
 8001c96:	4b20      	ldr	r3, [pc, #128]	; (8001d18 <main+0xaa8>)
 8001c98:	f993 3000 	ldrsb.w	r3, [r3]
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	b25a      	sxtb	r2, r3
 8001ca4:	4b1c      	ldr	r3, [pc, #112]	; (8001d18 <main+0xaa8>)
 8001ca6:	701a      	strb	r2, [r3, #0]
 8001ca8:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <main+0xaa8>)
 8001caa:	f993 3000 	ldrsb.w	r3, [r3]
 8001cae:	2b03      	cmp	r3, #3
 8001cb0:	dda4      	ble.n	8001bfc <main+0x98c>
				for(i = 0; i < 4; i++){
 8001cb2:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <main+0xaa0>)
 8001cb4:	f993 3000 	ldrsb.w	r3, [r3]
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	3301      	adds	r3, #1
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	b25a      	sxtb	r2, r3
 8001cc0:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <main+0xaa0>)
 8001cc2:	701a      	strb	r2, [r3, #0]
 8001cc4:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <main+0xaa0>)
 8001cc6:	f993 3000 	ldrsb.w	r3, [r3]
 8001cca:	2b03      	cmp	r3, #3
 8001ccc:	dd92      	ble.n	8001bf4 <main+0x984>
					}
				}
				if (right_wall_collided) {
 8001cce:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d008      	beq.n	8001ce8 <main+0xa78>
					gridX--;
 8001cd6:	4b0d      	ldr	r3, [pc, #52]	; (8001d0c <main+0xa9c>)
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	b21b      	sxth	r3, r3
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	b21a      	sxth	r2, r3
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <main+0xa9c>)
 8001ce6:	801a      	strh	r2, [r3, #0]
				}
			  moved_right = 0;
 8001ce8:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <main+0xabc>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	701a      	strb	r2, [r3, #0]
		  }

		  if(rotated){
 8001cee:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <main+0xac0>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 820f 	beq.w	8002118 <main+0xea8>
			  //create a temporary copy
			  uint8_t temp[4][4];
			  for(i = 0; i < 4; i++){
 8001cfa:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <main+0xaa0>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]
 8001d00:	e04a      	b.n	8001d98 <main+0xb28>
				  for(j = 0; j < 4; j++){
 8001d02:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <main+0xaa8>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]
 8001d08:	e038      	b.n	8001d7c <main+0xb0c>
 8001d0a:	bf00      	nop
 8001d0c:	200001e0 	.word	0x200001e0
 8001d10:	200002fd 	.word	0x200002fd
 8001d14:	200001e2 	.word	0x200001e2
 8001d18:	200002fe 	.word	0x200002fe
 8001d1c:	200001e4 	.word	0x200001e4
 8001d20:	200002fc 	.word	0x200002fc
 8001d24:	200002f9 	.word	0x200002f9
 8001d28:	200002e8 	.word	0x200002e8
 8001d2c:	200002fa 	.word	0x200002fa
 8001d30:	200002fb 	.word	0x200002fb
					  temp[i][j] = piece_matrix[i][j];
 8001d34:	4ba8      	ldr	r3, [pc, #672]	; (8001fd8 <main+0xd68>)
 8001d36:	f993 3000 	ldrsb.w	r3, [r3]
 8001d3a:	461d      	mov	r5, r3
 8001d3c:	4ba7      	ldr	r3, [pc, #668]	; (8001fdc <main+0xd6c>)
 8001d3e:	f993 3000 	ldrsb.w	r3, [r3]
 8001d42:	461c      	mov	r4, r3
 8001d44:	4ba4      	ldr	r3, [pc, #656]	; (8001fd8 <main+0xd68>)
 8001d46:	f993 3000 	ldrsb.w	r3, [r3]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	4ba3      	ldr	r3, [pc, #652]	; (8001fdc <main+0xd6c>)
 8001d4e:	f993 3000 	ldrsb.w	r3, [r3]
 8001d52:	4619      	mov	r1, r3
 8001d54:	4aa2      	ldr	r2, [pc, #648]	; (8001fe0 <main+0xd70>)
 8001d56:	00ab      	lsls	r3, r5, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	4423      	add	r3, r4
 8001d5c:	781a      	ldrb	r2, [r3, #0]
 8001d5e:	0083      	lsls	r3, r0, #2
 8001d60:	33b0      	adds	r3, #176	; 0xb0
 8001d62:	443b      	add	r3, r7
 8001d64:	440b      	add	r3, r1
 8001d66:	3b30      	subs	r3, #48	; 0x30
 8001d68:	701a      	strb	r2, [r3, #0]
				  for(j = 0; j < 4; j++){
 8001d6a:	4b9c      	ldr	r3, [pc, #624]	; (8001fdc <main+0xd6c>)
 8001d6c:	f993 3000 	ldrsb.w	r3, [r3]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	3301      	adds	r3, #1
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	b25a      	sxtb	r2, r3
 8001d78:	4b98      	ldr	r3, [pc, #608]	; (8001fdc <main+0xd6c>)
 8001d7a:	701a      	strb	r2, [r3, #0]
 8001d7c:	4b97      	ldr	r3, [pc, #604]	; (8001fdc <main+0xd6c>)
 8001d7e:	f993 3000 	ldrsb.w	r3, [r3]
 8001d82:	2b03      	cmp	r3, #3
 8001d84:	ddd6      	ble.n	8001d34 <main+0xac4>
			  for(i = 0; i < 4; i++){
 8001d86:	4b94      	ldr	r3, [pc, #592]	; (8001fd8 <main+0xd68>)
 8001d88:	f993 3000 	ldrsb.w	r3, [r3]
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	3301      	adds	r3, #1
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	b25a      	sxtb	r2, r3
 8001d94:	4b90      	ldr	r3, [pc, #576]	; (8001fd8 <main+0xd68>)
 8001d96:	701a      	strb	r2, [r3, #0]
 8001d98:	4b8f      	ldr	r3, [pc, #572]	; (8001fd8 <main+0xd68>)
 8001d9a:	f993 3000 	ldrsb.w	r3, [r3]
 8001d9e:	2b03      	cmp	r3, #3
 8001da0:	ddaf      	ble.n	8001d02 <main+0xa92>
				  }
			  }
			  rotate_clockwise(piece_matrix);
 8001da2:	488f      	ldr	r0, [pc, #572]	; (8001fe0 <main+0xd70>)
 8001da4:	f7ff f8c0 	bl	8000f28 <rotate_clockwise>
			  //check for all collisions
				uint8_t collided = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
				for(i = 0; i < 4; i++){
 8001dae:	4b8a      	ldr	r3, [pc, #552]	; (8001fd8 <main+0xd68>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]
 8001db4:	e085      	b.n	8001ec2 <main+0xc52>
					for(j= 0; j < 4; j++){
 8001db6:	4b89      	ldr	r3, [pc, #548]	; (8001fdc <main+0xd6c>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	701a      	strb	r2, [r3, #0]
 8001dbc:	e073      	b.n	8001ea6 <main+0xc36>
						if ((gridX + i >= 8) || (gridX + i < 0) || (gridY + j < 0) || (gridY + j >= 16))
 8001dbe:	4b89      	ldr	r3, [pc, #548]	; (8001fe4 <main+0xd74>)
 8001dc0:	881b      	ldrh	r3, [r3, #0]
 8001dc2:	b21b      	sxth	r3, r3
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4b84      	ldr	r3, [pc, #528]	; (8001fd8 <main+0xd68>)
 8001dc8:	f993 3000 	ldrsb.w	r3, [r3]
 8001dcc:	4413      	add	r3, r2
 8001dce:	2b07      	cmp	r3, #7
 8001dd0:	dc1d      	bgt.n	8001e0e <main+0xb9e>
 8001dd2:	4b84      	ldr	r3, [pc, #528]	; (8001fe4 <main+0xd74>)
 8001dd4:	881b      	ldrh	r3, [r3, #0]
 8001dd6:	b21b      	sxth	r3, r3
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4b7f      	ldr	r3, [pc, #508]	; (8001fd8 <main+0xd68>)
 8001ddc:	f993 3000 	ldrsb.w	r3, [r3]
 8001de0:	4413      	add	r3, r2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	db13      	blt.n	8001e0e <main+0xb9e>
 8001de6:	4b80      	ldr	r3, [pc, #512]	; (8001fe8 <main+0xd78>)
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	b21b      	sxth	r3, r3
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b7b      	ldr	r3, [pc, #492]	; (8001fdc <main+0xd6c>)
 8001df0:	f993 3000 	ldrsb.w	r3, [r3]
 8001df4:	4413      	add	r3, r2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	db09      	blt.n	8001e0e <main+0xb9e>
 8001dfa:	4b7b      	ldr	r3, [pc, #492]	; (8001fe8 <main+0xd78>)
 8001dfc:	881b      	ldrh	r3, [r3, #0]
 8001dfe:	b21b      	sxth	r3, r3
 8001e00:	461a      	mov	r2, r3
 8001e02:	4b76      	ldr	r3, [pc, #472]	; (8001fdc <main+0xd6c>)
 8001e04:	f993 3000 	ldrsb.w	r3, [r3]
 8001e08:	4413      	add	r3, r2
 8001e0a:	2b0f      	cmp	r3, #15
 8001e0c:	dd12      	ble.n	8001e34 <main+0xbc4>
							collided += piece_matrix[i][j]*1;
 8001e0e:	4b72      	ldr	r3, [pc, #456]	; (8001fd8 <main+0xd68>)
 8001e10:	f993 3000 	ldrsb.w	r3, [r3]
 8001e14:	4618      	mov	r0, r3
 8001e16:	4b71      	ldr	r3, [pc, #452]	; (8001fdc <main+0xd6c>)
 8001e18:	f993 3000 	ldrsb.w	r3, [r3]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4a70      	ldr	r2, [pc, #448]	; (8001fe0 <main+0xd70>)
 8001e20:	0083      	lsls	r3, r0, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	440b      	add	r3, r1
 8001e26:	781a      	ldrb	r2, [r3, #0]
 8001e28:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
 8001e32:	e02f      	b.n	8001e94 <main+0xc24>
						else if (inside_play_field()) collided += piece_matrix[i][j]*grid[gridX+i][gridY+j];
 8001e34:	f7fe ff70 	bl	8000d18 <inside_play_field>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d02a      	beq.n	8001e94 <main+0xc24>
 8001e3e:	4b66      	ldr	r3, [pc, #408]	; (8001fd8 <main+0xd68>)
 8001e40:	f993 3000 	ldrsb.w	r3, [r3]
 8001e44:	4618      	mov	r0, r3
 8001e46:	4b65      	ldr	r3, [pc, #404]	; (8001fdc <main+0xd6c>)
 8001e48:	f993 3000 	ldrsb.w	r3, [r3]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4a64      	ldr	r2, [pc, #400]	; (8001fe0 <main+0xd70>)
 8001e50:	0083      	lsls	r3, r0, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	440b      	add	r3, r1
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	4b62      	ldr	r3, [pc, #392]	; (8001fe4 <main+0xd74>)
 8001e5c:	881b      	ldrh	r3, [r3, #0]
 8001e5e:	b21b      	sxth	r3, r3
 8001e60:	461a      	mov	r2, r3
 8001e62:	4b5d      	ldr	r3, [pc, #372]	; (8001fd8 <main+0xd68>)
 8001e64:	f993 3000 	ldrsb.w	r3, [r3]
 8001e68:	441a      	add	r2, r3
 8001e6a:	4b5f      	ldr	r3, [pc, #380]	; (8001fe8 <main+0xd78>)
 8001e6c:	881b      	ldrh	r3, [r3, #0]
 8001e6e:	b21b      	sxth	r3, r3
 8001e70:	4619      	mov	r1, r3
 8001e72:	4b5a      	ldr	r3, [pc, #360]	; (8001fdc <main+0xd6c>)
 8001e74:	f993 3000 	ldrsb.w	r3, [r3]
 8001e78:	440b      	add	r3, r1
 8001e7a:	495c      	ldr	r1, [pc, #368]	; (8001fec <main+0xd7c>)
 8001e7c:	0112      	lsls	r2, r2, #4
 8001e7e:	440a      	add	r2, r1
 8001e80:	4413      	add	r3, r2
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	fb00 f303 	mul.w	r3, r0, r3
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8001e8e:	4413      	add	r3, r2
 8001e90:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
					for(j= 0; j < 4; j++){
 8001e94:	4b51      	ldr	r3, [pc, #324]	; (8001fdc <main+0xd6c>)
 8001e96:	f993 3000 	ldrsb.w	r3, [r3]
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	b25a      	sxtb	r2, r3
 8001ea2:	4b4e      	ldr	r3, [pc, #312]	; (8001fdc <main+0xd6c>)
 8001ea4:	701a      	strb	r2, [r3, #0]
 8001ea6:	4b4d      	ldr	r3, [pc, #308]	; (8001fdc <main+0xd6c>)
 8001ea8:	f993 3000 	ldrsb.w	r3, [r3]
 8001eac:	2b03      	cmp	r3, #3
 8001eae:	dd86      	ble.n	8001dbe <main+0xb4e>
				for(i = 0; i < 4; i++){
 8001eb0:	4b49      	ldr	r3, [pc, #292]	; (8001fd8 <main+0xd68>)
 8001eb2:	f993 3000 	ldrsb.w	r3, [r3]
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	3301      	adds	r3, #1
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	b25a      	sxtb	r2, r3
 8001ebe:	4b46      	ldr	r3, [pc, #280]	; (8001fd8 <main+0xd68>)
 8001ec0:	701a      	strb	r2, [r3, #0]
 8001ec2:	4b45      	ldr	r3, [pc, #276]	; (8001fd8 <main+0xd68>)
 8001ec4:	f993 3000 	ldrsb.w	r3, [r3]
 8001ec8:	2b03      	cmp	r3, #3
 8001eca:	f77f af74 	ble.w	8001db6 <main+0xb46>
					}
				}
				if (collided) {
 8001ece:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 811d 	beq.w	8002112 <main+0xea2>
					//roll back piece matrix
					for(i = 0; i < 4; i++){
 8001ed8:	4b3f      	ldr	r3, [pc, #252]	; (8001fd8 <main+0xd68>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	701a      	strb	r2, [r3, #0]
 8001ede:	e036      	b.n	8001f4e <main+0xcde>
						  for(j = 0; j < 4; j++){
 8001ee0:	4b3e      	ldr	r3, [pc, #248]	; (8001fdc <main+0xd6c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	701a      	strb	r2, [r3, #0]
 8001ee6:	e024      	b.n	8001f32 <main+0xcc2>
							  piece_matrix[i][j] = temp[i][j];
 8001ee8:	4b3b      	ldr	r3, [pc, #236]	; (8001fd8 <main+0xd68>)
 8001eea:	f993 3000 	ldrsb.w	r3, [r3]
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4b3a      	ldr	r3, [pc, #232]	; (8001fdc <main+0xd6c>)
 8001ef2:	f993 3000 	ldrsb.w	r3, [r3]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	4b37      	ldr	r3, [pc, #220]	; (8001fd8 <main+0xd68>)
 8001efa:	f993 3000 	ldrsb.w	r3, [r3]
 8001efe:	461c      	mov	r4, r3
 8001f00:	4b36      	ldr	r3, [pc, #216]	; (8001fdc <main+0xd6c>)
 8001f02:	f993 3000 	ldrsb.w	r3, [r3]
 8001f06:	4618      	mov	r0, r3
 8001f08:	008b      	lsls	r3, r1, #2
 8001f0a:	33b0      	adds	r3, #176	; 0xb0
 8001f0c:	443b      	add	r3, r7
 8001f0e:	4413      	add	r3, r2
 8001f10:	3b30      	subs	r3, #48	; 0x30
 8001f12:	7819      	ldrb	r1, [r3, #0]
 8001f14:	4a32      	ldr	r2, [pc, #200]	; (8001fe0 <main+0xd70>)
 8001f16:	00a3      	lsls	r3, r4, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	4403      	add	r3, r0
 8001f1c:	460a      	mov	r2, r1
 8001f1e:	701a      	strb	r2, [r3, #0]
						  for(j = 0; j < 4; j++){
 8001f20:	4b2e      	ldr	r3, [pc, #184]	; (8001fdc <main+0xd6c>)
 8001f22:	f993 3000 	ldrsb.w	r3, [r3]
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	3301      	adds	r3, #1
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	b25a      	sxtb	r2, r3
 8001f2e:	4b2b      	ldr	r3, [pc, #172]	; (8001fdc <main+0xd6c>)
 8001f30:	701a      	strb	r2, [r3, #0]
 8001f32:	4b2a      	ldr	r3, [pc, #168]	; (8001fdc <main+0xd6c>)
 8001f34:	f993 3000 	ldrsb.w	r3, [r3]
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	ddd5      	ble.n	8001ee8 <main+0xc78>
					for(i = 0; i < 4; i++){
 8001f3c:	4b26      	ldr	r3, [pc, #152]	; (8001fd8 <main+0xd68>)
 8001f3e:	f993 3000 	ldrsb.w	r3, [r3]
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	3301      	adds	r3, #1
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	b25a      	sxtb	r2, r3
 8001f4a:	4b23      	ldr	r3, [pc, #140]	; (8001fd8 <main+0xd68>)
 8001f4c:	701a      	strb	r2, [r3, #0]
 8001f4e:	4b22      	ldr	r3, [pc, #136]	; (8001fd8 <main+0xd68>)
 8001f50:	f993 3000 	ldrsb.w	r3, [r3]
 8001f54:	2b03      	cmp	r3, #3
 8001f56:	ddc3      	ble.n	8001ee0 <main+0xc70>
						  }
					}
					rotate_counter_clockwise(piece_matrix);
 8001f58:	4821      	ldr	r0, [pc, #132]	; (8001fe0 <main+0xd70>)
 8001f5a:	f7ff f85b 	bl	8001014 <rotate_counter_clockwise>
					//check for all collisions again
						uint8_t collided = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						for(i = 0; i < 4; i++){
 8001f64:	4b1c      	ldr	r3, [pc, #112]	; (8001fd8 <main+0xd68>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	701a      	strb	r2, [r3, #0]
 8001f6a:	e088      	b.n	800207e <main+0xe0e>
							for(j= 0; j < 4; j++){
 8001f6c:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <main+0xd6c>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	701a      	strb	r2, [r3, #0]
 8001f72:	e076      	b.n	8002062 <main+0xdf2>
								if ((gridX + i >= 8) || (gridX + i < 0) || (gridY + j >= 16))
 8001f74:	4b1b      	ldr	r3, [pc, #108]	; (8001fe4 <main+0xd74>)
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	b21b      	sxth	r3, r3
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	4b16      	ldr	r3, [pc, #88]	; (8001fd8 <main+0xd68>)
 8001f7e:	f993 3000 	ldrsb.w	r3, [r3]
 8001f82:	4413      	add	r3, r2
 8001f84:	2b07      	cmp	r3, #7
 8001f86:	dc13      	bgt.n	8001fb0 <main+0xd40>
 8001f88:	4b16      	ldr	r3, [pc, #88]	; (8001fe4 <main+0xd74>)
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	b21b      	sxth	r3, r3
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <main+0xd68>)
 8001f92:	f993 3000 	ldrsb.w	r3, [r3]
 8001f96:	4413      	add	r3, r2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	db09      	blt.n	8001fb0 <main+0xd40>
 8001f9c:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <main+0xd78>)
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	b21b      	sxth	r3, r3
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <main+0xd6c>)
 8001fa6:	f993 3000 	ldrsb.w	r3, [r3]
 8001faa:	4413      	add	r3, r2
 8001fac:	2b0f      	cmp	r3, #15
 8001fae:	dd1f      	ble.n	8001ff0 <main+0xd80>
									collided += piece_matrix[i][j]*1;
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <main+0xd68>)
 8001fb2:	f993 3000 	ldrsb.w	r3, [r3]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <main+0xd6c>)
 8001fba:	f993 3000 	ldrsb.w	r3, [r3]
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4a07      	ldr	r2, [pc, #28]	; (8001fe0 <main+0xd70>)
 8001fc2:	0083      	lsls	r3, r0, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	781a      	ldrb	r2, [r3, #0]
 8001fca:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001fce:	4413      	add	r3, r2
 8001fd0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8001fd4:	e03c      	b.n	8002050 <main+0xde0>
 8001fd6:	bf00      	nop
 8001fd8:	200002fd 	.word	0x200002fd
 8001fdc:	200002fe 	.word	0x200002fe
 8001fe0:	200002e8 	.word	0x200002e8
 8001fe4:	200001e0 	.word	0x200001e0
 8001fe8:	200001e2 	.word	0x200001e2
 8001fec:	200001e4 	.word	0x200001e4
								else if (inside_play_field()) collided += piece_matrix[i][j]*grid[gridX+i][gridY+j];
 8001ff0:	f7fe fe92 	bl	8000d18 <inside_play_field>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d02a      	beq.n	8002050 <main+0xde0>
 8001ffa:	4ba0      	ldr	r3, [pc, #640]	; (800227c <main+0x100c>)
 8001ffc:	f993 3000 	ldrsb.w	r3, [r3]
 8002000:	4618      	mov	r0, r3
 8002002:	4b9f      	ldr	r3, [pc, #636]	; (8002280 <main+0x1010>)
 8002004:	f993 3000 	ldrsb.w	r3, [r3]
 8002008:	4619      	mov	r1, r3
 800200a:	4a9e      	ldr	r2, [pc, #632]	; (8002284 <main+0x1014>)
 800200c:	0083      	lsls	r3, r0, #2
 800200e:	4413      	add	r3, r2
 8002010:	440b      	add	r3, r1
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	4b9c      	ldr	r3, [pc, #624]	; (8002288 <main+0x1018>)
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	b21b      	sxth	r3, r3
 800201c:	461a      	mov	r2, r3
 800201e:	4b97      	ldr	r3, [pc, #604]	; (800227c <main+0x100c>)
 8002020:	f993 3000 	ldrsb.w	r3, [r3]
 8002024:	441a      	add	r2, r3
 8002026:	4b99      	ldr	r3, [pc, #612]	; (800228c <main+0x101c>)
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	b21b      	sxth	r3, r3
 800202c:	4619      	mov	r1, r3
 800202e:	4b94      	ldr	r3, [pc, #592]	; (8002280 <main+0x1010>)
 8002030:	f993 3000 	ldrsb.w	r3, [r3]
 8002034:	440b      	add	r3, r1
 8002036:	4996      	ldr	r1, [pc, #600]	; (8002290 <main+0x1020>)
 8002038:	0112      	lsls	r2, r2, #4
 800203a:	440a      	add	r2, r1
 800203c:	4413      	add	r3, r2
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	fb00 f303 	mul.w	r3, r0, r3
 8002044:	b2da      	uxtb	r2, r3
 8002046:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800204a:	4413      	add	r3, r2
 800204c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
							for(j= 0; j < 4; j++){
 8002050:	4b8b      	ldr	r3, [pc, #556]	; (8002280 <main+0x1010>)
 8002052:	f993 3000 	ldrsb.w	r3, [r3]
 8002056:	b2db      	uxtb	r3, r3
 8002058:	3301      	adds	r3, #1
 800205a:	b2db      	uxtb	r3, r3
 800205c:	b25a      	sxtb	r2, r3
 800205e:	4b88      	ldr	r3, [pc, #544]	; (8002280 <main+0x1010>)
 8002060:	701a      	strb	r2, [r3, #0]
 8002062:	4b87      	ldr	r3, [pc, #540]	; (8002280 <main+0x1010>)
 8002064:	f993 3000 	ldrsb.w	r3, [r3]
 8002068:	2b03      	cmp	r3, #3
 800206a:	dd83      	ble.n	8001f74 <main+0xd04>
						for(i = 0; i < 4; i++){
 800206c:	4b83      	ldr	r3, [pc, #524]	; (800227c <main+0x100c>)
 800206e:	f993 3000 	ldrsb.w	r3, [r3]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	3301      	adds	r3, #1
 8002076:	b2db      	uxtb	r3, r3
 8002078:	b25a      	sxtb	r2, r3
 800207a:	4b80      	ldr	r3, [pc, #512]	; (800227c <main+0x100c>)
 800207c:	701a      	strb	r2, [r3, #0]
 800207e:	4b7f      	ldr	r3, [pc, #508]	; (800227c <main+0x100c>)
 8002080:	f993 3000 	ldrsb.w	r3, [r3]
 8002084:	2b03      	cmp	r3, #3
 8002086:	f77f af71 	ble.w	8001f6c <main+0xcfc>
							}
						}
						if (collided){
 800208a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800208e:	2b00      	cmp	r3, #0
 8002090:	d03f      	beq.n	8002112 <main+0xea2>
							//roll back piece matrix
							for(i = 0; i < 4; i++){
 8002092:	4b7a      	ldr	r3, [pc, #488]	; (800227c <main+0x100c>)
 8002094:	2200      	movs	r2, #0
 8002096:	701a      	strb	r2, [r3, #0]
 8002098:	e036      	b.n	8002108 <main+0xe98>
								  for(j = 0; j < 4; j++){
 800209a:	4b79      	ldr	r3, [pc, #484]	; (8002280 <main+0x1010>)
 800209c:	2200      	movs	r2, #0
 800209e:	701a      	strb	r2, [r3, #0]
 80020a0:	e024      	b.n	80020ec <main+0xe7c>
									  piece_matrix[i][j] = temp[i][j];
 80020a2:	4b76      	ldr	r3, [pc, #472]	; (800227c <main+0x100c>)
 80020a4:	f993 3000 	ldrsb.w	r3, [r3]
 80020a8:	4619      	mov	r1, r3
 80020aa:	4b75      	ldr	r3, [pc, #468]	; (8002280 <main+0x1010>)
 80020ac:	f993 3000 	ldrsb.w	r3, [r3]
 80020b0:	461a      	mov	r2, r3
 80020b2:	4b72      	ldr	r3, [pc, #456]	; (800227c <main+0x100c>)
 80020b4:	f993 3000 	ldrsb.w	r3, [r3]
 80020b8:	461c      	mov	r4, r3
 80020ba:	4b71      	ldr	r3, [pc, #452]	; (8002280 <main+0x1010>)
 80020bc:	f993 3000 	ldrsb.w	r3, [r3]
 80020c0:	4618      	mov	r0, r3
 80020c2:	008b      	lsls	r3, r1, #2
 80020c4:	33b0      	adds	r3, #176	; 0xb0
 80020c6:	443b      	add	r3, r7
 80020c8:	4413      	add	r3, r2
 80020ca:	3b30      	subs	r3, #48	; 0x30
 80020cc:	7819      	ldrb	r1, [r3, #0]
 80020ce:	4a6d      	ldr	r2, [pc, #436]	; (8002284 <main+0x1014>)
 80020d0:	00a3      	lsls	r3, r4, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	4403      	add	r3, r0
 80020d6:	460a      	mov	r2, r1
 80020d8:	701a      	strb	r2, [r3, #0]
								  for(j = 0; j < 4; j++){
 80020da:	4b69      	ldr	r3, [pc, #420]	; (8002280 <main+0x1010>)
 80020dc:	f993 3000 	ldrsb.w	r3, [r3]
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	3301      	adds	r3, #1
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	b25a      	sxtb	r2, r3
 80020e8:	4b65      	ldr	r3, [pc, #404]	; (8002280 <main+0x1010>)
 80020ea:	701a      	strb	r2, [r3, #0]
 80020ec:	4b64      	ldr	r3, [pc, #400]	; (8002280 <main+0x1010>)
 80020ee:	f993 3000 	ldrsb.w	r3, [r3]
 80020f2:	2b03      	cmp	r3, #3
 80020f4:	ddd5      	ble.n	80020a2 <main+0xe32>
							for(i = 0; i < 4; i++){
 80020f6:	4b61      	ldr	r3, [pc, #388]	; (800227c <main+0x100c>)
 80020f8:	f993 3000 	ldrsb.w	r3, [r3]
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	3301      	adds	r3, #1
 8002100:	b2db      	uxtb	r3, r3
 8002102:	b25a      	sxtb	r2, r3
 8002104:	4b5d      	ldr	r3, [pc, #372]	; (800227c <main+0x100c>)
 8002106:	701a      	strb	r2, [r3, #0]
 8002108:	4b5c      	ldr	r3, [pc, #368]	; (800227c <main+0x100c>)
 800210a:	f993 3000 	ldrsb.w	r3, [r3]
 800210e:	2b03      	cmp	r3, #3
 8002110:	ddc3      	ble.n	800209a <main+0xe2a>
								  }
							}
						}
				}
			  rotated = 0;
 8002112:	4b60      	ldr	r3, [pc, #384]	; (8002294 <main+0x1024>)
 8002114:	2200      	movs	r2, #0
 8002116:	701a      	strb	r2, [r3, #0]

		  }

		  //create temporary grid for buffering
		  uint8_t temp_grid[8][16];
		  for(i = 0; i < 8; i++){
 8002118:	4b58      	ldr	r3, [pc, #352]	; (800227c <main+0x100c>)
 800211a:	2200      	movs	r2, #0
 800211c:	701a      	strb	r2, [r3, #0]
 800211e:	e035      	b.n	800218c <main+0xf1c>
			  for(j = 0; j < 16; j++){
 8002120:	4b57      	ldr	r3, [pc, #348]	; (8002280 <main+0x1010>)
 8002122:	2200      	movs	r2, #0
 8002124:	701a      	strb	r2, [r3, #0]
 8002126:	e023      	b.n	8002170 <main+0xf00>
				  temp_grid[i][j] = grid[i][j];
 8002128:	4b54      	ldr	r3, [pc, #336]	; (800227c <main+0x100c>)
 800212a:	f993 3000 	ldrsb.w	r3, [r3]
 800212e:	461d      	mov	r5, r3
 8002130:	4b53      	ldr	r3, [pc, #332]	; (8002280 <main+0x1010>)
 8002132:	f993 3000 	ldrsb.w	r3, [r3]
 8002136:	461c      	mov	r4, r3
 8002138:	4b50      	ldr	r3, [pc, #320]	; (800227c <main+0x100c>)
 800213a:	f993 3000 	ldrsb.w	r3, [r3]
 800213e:	4618      	mov	r0, r3
 8002140:	4b4f      	ldr	r3, [pc, #316]	; (8002280 <main+0x1010>)
 8002142:	f993 3000 	ldrsb.w	r3, [r3]
 8002146:	4619      	mov	r1, r3
 8002148:	4a51      	ldr	r2, [pc, #324]	; (8002290 <main+0x1020>)
 800214a:	012b      	lsls	r3, r5, #4
 800214c:	4413      	add	r3, r2
 800214e:	4423      	add	r3, r4
 8002150:	781a      	ldrb	r2, [r3, #0]
 8002152:	0103      	lsls	r3, r0, #4
 8002154:	33b0      	adds	r3, #176	; 0xb0
 8002156:	443b      	add	r3, r7
 8002158:	440b      	add	r3, r1
 800215a:	3bb0      	subs	r3, #176	; 0xb0
 800215c:	701a      	strb	r2, [r3, #0]
			  for(j = 0; j < 16; j++){
 800215e:	4b48      	ldr	r3, [pc, #288]	; (8002280 <main+0x1010>)
 8002160:	f993 3000 	ldrsb.w	r3, [r3]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	3301      	adds	r3, #1
 8002168:	b2db      	uxtb	r3, r3
 800216a:	b25a      	sxtb	r2, r3
 800216c:	4b44      	ldr	r3, [pc, #272]	; (8002280 <main+0x1010>)
 800216e:	701a      	strb	r2, [r3, #0]
 8002170:	4b43      	ldr	r3, [pc, #268]	; (8002280 <main+0x1010>)
 8002172:	f993 3000 	ldrsb.w	r3, [r3]
 8002176:	2b0f      	cmp	r3, #15
 8002178:	ddd6      	ble.n	8002128 <main+0xeb8>
		  for(i = 0; i < 8; i++){
 800217a:	4b40      	ldr	r3, [pc, #256]	; (800227c <main+0x100c>)
 800217c:	f993 3000 	ldrsb.w	r3, [r3]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	3301      	adds	r3, #1
 8002184:	b2db      	uxtb	r3, r3
 8002186:	b25a      	sxtb	r2, r3
 8002188:	4b3c      	ldr	r3, [pc, #240]	; (800227c <main+0x100c>)
 800218a:	701a      	strb	r2, [r3, #0]
 800218c:	4b3b      	ldr	r3, [pc, #236]	; (800227c <main+0x100c>)
 800218e:	f993 3000 	ldrsb.w	r3, [r3]
 8002192:	2b07      	cmp	r3, #7
 8002194:	ddc4      	ble.n	8002120 <main+0xeb0>
			  }
		  }
		  //setting current piece's place on temp grid
		  for(i = 0; i<4; i++){
 8002196:	4b39      	ldr	r3, [pc, #228]	; (800227c <main+0x100c>)
 8002198:	2200      	movs	r2, #0
 800219a:	701a      	strb	r2, [r3, #0]
 800219c:	e061      	b.n	8002262 <main+0xff2>
			  for(j = 0; j<4; j++){
 800219e:	4b38      	ldr	r3, [pc, #224]	; (8002280 <main+0x1010>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	701a      	strb	r2, [r3, #0]
 80021a4:	e04f      	b.n	8002246 <main+0xfd6>
				  if(inside_play_field())
 80021a6:	f7fe fdb7 	bl	8000d18 <inside_play_field>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d041      	beq.n	8002234 <main+0xfc4>
				  temp_grid[gridX+i][gridY+j] = temp_grid[gridX+i][gridY+j]||piece_matrix[i][j];
 80021b0:	4b35      	ldr	r3, [pc, #212]	; (8002288 <main+0x1018>)
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	b21b      	sxth	r3, r3
 80021b6:	461a      	mov	r2, r3
 80021b8:	4b30      	ldr	r3, [pc, #192]	; (800227c <main+0x100c>)
 80021ba:	f993 3000 	ldrsb.w	r3, [r3]
 80021be:	441a      	add	r2, r3
 80021c0:	4b32      	ldr	r3, [pc, #200]	; (800228c <main+0x101c>)
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	b21b      	sxth	r3, r3
 80021c6:	4619      	mov	r1, r3
 80021c8:	4b2d      	ldr	r3, [pc, #180]	; (8002280 <main+0x1010>)
 80021ca:	f993 3000 	ldrsb.w	r3, [r3]
 80021ce:	440b      	add	r3, r1
 80021d0:	0112      	lsls	r2, r2, #4
 80021d2:	32b0      	adds	r2, #176	; 0xb0
 80021d4:	443a      	add	r2, r7
 80021d6:	4413      	add	r3, r2
 80021d8:	3bb0      	subs	r3, #176	; 0xb0
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10e      	bne.n	80021fe <main+0xf8e>
 80021e0:	4b26      	ldr	r3, [pc, #152]	; (800227c <main+0x100c>)
 80021e2:	f993 3000 	ldrsb.w	r3, [r3]
 80021e6:	4618      	mov	r0, r3
 80021e8:	4b25      	ldr	r3, [pc, #148]	; (8002280 <main+0x1010>)
 80021ea:	f993 3000 	ldrsb.w	r3, [r3]
 80021ee:	4619      	mov	r1, r3
 80021f0:	4a24      	ldr	r2, [pc, #144]	; (8002284 <main+0x1014>)
 80021f2:	0083      	lsls	r3, r0, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	440b      	add	r3, r1
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <main+0xf92>
 80021fe:	2101      	movs	r1, #1
 8002200:	e000      	b.n	8002204 <main+0xf94>
 8002202:	2100      	movs	r1, #0
 8002204:	4b20      	ldr	r3, [pc, #128]	; (8002288 <main+0x1018>)
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	b21b      	sxth	r3, r3
 800220a:	461a      	mov	r2, r3
 800220c:	4b1b      	ldr	r3, [pc, #108]	; (800227c <main+0x100c>)
 800220e:	f993 3000 	ldrsb.w	r3, [r3]
 8002212:	441a      	add	r2, r3
 8002214:	4b1d      	ldr	r3, [pc, #116]	; (800228c <main+0x101c>)
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	b21b      	sxth	r3, r3
 800221a:	4618      	mov	r0, r3
 800221c:	4b18      	ldr	r3, [pc, #96]	; (8002280 <main+0x1010>)
 800221e:	f993 3000 	ldrsb.w	r3, [r3]
 8002222:	4403      	add	r3, r0
 8002224:	b2c9      	uxtb	r1, r1
 8002226:	0112      	lsls	r2, r2, #4
 8002228:	32b0      	adds	r2, #176	; 0xb0
 800222a:	443a      	add	r2, r7
 800222c:	4413      	add	r3, r2
 800222e:	3bb0      	subs	r3, #176	; 0xb0
 8002230:	460a      	mov	r2, r1
 8002232:	701a      	strb	r2, [r3, #0]
			  for(j = 0; j<4; j++){
 8002234:	4b12      	ldr	r3, [pc, #72]	; (8002280 <main+0x1010>)
 8002236:	f993 3000 	ldrsb.w	r3, [r3]
 800223a:	b2db      	uxtb	r3, r3
 800223c:	3301      	adds	r3, #1
 800223e:	b2db      	uxtb	r3, r3
 8002240:	b25a      	sxtb	r2, r3
 8002242:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <main+0x1010>)
 8002244:	701a      	strb	r2, [r3, #0]
 8002246:	4b0e      	ldr	r3, [pc, #56]	; (8002280 <main+0x1010>)
 8002248:	f993 3000 	ldrsb.w	r3, [r3]
 800224c:	2b03      	cmp	r3, #3
 800224e:	ddaa      	ble.n	80021a6 <main+0xf36>
		  for(i = 0; i<4; i++){
 8002250:	4b0a      	ldr	r3, [pc, #40]	; (800227c <main+0x100c>)
 8002252:	f993 3000 	ldrsb.w	r3, [r3]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	3301      	adds	r3, #1
 800225a:	b2db      	uxtb	r3, r3
 800225c:	b25a      	sxtb	r2, r3
 800225e:	4b07      	ldr	r3, [pc, #28]	; (800227c <main+0x100c>)
 8002260:	701a      	strb	r2, [r3, #0]
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <main+0x100c>)
 8002264:	f993 3000 	ldrsb.w	r3, [r3]
 8002268:	2b03      	cmp	r3, #3
 800226a:	dd98      	ble.n	800219e <main+0xf2e>
			  }
		  }
		  //transpose the temp grid matrix for buffering
		  for(i = 0; i < 8; i++){
 800226c:	4b03      	ldr	r3, [pc, #12]	; (800227c <main+0x100c>)
 800226e:	2200      	movs	r2, #0
 8002270:	701a      	strb	r2, [r3, #0]
 8002272:	e044      	b.n	80022fe <main+0x108e>
			  for(j = 0; j < 16; j++){
 8002274:	4b02      	ldr	r3, [pc, #8]	; (8002280 <main+0x1010>)
 8002276:	2200      	movs	r2, #0
 8002278:	701a      	strb	r2, [r3, #0]
 800227a:	e032      	b.n	80022e2 <main+0x1072>
 800227c:	200002fd 	.word	0x200002fd
 8002280:	200002fe 	.word	0x200002fe
 8002284:	200002e8 	.word	0x200002e8
 8002288:	200001e0 	.word	0x200001e0
 800228c:	200001e2 	.word	0x200001e2
 8002290:	200001e4 	.word	0x200001e4
 8002294:	200002fb 	.word	0x200002fb
				  grid_buff[j][i] = temp_grid[i][j];
 8002298:	4b97      	ldr	r3, [pc, #604]	; (80024f8 <main+0x1288>)
 800229a:	f993 3000 	ldrsb.w	r3, [r3]
 800229e:	4619      	mov	r1, r3
 80022a0:	4b96      	ldr	r3, [pc, #600]	; (80024fc <main+0x128c>)
 80022a2:	f993 3000 	ldrsb.w	r3, [r3]
 80022a6:	461a      	mov	r2, r3
 80022a8:	4b94      	ldr	r3, [pc, #592]	; (80024fc <main+0x128c>)
 80022aa:	f993 3000 	ldrsb.w	r3, [r3]
 80022ae:	461c      	mov	r4, r3
 80022b0:	4b91      	ldr	r3, [pc, #580]	; (80024f8 <main+0x1288>)
 80022b2:	f993 3000 	ldrsb.w	r3, [r3]
 80022b6:	4618      	mov	r0, r3
 80022b8:	010b      	lsls	r3, r1, #4
 80022ba:	33b0      	adds	r3, #176	; 0xb0
 80022bc:	443b      	add	r3, r7
 80022be:	4413      	add	r3, r2
 80022c0:	3bb0      	subs	r3, #176	; 0xb0
 80022c2:	7819      	ldrb	r1, [r3, #0]
 80022c4:	4a8e      	ldr	r2, [pc, #568]	; (8002500 <main+0x1290>)
 80022c6:	00e3      	lsls	r3, r4, #3
 80022c8:	4413      	add	r3, r2
 80022ca:	4403      	add	r3, r0
 80022cc:	460a      	mov	r2, r1
 80022ce:	701a      	strb	r2, [r3, #0]
			  for(j = 0; j < 16; j++){
 80022d0:	4b8a      	ldr	r3, [pc, #552]	; (80024fc <main+0x128c>)
 80022d2:	f993 3000 	ldrsb.w	r3, [r3]
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	3301      	adds	r3, #1
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	b25a      	sxtb	r2, r3
 80022de:	4b87      	ldr	r3, [pc, #540]	; (80024fc <main+0x128c>)
 80022e0:	701a      	strb	r2, [r3, #0]
 80022e2:	4b86      	ldr	r3, [pc, #536]	; (80024fc <main+0x128c>)
 80022e4:	f993 3000 	ldrsb.w	r3, [r3]
 80022e8:	2b0f      	cmp	r3, #15
 80022ea:	ddd5      	ble.n	8002298 <main+0x1028>
		  for(i = 0; i < 8; i++){
 80022ec:	4b82      	ldr	r3, [pc, #520]	; (80024f8 <main+0x1288>)
 80022ee:	f993 3000 	ldrsb.w	r3, [r3]
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	3301      	adds	r3, #1
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	b25a      	sxtb	r2, r3
 80022fa:	4b7f      	ldr	r3, [pc, #508]	; (80024f8 <main+0x1288>)
 80022fc:	701a      	strb	r2, [r3, #0]
 80022fe:	4b7e      	ldr	r3, [pc, #504]	; (80024f8 <main+0x1288>)
 8002300:	f993 3000 	ldrsb.w	r3, [r3]
 8002304:	2b07      	cmp	r3, #7
 8002306:	ddb5      	ble.n	8002274 <main+0x1004>
			  }
		  }
		  //reverse the y axis of transposed matrix
		  for(i = 0; i < 16; i++){
 8002308:	4b7b      	ldr	r3, [pc, #492]	; (80024f8 <main+0x1288>)
 800230a:	2200      	movs	r2, #0
 800230c:	701a      	strb	r2, [r3, #0]
 800230e:	e055      	b.n	80023bc <main+0x114c>
			  for(j = 0; j < 4; j++){
 8002310:	4b7a      	ldr	r3, [pc, #488]	; (80024fc <main+0x128c>)
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]
 8002316:	e043      	b.n	80023a0 <main+0x1130>
				  uint8_t temp = grid_buff[i][j];
 8002318:	4b77      	ldr	r3, [pc, #476]	; (80024f8 <main+0x1288>)
 800231a:	f993 3000 	ldrsb.w	r3, [r3]
 800231e:	4618      	mov	r0, r3
 8002320:	4b76      	ldr	r3, [pc, #472]	; (80024fc <main+0x128c>)
 8002322:	f993 3000 	ldrsb.w	r3, [r3]
 8002326:	4619      	mov	r1, r3
 8002328:	4a75      	ldr	r2, [pc, #468]	; (8002500 <main+0x1290>)
 800232a:	00c3      	lsls	r3, r0, #3
 800232c:	4413      	add	r3, r2
 800232e:	440b      	add	r3, r1
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
				  grid_buff[i][j] = grid_buff[i][7-j];
 8002336:	4b70      	ldr	r3, [pc, #448]	; (80024f8 <main+0x1288>)
 8002338:	f993 3000 	ldrsb.w	r3, [r3]
 800233c:	461d      	mov	r5, r3
 800233e:	4b6f      	ldr	r3, [pc, #444]	; (80024fc <main+0x128c>)
 8002340:	f993 3000 	ldrsb.w	r3, [r3]
 8002344:	f1c3 0307 	rsb	r3, r3, #7
 8002348:	4a6b      	ldr	r2, [pc, #428]	; (80024f8 <main+0x1288>)
 800234a:	f992 2000 	ldrsb.w	r2, [r2]
 800234e:	4614      	mov	r4, r2
 8002350:	4a6a      	ldr	r2, [pc, #424]	; (80024fc <main+0x128c>)
 8002352:	f992 2000 	ldrsb.w	r2, [r2]
 8002356:	4610      	mov	r0, r2
 8002358:	4969      	ldr	r1, [pc, #420]	; (8002500 <main+0x1290>)
 800235a:	00ea      	lsls	r2, r5, #3
 800235c:	440a      	add	r2, r1
 800235e:	4413      	add	r3, r2
 8002360:	7819      	ldrb	r1, [r3, #0]
 8002362:	4a67      	ldr	r2, [pc, #412]	; (8002500 <main+0x1290>)
 8002364:	00e3      	lsls	r3, r4, #3
 8002366:	4413      	add	r3, r2
 8002368:	4403      	add	r3, r0
 800236a:	460a      	mov	r2, r1
 800236c:	701a      	strb	r2, [r3, #0]
				  grid_buff[i][7-j] = temp;
 800236e:	4b62      	ldr	r3, [pc, #392]	; (80024f8 <main+0x1288>)
 8002370:	f993 3000 	ldrsb.w	r3, [r3]
 8002374:	461a      	mov	r2, r3
 8002376:	4b61      	ldr	r3, [pc, #388]	; (80024fc <main+0x128c>)
 8002378:	f993 3000 	ldrsb.w	r3, [r3]
 800237c:	f1c3 0307 	rsb	r3, r3, #7
 8002380:	495f      	ldr	r1, [pc, #380]	; (8002500 <main+0x1290>)
 8002382:	00d2      	lsls	r2, r2, #3
 8002384:	440a      	add	r2, r1
 8002386:	4413      	add	r3, r2
 8002388:	f897 20a1 	ldrb.w	r2, [r7, #161]	; 0xa1
 800238c:	701a      	strb	r2, [r3, #0]
			  for(j = 0; j < 4; j++){
 800238e:	4b5b      	ldr	r3, [pc, #364]	; (80024fc <main+0x128c>)
 8002390:	f993 3000 	ldrsb.w	r3, [r3]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	3301      	adds	r3, #1
 8002398:	b2db      	uxtb	r3, r3
 800239a:	b25a      	sxtb	r2, r3
 800239c:	4b57      	ldr	r3, [pc, #348]	; (80024fc <main+0x128c>)
 800239e:	701a      	strb	r2, [r3, #0]
 80023a0:	4b56      	ldr	r3, [pc, #344]	; (80024fc <main+0x128c>)
 80023a2:	f993 3000 	ldrsb.w	r3, [r3]
 80023a6:	2b03      	cmp	r3, #3
 80023a8:	ddb6      	ble.n	8002318 <main+0x10a8>
		  for(i = 0; i < 16; i++){
 80023aa:	4b53      	ldr	r3, [pc, #332]	; (80024f8 <main+0x1288>)
 80023ac:	f993 3000 	ldrsb.w	r3, [r3]
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	3301      	adds	r3, #1
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	b25a      	sxtb	r2, r3
 80023b8:	4b4f      	ldr	r3, [pc, #316]	; (80024f8 <main+0x1288>)
 80023ba:	701a      	strb	r2, [r3, #0]
 80023bc:	4b4e      	ldr	r3, [pc, #312]	; (80024f8 <main+0x1288>)
 80023be:	f993 3000 	ldrsb.w	r3, [r3]
 80023c2:	2b0f      	cmp	r3, #15
 80023c4:	dda4      	ble.n	8002310 <main+0x10a0>
			  }
		  }

		//  draw pixels on the display buffer
		  disp1color_FillScreenbuff(0);
 80023c6:	2000      	movs	r0, #0
 80023c8:	f7fe f972 	bl	80006b0 <disp1color_FillScreenbuff>
		  for(int16_t dot_x = 0; dot_x < 16; dot_x++){
 80023cc:	2300      	movs	r3, #0
 80023ce:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80023d2:	e03a      	b.n	800244a <main+0x11da>
			  for(int16_t dot_y = 0; dot_y < 8; dot_y++){
 80023d4:	2300      	movs	r3, #0
 80023d6:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 80023da:	e02b      	b.n	8002434 <main+0x11c4>
				  if (grid_buff[dot_x][dot_y])
 80023dc:	f9b7 20a4 	ldrsh.w	r2, [r7, #164]	; 0xa4
 80023e0:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 80023e4:	4946      	ldr	r1, [pc, #280]	; (8002500 <main+0x1290>)
 80023e6:	00d2      	lsls	r2, r2, #3
 80023e8:	440a      	add	r2, r1
 80023ea:	4413      	add	r3, r2
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d019      	beq.n	8002426 <main+0x11b6>
				  disp1color_DrawRectangle(2*dot_x, 2*dot_y, 2*dot_x + 1, 2*dot_y + 1);
 80023f2:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	b218      	sxth	r0, r3
 80023fc:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	b29b      	uxth	r3, r3
 8002404:	b219      	sxth	r1, r3
 8002406:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	b29b      	uxth	r3, r3
 800240e:	3301      	adds	r3, #1
 8002410:	b29b      	uxth	r3, r3
 8002412:	b21a      	sxth	r2, r3
 8002414:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	b29b      	uxth	r3, r3
 800241c:	3301      	adds	r3, #1
 800241e:	b29b      	uxth	r3, r3
 8002420:	b21b      	sxth	r3, r3
 8002422:	f7fe fa42 	bl	80008aa <disp1color_DrawRectangle>
			  for(int16_t dot_y = 0; dot_y < 8; dot_y++){
 8002426:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 800242a:	b29b      	uxth	r3, r3
 800242c:	3301      	adds	r3, #1
 800242e:	b29b      	uxth	r3, r3
 8002430:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 8002434:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 8002438:	2b07      	cmp	r3, #7
 800243a:	ddcf      	ble.n	80023dc <main+0x116c>
		  for(int16_t dot_x = 0; dot_x < 16; dot_x++){
 800243c:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 8002440:	b29b      	uxth	r3, r3
 8002442:	3301      	adds	r3, #1
 8002444:	b29b      	uxth	r3, r3
 8002446:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 800244a:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 800244e:	2b0f      	cmp	r3, #15
 8002450:	ddc0      	ble.n	80023d4 <main+0x1164>
			  }
		  }

	//	  	  disp1color_DrawRectangle(5,5,10,10);
			  disp1color_UpdateFromBuff();
 8002452:	f7fe f93f 	bl	80006d4 <disp1color_UpdateFromBuff>
			  prepare_data();
 8002456:	f7fe fb6f 	bl	8000b38 <prepare_data>

			  disp_row(0);
 800245a:	2000      	movs	r0, #0
 800245c:	f7fe fe4e 	bl	80010fc <disp_row>
			  disp_row(1);
 8002460:	2001      	movs	r0, #1
 8002462:	f7fe fe4b 	bl	80010fc <disp_row>
			  disp_row(2);
 8002466:	2002      	movs	r0, #2
 8002468:	f7fe fe48 	bl	80010fc <disp_row>
			  disp_row(3);
 800246c:	2003      	movs	r0, #3
 800246e:	f7fe fe45 	bl	80010fc <disp_row>
	  while(!game_over){
 8002472:	4b24      	ldr	r3, [pc, #144]	; (8002504 <main+0x1294>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	f43e af45 	beq.w	8001306 <main+0x96>
	  }
	  //clear grid
	  for(i = 0; i < 8; i++){
 800247c:	4b1e      	ldr	r3, [pc, #120]	; (80024f8 <main+0x1288>)
 800247e:	2200      	movs	r2, #0
 8002480:	701a      	strb	r2, [r3, #0]
 8002482:	e028      	b.n	80024d6 <main+0x1266>
		  for(j = 0; j < 16; j++){
 8002484:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <main+0x128c>)
 8002486:	2200      	movs	r2, #0
 8002488:	701a      	strb	r2, [r3, #0]
 800248a:	e016      	b.n	80024ba <main+0x124a>
			  grid[i][j] = 0;
 800248c:	4b1a      	ldr	r3, [pc, #104]	; (80024f8 <main+0x1288>)
 800248e:	f993 3000 	ldrsb.w	r3, [r3]
 8002492:	4618      	mov	r0, r3
 8002494:	4b19      	ldr	r3, [pc, #100]	; (80024fc <main+0x128c>)
 8002496:	f993 3000 	ldrsb.w	r3, [r3]
 800249a:	4619      	mov	r1, r3
 800249c:	4a1a      	ldr	r2, [pc, #104]	; (8002508 <main+0x1298>)
 800249e:	0103      	lsls	r3, r0, #4
 80024a0:	4413      	add	r3, r2
 80024a2:	440b      	add	r3, r1
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
		  for(j = 0; j < 16; j++){
 80024a8:	4b14      	ldr	r3, [pc, #80]	; (80024fc <main+0x128c>)
 80024aa:	f993 3000 	ldrsb.w	r3, [r3]
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	3301      	adds	r3, #1
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	b25a      	sxtb	r2, r3
 80024b6:	4b11      	ldr	r3, [pc, #68]	; (80024fc <main+0x128c>)
 80024b8:	701a      	strb	r2, [r3, #0]
 80024ba:	4b10      	ldr	r3, [pc, #64]	; (80024fc <main+0x128c>)
 80024bc:	f993 3000 	ldrsb.w	r3, [r3]
 80024c0:	2b0f      	cmp	r3, #15
 80024c2:	dde3      	ble.n	800248c <main+0x121c>
	  for(i = 0; i < 8; i++){
 80024c4:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <main+0x1288>)
 80024c6:	f993 3000 	ldrsb.w	r3, [r3]
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	3301      	adds	r3, #1
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	b25a      	sxtb	r2, r3
 80024d2:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <main+0x1288>)
 80024d4:	701a      	strb	r2, [r3, #0]
 80024d6:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <main+0x1288>)
 80024d8:	f993 3000 	ldrsb.w	r3, [r3]
 80024dc:	2b07      	cmp	r3, #7
 80024de:	ddd1      	ble.n	8002484 <main+0x1214>
		  }
	  }
	  HAL_Delay(3000);
 80024e0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80024e4:	f000 fbda 	bl	8002c9c <HAL_Delay>
	  new_turn = 1;
 80024e8:	4b08      	ldr	r3, [pc, #32]	; (800250c <main+0x129c>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	701a      	strb	r2, [r3, #0]
	  game_over = 0;
 80024ee:	4b05      	ldr	r3, [pc, #20]	; (8002504 <main+0x1294>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	701a      	strb	r2, [r3, #0]
	  while(!game_over){
 80024f4:	e7bd      	b.n	8002472 <main+0x1202>
 80024f6:	bf00      	nop
 80024f8:	200002fd 	.word	0x200002fd
 80024fc:	200002fe 	.word	0x200002fe
 8002500:	20000264 	.word	0x20000264
 8002504:	200002ff 	.word	0x200002ff
 8002508:	200001e4 	.word	0x200001e4
 800250c:	2000000b 	.word	0x2000000b

08002510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b094      	sub	sp, #80	; 0x50
 8002514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002516:	f107 0320 	add.w	r3, r7, #32
 800251a:	2230      	movs	r2, #48	; 0x30
 800251c:	2100      	movs	r1, #0
 800251e:	4618      	mov	r0, r3
 8002520:	f002 fffe 	bl	8005520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002524:	f107 030c 	add.w	r3, r7, #12
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	60da      	str	r2, [r3, #12]
 8002532:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002534:	2300      	movs	r3, #0
 8002536:	60bb      	str	r3, [r7, #8]
 8002538:	4b27      	ldr	r3, [pc, #156]	; (80025d8 <SystemClock_Config+0xc8>)
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	4a26      	ldr	r2, [pc, #152]	; (80025d8 <SystemClock_Config+0xc8>)
 800253e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002542:	6413      	str	r3, [r2, #64]	; 0x40
 8002544:	4b24      	ldr	r3, [pc, #144]	; (80025d8 <SystemClock_Config+0xc8>)
 8002546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002550:	2300      	movs	r3, #0
 8002552:	607b      	str	r3, [r7, #4]
 8002554:	4b21      	ldr	r3, [pc, #132]	; (80025dc <SystemClock_Config+0xcc>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a20      	ldr	r2, [pc, #128]	; (80025dc <SystemClock_Config+0xcc>)
 800255a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	4b1e      	ldr	r3, [pc, #120]	; (80025dc <SystemClock_Config+0xcc>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002568:	607b      	str	r3, [r7, #4]
 800256a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800256c:	2302      	movs	r3, #2
 800256e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002570:	2301      	movs	r3, #1
 8002572:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002574:	2310      	movs	r3, #16
 8002576:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002578:	2302      	movs	r3, #2
 800257a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800257c:	2300      	movs	r3, #0
 800257e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002580:	2308      	movs	r3, #8
 8002582:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002584:	2364      	movs	r3, #100	; 0x64
 8002586:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002588:	2302      	movs	r3, #2
 800258a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800258c:	2304      	movs	r3, #4
 800258e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002590:	f107 0320 	add.w	r3, r7, #32
 8002594:	4618      	mov	r0, r3
 8002596:	f001 fa37 	bl	8003a08 <HAL_RCC_OscConfig>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80025a0:	f000 f81e 	bl	80025e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025a4:	230f      	movs	r3, #15
 80025a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025a8:	2302      	movs	r3, #2
 80025aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80025ba:	f107 030c 	add.w	r3, r7, #12
 80025be:	2103      	movs	r1, #3
 80025c0:	4618      	mov	r0, r3
 80025c2:	f001 fc99 	bl	8003ef8 <HAL_RCC_ClockConfig>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80025cc:	f000 f808 	bl	80025e0 <Error_Handler>
  }
}
 80025d0:	bf00      	nop
 80025d2:	3750      	adds	r7, #80	; 0x50
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40023800 	.word	0x40023800
 80025dc:	40007000 	.word	0x40007000

080025e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025e4:	b672      	cpsid	i
}
 80025e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025e8:	e7fe      	b.n	80025e8 <Error_Handler+0x8>
	...

080025ec <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80025f0:	4b17      	ldr	r3, [pc, #92]	; (8002650 <MX_SPI1_Init+0x64>)
 80025f2:	4a18      	ldr	r2, [pc, #96]	; (8002654 <MX_SPI1_Init+0x68>)
 80025f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025f6:	4b16      	ldr	r3, [pc, #88]	; (8002650 <MX_SPI1_Init+0x64>)
 80025f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025fe:	4b14      	ldr	r3, [pc, #80]	; (8002650 <MX_SPI1_Init+0x64>)
 8002600:	2200      	movs	r2, #0
 8002602:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002604:	4b12      	ldr	r3, [pc, #72]	; (8002650 <MX_SPI1_Init+0x64>)
 8002606:	2200      	movs	r2, #0
 8002608:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800260a:	4b11      	ldr	r3, [pc, #68]	; (8002650 <MX_SPI1_Init+0x64>)
 800260c:	2200      	movs	r2, #0
 800260e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002610:	4b0f      	ldr	r3, [pc, #60]	; (8002650 <MX_SPI1_Init+0x64>)
 8002612:	2200      	movs	r2, #0
 8002614:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002616:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <MX_SPI1_Init+0x64>)
 8002618:	f44f 7200 	mov.w	r2, #512	; 0x200
 800261c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800261e:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <MX_SPI1_Init+0x64>)
 8002620:	2208      	movs	r2, #8
 8002622:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002624:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <MX_SPI1_Init+0x64>)
 8002626:	2200      	movs	r2, #0
 8002628:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800262a:	4b09      	ldr	r3, [pc, #36]	; (8002650 <MX_SPI1_Init+0x64>)
 800262c:	2200      	movs	r2, #0
 800262e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002630:	4b07      	ldr	r3, [pc, #28]	; (8002650 <MX_SPI1_Init+0x64>)
 8002632:	2200      	movs	r2, #0
 8002634:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002636:	4b06      	ldr	r3, [pc, #24]	; (8002650 <MX_SPI1_Init+0x64>)
 8002638:	220a      	movs	r2, #10
 800263a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800263c:	4804      	ldr	r0, [pc, #16]	; (8002650 <MX_SPI1_Init+0x64>)
 800263e:	f001 fe07 	bl	8004250 <HAL_SPI_Init>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002648:	f7ff ffca 	bl	80025e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800264c:	bf00      	nop
 800264e:	bd80      	pop	{r7, pc}
 8002650:	20000304 	.word	0x20000304
 8002654:	40013000 	.word	0x40013000

08002658 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08a      	sub	sp, #40	; 0x28
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002660:	f107 0314 	add.w	r3, r7, #20
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]
 800266e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a19      	ldr	r2, [pc, #100]	; (80026dc <HAL_SPI_MspInit+0x84>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d12b      	bne.n	80026d2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	613b      	str	r3, [r7, #16]
 800267e:	4b18      	ldr	r3, [pc, #96]	; (80026e0 <HAL_SPI_MspInit+0x88>)
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	4a17      	ldr	r2, [pc, #92]	; (80026e0 <HAL_SPI_MspInit+0x88>)
 8002684:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002688:	6453      	str	r3, [r2, #68]	; 0x44
 800268a:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <HAL_SPI_MspInit+0x88>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002692:	613b      	str	r3, [r7, #16]
 8002694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <HAL_SPI_MspInit+0x88>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	4a10      	ldr	r2, [pc, #64]	; (80026e0 <HAL_SPI_MspInit+0x88>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	6313      	str	r3, [r2, #48]	; 0x30
 80026a6:	4b0e      	ldr	r3, [pc, #56]	; (80026e0 <HAL_SPI_MspInit+0x88>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80026b2:	23a0      	movs	r3, #160	; 0xa0
 80026b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b6:	2302      	movs	r3, #2
 80026b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026be:	2303      	movs	r3, #3
 80026c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026c2:	2305      	movs	r3, #5
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c6:	f107 0314 	add.w	r3, r7, #20
 80026ca:	4619      	mov	r1, r3
 80026cc:	4805      	ldr	r0, [pc, #20]	; (80026e4 <HAL_SPI_MspInit+0x8c>)
 80026ce:	f000 ffd9 	bl	8003684 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80026d2:	bf00      	nop
 80026d4:	3728      	adds	r7, #40	; 0x28
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40013000 	.word	0x40013000
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40020000 	.word	0x40020000

080026e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	607b      	str	r3, [r7, #4]
 80026f2:	4b10      	ldr	r3, [pc, #64]	; (8002734 <HAL_MspInit+0x4c>)
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	4a0f      	ldr	r2, [pc, #60]	; (8002734 <HAL_MspInit+0x4c>)
 80026f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026fc:	6453      	str	r3, [r2, #68]	; 0x44
 80026fe:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <HAL_MspInit+0x4c>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002706:	607b      	str	r3, [r7, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	603b      	str	r3, [r7, #0]
 800270e:	4b09      	ldr	r3, [pc, #36]	; (8002734 <HAL_MspInit+0x4c>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	4a08      	ldr	r2, [pc, #32]	; (8002734 <HAL_MspInit+0x4c>)
 8002714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002718:	6413      	str	r3, [r2, #64]	; 0x40
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <HAL_MspInit+0x4c>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40023800 	.word	0x40023800

08002738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800273c:	e7fe      	b.n	800273c <NMI_Handler+0x4>

0800273e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800273e:	b480      	push	{r7}
 8002740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002742:	e7fe      	b.n	8002742 <HardFault_Handler+0x4>

08002744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002748:	e7fe      	b.n	8002748 <MemManage_Handler+0x4>

0800274a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800274a:	b480      	push	{r7}
 800274c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800274e:	e7fe      	b.n	800274e <BusFault_Handler+0x4>

08002750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002754:	e7fe      	b.n	8002754 <UsageFault_Handler+0x4>

08002756 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002756:	b480      	push	{r7}
 8002758:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002772:	b480      	push	{r7}
 8002774:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002784:	f000 fa6a 	bl	8002c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002788:	bf00      	nop
 800278a:	bd80      	pop	{r7, pc}

0800278c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	moved_left = 1;
 8002790:	4b07      	ldr	r3, [pc, #28]	; (80027b0 <EXTI0_IRQHandler+0x24>)
 8002792:	2201      	movs	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
	gridX--;
 8002796:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <EXTI0_IRQHandler+0x28>)
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	b29b      	uxth	r3, r3
 800279c:	3b01      	subs	r3, #1
 800279e:	b29a      	uxth	r2, r3
 80027a0:	4b04      	ldr	r3, [pc, #16]	; (80027b4 <EXTI0_IRQHandler+0x28>)
 80027a2:	801a      	strh	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LEFT_Pin);
 80027a4:	2001      	movs	r0, #1
 80027a6:	f001 f90b 	bl	80039c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	200002f9 	.word	0x200002f9
 80027b4:	200001e0 	.word	0x200001e0

080027b8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	moved_right = 1;
 80027bc:	4b07      	ldr	r3, [pc, #28]	; (80027dc <EXTI1_IRQHandler+0x24>)
 80027be:	2201      	movs	r2, #1
 80027c0:	701a      	strb	r2, [r3, #0]
	gridX++;
 80027c2:	4b07      	ldr	r3, [pc, #28]	; (80027e0 <EXTI1_IRQHandler+0x28>)
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	3301      	adds	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <EXTI1_IRQHandler+0x28>)
 80027ce:	801a      	strh	r2, [r3, #0]
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RIGHT_Pin);
 80027d0:	2002      	movs	r0, #2
 80027d2:	f001 f8f5 	bl	80039c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	200002fa 	.word	0x200002fa
 80027e0:	200001e0 	.word	0x200001e0

080027e4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	rotated = 1;
 80027ea:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <EXTI2_IRQHandler+0x30>)
 80027ec:	2201      	movs	r2, #1
 80027ee:	701a      	strb	r2, [r3, #0]
	for(int debounce = 0; debounce < 2000; debounce++){
 80027f0:	2300      	movs	r3, #0
 80027f2:	607b      	str	r3, [r7, #4]
 80027f4:	e002      	b.n	80027fc <EXTI2_IRQHandler+0x18>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3301      	adds	r3, #1
 80027fa:	607b      	str	r3, [r7, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002802:	dbf8      	blt.n	80027f6 <EXTI2_IRQHandler+0x12>
	}
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ROTATE_Pin);
 8002804:	2004      	movs	r0, #4
 8002806:	f001 f8db 	bl	80039c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	200002fb 	.word	0x200002fb

08002818 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	hard_drop = 1;
 800281e:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <EXTI3_IRQHandler+0x30>)
 8002820:	2201      	movs	r2, #1
 8002822:	701a      	strb	r2, [r3, #0]
	for(int debounce = 0; debounce < 2000; debounce++){
 8002824:	2300      	movs	r3, #0
 8002826:	607b      	str	r3, [r7, #4]
 8002828:	e002      	b.n	8002830 <EXTI3_IRQHandler+0x18>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3301      	adds	r3, #1
 800282e:	607b      	str	r3, [r7, #4]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002836:	dbf8      	blt.n	800282a <EXTI3_IRQHandler+0x12>
	}
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DROP_Pin);
 8002838:	2008      	movs	r0, #8
 800283a:	f001 f8c1 	bl	80039c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800283e:	bf00      	nop
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	200002fc 	.word	0x200002fc

0800284c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	moved_down = 1;
 8002850:	4b07      	ldr	r3, [pc, #28]	; (8002870 <TIM3_IRQHandler+0x24>)
 8002852:	2201      	movs	r2, #1
 8002854:	701a      	strb	r2, [r3, #0]
	gridY++;
 8002856:	4b07      	ldr	r3, [pc, #28]	; (8002874 <TIM3_IRQHandler+0x28>)
 8002858:	881b      	ldrh	r3, [r3, #0]
 800285a:	b29b      	uxth	r3, r3
 800285c:	3301      	adds	r3, #1
 800285e:	b29a      	uxth	r2, r3
 8002860:	4b04      	ldr	r3, [pc, #16]	; (8002874 <TIM3_IRQHandler+0x28>)
 8002862:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002864:	4804      	ldr	r0, [pc, #16]	; (8002878 <TIM3_IRQHandler+0x2c>)
 8002866:	f002 f89c 	bl	80049a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	200002f8 	.word	0x200002f8
 8002874:	200001e2 	.word	0x200001e2
 8002878:	20000360 	.word	0x20000360

0800287c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
	return 1;
 8002880:	2301      	movs	r3, #1
}
 8002882:	4618      	mov	r0, r3
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <_kill>:

int _kill(int pid, int sig)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002896:	f002 fe0b 	bl	80054b0 <__errno>
 800289a:	4603      	mov	r3, r0
 800289c:	2216      	movs	r2, #22
 800289e:	601a      	str	r2, [r3, #0]
	return -1;
 80028a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <_exit>:

void _exit (int status)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028b4:	f04f 31ff 	mov.w	r1, #4294967295
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff ffe7 	bl	800288c <_kill>
	while (1) {}		/* Make sure we hang here */
 80028be:	e7fe      	b.n	80028be <_exit+0x12>

080028c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	e00a      	b.n	80028e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80028d2:	f3af 8000 	nop.w
 80028d6:	4601      	mov	r1, r0
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	60ba      	str	r2, [r7, #8]
 80028de:	b2ca      	uxtb	r2, r1
 80028e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	3301      	adds	r3, #1
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	dbf0      	blt.n	80028d2 <_read+0x12>
	}

return len;
 80028f0:	687b      	ldr	r3, [r7, #4]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b086      	sub	sp, #24
 80028fe:	af00      	add	r7, sp, #0
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	e009      	b.n	8002920 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	60ba      	str	r2, [r7, #8]
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	3301      	adds	r3, #1
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	429a      	cmp	r2, r3
 8002926:	dbf1      	blt.n	800290c <_write+0x12>
	}
	return len;
 8002928:	687b      	ldr	r3, [r7, #4]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <_close>:

int _close(int file)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
	return -1;
 800293a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800293e:	4618      	mov	r0, r3
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800295a:	605a      	str	r2, [r3, #4]
	return 0;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <_isatty>:

int _isatty(int file)
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
	return 1;
 8002972:	2301      	movs	r3, #1
}
 8002974:	4618      	mov	r0, r3
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
	return 0;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
	...

0800299c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029a4:	4a14      	ldr	r2, [pc, #80]	; (80029f8 <_sbrk+0x5c>)
 80029a6:	4b15      	ldr	r3, [pc, #84]	; (80029fc <_sbrk+0x60>)
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029b0:	4b13      	ldr	r3, [pc, #76]	; (8002a00 <_sbrk+0x64>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d102      	bne.n	80029be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029b8:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <_sbrk+0x64>)
 80029ba:	4a12      	ldr	r2, [pc, #72]	; (8002a04 <_sbrk+0x68>)
 80029bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029be:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <_sbrk+0x64>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4413      	add	r3, r2
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d207      	bcs.n	80029dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029cc:	f002 fd70 	bl	80054b0 <__errno>
 80029d0:	4603      	mov	r3, r0
 80029d2:	220c      	movs	r2, #12
 80029d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029d6:	f04f 33ff 	mov.w	r3, #4294967295
 80029da:	e009      	b.n	80029f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029dc:	4b08      	ldr	r3, [pc, #32]	; (8002a00 <_sbrk+0x64>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029e2:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <_sbrk+0x64>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4413      	add	r3, r2
 80029ea:	4a05      	ldr	r2, [pc, #20]	; (8002a00 <_sbrk+0x64>)
 80029ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029ee:	68fb      	ldr	r3, [r7, #12]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	20020000 	.word	0x20020000
 80029fc:	00000400 	.word	0x00000400
 8002a00:	2000035c 	.word	0x2000035c
 8002a04:	200003c0 	.word	0x200003c0

08002a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a0c:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <SystemInit+0x20>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a12:	4a05      	ldr	r2, [pc, #20]	; (8002a28 <SystemInit+0x20>)
 8002a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a1c:	bf00      	nop
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	e000ed00 	.word	0xe000ed00

08002a2c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b08e      	sub	sp, #56	; 0x38
 8002a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	605a      	str	r2, [r3, #4]
 8002a3c:	609a      	str	r2, [r3, #8]
 8002a3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a40:	f107 0320 	add.w	r3, r7, #32
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a4a:	1d3b      	adds	r3, r7, #4
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	60da      	str	r2, [r3, #12]
 8002a56:	611a      	str	r2, [r3, #16]
 8002a58:	615a      	str	r2, [r3, #20]
 8002a5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a5c:	4b2b      	ldr	r3, [pc, #172]	; (8002b0c <MX_TIM3_Init+0xe0>)
 8002a5e:	4a2c      	ldr	r2, [pc, #176]	; (8002b10 <MX_TIM3_Init+0xe4>)
 8002a60:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 8002a62:	4b2a      	ldr	r3, [pc, #168]	; (8002b0c <MX_TIM3_Init+0xe0>)
 8002a64:	f242 720f 	movw	r2, #9999	; 0x270f
 8002a68:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a6a:	4b28      	ldr	r3, [pc, #160]	; (8002b0c <MX_TIM3_Init+0xe0>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000/3-1;
 8002a70:	4b26      	ldr	r3, [pc, #152]	; (8002b0c <MX_TIM3_Init+0xe0>)
 8002a72:	f640 5204 	movw	r2, #3332	; 0xd04
 8002a76:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a78:	4b24      	ldr	r3, [pc, #144]	; (8002b0c <MX_TIM3_Init+0xe0>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a7e:	4b23      	ldr	r3, [pc, #140]	; (8002b0c <MX_TIM3_Init+0xe0>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a84:	4821      	ldr	r0, [pc, #132]	; (8002b0c <MX_TIM3_Init+0xe0>)
 8002a86:	f001 fe81 	bl	800478c <HAL_TIM_Base_Init>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002a90:	f7ff fda6 	bl	80025e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a98:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	481a      	ldr	r0, [pc, #104]	; (8002b0c <MX_TIM3_Init+0xe0>)
 8002aa2:	f002 f8e3 	bl	8004c6c <HAL_TIM_ConfigClockSource>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002aac:	f7ff fd98 	bl	80025e0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8002ab0:	4816      	ldr	r0, [pc, #88]	; (8002b0c <MX_TIM3_Init+0xe0>)
 8002ab2:	f001 ff1d 	bl	80048f0 <HAL_TIM_OC_Init>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002abc:	f7ff fd90 	bl	80025e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ac8:	f107 0320 	add.w	r3, r7, #32
 8002acc:	4619      	mov	r1, r3
 8002ace:	480f      	ldr	r0, [pc, #60]	; (8002b0c <MX_TIM3_Init+0xe0>)
 8002ad0:	f002 fc6c 	bl	80053ac <HAL_TIMEx_MasterConfigSynchronization>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002ada:	f7ff fd81 	bl	80025e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002aea:	2300      	movs	r3, #0
 8002aec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002aee:	1d3b      	adds	r3, r7, #4
 8002af0:	2200      	movs	r2, #0
 8002af2:	4619      	mov	r1, r3
 8002af4:	4805      	ldr	r0, [pc, #20]	; (8002b0c <MX_TIM3_Init+0xe0>)
 8002af6:	f002 f85d 	bl	8004bb4 <HAL_TIM_OC_ConfigChannel>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002b00:	f7ff fd6e 	bl	80025e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b04:	bf00      	nop
 8002b06:	3738      	adds	r7, #56	; 0x38
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	20000360 	.word	0x20000360
 8002b10:	40000400 	.word	0x40000400

08002b14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a0e      	ldr	r2, [pc, #56]	; (8002b5c <HAL_TIM_Base_MspInit+0x48>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d115      	bne.n	8002b52 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	4b0d      	ldr	r3, [pc, #52]	; (8002b60 <HAL_TIM_Base_MspInit+0x4c>)
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	4a0c      	ldr	r2, [pc, #48]	; (8002b60 <HAL_TIM_Base_MspInit+0x4c>)
 8002b30:	f043 0302 	orr.w	r3, r3, #2
 8002b34:	6413      	str	r3, [r2, #64]	; 0x40
 8002b36:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <HAL_TIM_Base_MspInit+0x4c>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002b42:	2200      	movs	r2, #0
 8002b44:	2100      	movs	r1, #0
 8002b46:	201d      	movs	r0, #29
 8002b48:	f000 fd65 	bl	8003616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b4c:	201d      	movs	r0, #29
 8002b4e:	f000 fd7e 	bl	800364e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002b52:	bf00      	nop
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40000400 	.word	0x40000400
 8002b60:	40023800 	.word	0x40023800

08002b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b68:	480d      	ldr	r0, [pc, #52]	; (8002ba0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b6a:	490e      	ldr	r1, [pc, #56]	; (8002ba4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b6c:	4a0e      	ldr	r2, [pc, #56]	; (8002ba8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b70:	e002      	b.n	8002b78 <LoopCopyDataInit>

08002b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b76:	3304      	adds	r3, #4

08002b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b7c:	d3f9      	bcc.n	8002b72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b7e:	4a0b      	ldr	r2, [pc, #44]	; (8002bac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b80:	4c0b      	ldr	r4, [pc, #44]	; (8002bb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b84:	e001      	b.n	8002b8a <LoopFillZerobss>

08002b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b88:	3204      	adds	r2, #4

08002b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b8c:	d3fb      	bcc.n	8002b86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b8e:	f7ff ff3b 	bl	8002a08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b92:	f002 fc93 	bl	80054bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b96:	f7fe fb6b 	bl	8001270 <main>
  bx  lr    
 8002b9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ba4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002ba8:	08006720 	.word	0x08006720
  ldr r2, =_sbss
 8002bac:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002bb0:	200003bc 	.word	0x200003bc

08002bb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bb4:	e7fe      	b.n	8002bb4 <ADC_IRQHandler>
	...

08002bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bbc:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <HAL_Init+0x40>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a0d      	ldr	r2, [pc, #52]	; (8002bf8 <HAL_Init+0x40>)
 8002bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <HAL_Init+0x40>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a0a      	ldr	r2, [pc, #40]	; (8002bf8 <HAL_Init+0x40>)
 8002bce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bd4:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <HAL_Init+0x40>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a07      	ldr	r2, [pc, #28]	; (8002bf8 <HAL_Init+0x40>)
 8002bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002be0:	2003      	movs	r0, #3
 8002be2:	f000 fd0d 	bl	8003600 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002be6:	2000      	movs	r0, #0
 8002be8:	f000 f808 	bl	8002bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bec:	f7ff fd7c 	bl	80026e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40023c00 	.word	0x40023c00

08002bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c04:	4b12      	ldr	r3, [pc, #72]	; (8002c50 <HAL_InitTick+0x54>)
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	4b12      	ldr	r3, [pc, #72]	; (8002c54 <HAL_InitTick+0x58>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 fd25 	bl	800366a <HAL_SYSTICK_Config>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e00e      	b.n	8002c48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b0f      	cmp	r3, #15
 8002c2e:	d80a      	bhi.n	8002c46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c30:	2200      	movs	r2, #0
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	f04f 30ff 	mov.w	r0, #4294967295
 8002c38:	f000 fced 	bl	8003616 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c3c:	4a06      	ldr	r2, [pc, #24]	; (8002c58 <HAL_InitTick+0x5c>)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
 8002c44:	e000      	b.n	8002c48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	2000000c 	.word	0x2000000c
 8002c54:	20000014 	.word	0x20000014
 8002c58:	20000010 	.word	0x20000010

08002c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c60:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <HAL_IncTick+0x20>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	461a      	mov	r2, r3
 8002c66:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <HAL_IncTick+0x24>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	4a04      	ldr	r2, [pc, #16]	; (8002c80 <HAL_IncTick+0x24>)
 8002c6e:	6013      	str	r3, [r2, #0]
}
 8002c70:	bf00      	nop
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	20000014 	.word	0x20000014
 8002c80:	200003a8 	.word	0x200003a8

08002c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  return uwTick;
 8002c88:	4b03      	ldr	r3, [pc, #12]	; (8002c98 <HAL_GetTick+0x14>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	200003a8 	.word	0x200003a8

08002c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ca4:	f7ff ffee 	bl	8002c84 <HAL_GetTick>
 8002ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb4:	d005      	beq.n	8002cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cb6:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <HAL_Delay+0x44>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cc2:	bf00      	nop
 8002cc4:	f7ff ffde 	bl	8002c84 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d8f7      	bhi.n	8002cc4 <HAL_Delay+0x28>
  {
  }
}
 8002cd4:	bf00      	nop
 8002cd6:	bf00      	nop
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	20000014 	.word	0x20000014

08002ce4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cec:	2300      	movs	r3, #0
 8002cee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e033      	b.n	8002d62 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d109      	bne.n	8002d16 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7fd fc90 	bl	8000628 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	f003 0310 	and.w	r3, r3, #16
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d118      	bne.n	8002d54 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d2a:	f023 0302 	bic.w	r3, r3, #2
 8002d2e:	f043 0202 	orr.w	r2, r3, #2
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 fa96 	bl	8003268 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f023 0303 	bic.w	r3, r3, #3
 8002d4a:	f043 0201 	orr.w	r2, r3, #1
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	641a      	str	r2, [r3, #64]	; 0x40
 8002d52:	e001      	b.n	8002d58 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <HAL_ADC_Start+0x1a>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e097      	b.n	8002eb6 <HAL_ADC_Start+0x14a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d018      	beq.n	8002dce <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689a      	ldr	r2, [r3, #8]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f042 0201 	orr.w	r2, r2, #1
 8002daa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002dac:	4b45      	ldr	r3, [pc, #276]	; (8002ec4 <HAL_ADC_Start+0x158>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a45      	ldr	r2, [pc, #276]	; (8002ec8 <HAL_ADC_Start+0x15c>)
 8002db2:	fba2 2303 	umull	r2, r3, r2, r3
 8002db6:	0c9a      	lsrs	r2, r3, #18
 8002db8:	4613      	mov	r3, r2
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	4413      	add	r3, r2
 8002dbe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002dc0:	e002      	b.n	8002dc8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1f9      	bne.n	8002dc2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d15f      	bne.n	8002e9c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002de4:	f023 0301 	bic.w	r3, r3, #1
 8002de8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d007      	beq.n	8002e0e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e06:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e1a:	d106      	bne.n	8002e2a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e20:	f023 0206 	bic.w	r2, r3, #6
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	645a      	str	r2, [r3, #68]	; 0x44
 8002e28:	e002      	b.n	8002e30 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e38:	4b24      	ldr	r3, [pc, #144]	; (8002ecc <HAL_ADC_Start+0x160>)
 8002e3a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002e44:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f003 031f 	and.w	r3, r3, #31
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10f      	bne.n	8002e72 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d129      	bne.n	8002eb4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002e6e:	609a      	str	r2, [r3, #8]
 8002e70:	e020      	b.n	8002eb4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a16      	ldr	r2, [pc, #88]	; (8002ed0 <HAL_ADC_Start+0x164>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d11b      	bne.n	8002eb4 <HAL_ADC_Start+0x148>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d114      	bne.n	8002eb4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002e98:	609a      	str	r2, [r3, #8]
 8002e9a:	e00b      	b.n	8002eb4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea0:	f043 0210 	orr.w	r2, r3, #16
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eac:	f043 0201 	orr.w	r2, r3, #1
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	2000000c 	.word	0x2000000c
 8002ec8:	431bde83 	.word	0x431bde83
 8002ecc:	40012300 	.word	0x40012300
 8002ed0:	40012000 	.word	0x40012000

08002ed4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef0:	d113      	bne.n	8002f1a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002efc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f00:	d10b      	bne.n	8002f1a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f043 0220 	orr.w	r2, r3, #32
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e063      	b.n	8002fe2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002f1a:	f7ff feb3 	bl	8002c84 <HAL_GetTick>
 8002f1e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002f20:	e021      	b.n	8002f66 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f28:	d01d      	beq.n	8002f66 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d007      	beq.n	8002f40 <HAL_ADC_PollForConversion+0x6c>
 8002f30:	f7ff fea8 	bl	8002c84 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d212      	bcs.n	8002f66 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d00b      	beq.n	8002f66 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	f043 0204 	orr.w	r2, r3, #4
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e03d      	b.n	8002fe2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d1d6      	bne.n	8002f22 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f06f 0212 	mvn.w	r2, #18
 8002f7c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d123      	bne.n	8002fe0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d11f      	bne.n	8002fe0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d006      	beq.n	8002fbc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d111      	bne.n	8002fe0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d105      	bne.n	8002fe0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	f043 0201 	orr.w	r2, r3, #1
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002fea:	b480      	push	{r7}
 8002fec:	b083      	sub	sp, #12
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800300e:	2300      	movs	r3, #0
 8003010:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003018:	2b01      	cmp	r3, #1
 800301a:	d101      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x1c>
 800301c:	2302      	movs	r3, #2
 800301e:	e113      	b.n	8003248 <HAL_ADC_ConfigChannel+0x244>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b09      	cmp	r3, #9
 800302e:	d925      	bls.n	800307c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68d9      	ldr	r1, [r3, #12]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	b29b      	uxth	r3, r3
 800303c:	461a      	mov	r2, r3
 800303e:	4613      	mov	r3, r2
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	4413      	add	r3, r2
 8003044:	3b1e      	subs	r3, #30
 8003046:	2207      	movs	r2, #7
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	43da      	mvns	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	400a      	ands	r2, r1
 8003054:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68d9      	ldr	r1, [r3, #12]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	b29b      	uxth	r3, r3
 8003066:	4618      	mov	r0, r3
 8003068:	4603      	mov	r3, r0
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	4403      	add	r3, r0
 800306e:	3b1e      	subs	r3, #30
 8003070:	409a      	lsls	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	60da      	str	r2, [r3, #12]
 800307a:	e022      	b.n	80030c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6919      	ldr	r1, [r3, #16]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	b29b      	uxth	r3, r3
 8003088:	461a      	mov	r2, r3
 800308a:	4613      	mov	r3, r2
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	4413      	add	r3, r2
 8003090:	2207      	movs	r2, #7
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	43da      	mvns	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	400a      	ands	r2, r1
 800309e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6919      	ldr	r1, [r3, #16]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	4618      	mov	r0, r3
 80030b2:	4603      	mov	r3, r0
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	4403      	add	r3, r0
 80030b8:	409a      	lsls	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b06      	cmp	r3, #6
 80030c8:	d824      	bhi.n	8003114 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	3b05      	subs	r3, #5
 80030dc:	221f      	movs	r2, #31
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	43da      	mvns	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	400a      	ands	r2, r1
 80030ea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	4618      	mov	r0, r3
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	4613      	mov	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	3b05      	subs	r3, #5
 8003106:	fa00 f203 	lsl.w	r2, r0, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	635a      	str	r2, [r3, #52]	; 0x34
 8003112:	e04c      	b.n	80031ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b0c      	cmp	r3, #12
 800311a:	d824      	bhi.n	8003166 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4413      	add	r3, r2
 800312c:	3b23      	subs	r3, #35	; 0x23
 800312e:	221f      	movs	r2, #31
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	43da      	mvns	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	400a      	ands	r2, r1
 800313c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	b29b      	uxth	r3, r3
 800314a:	4618      	mov	r0, r3
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	3b23      	subs	r3, #35	; 0x23
 8003158:	fa00 f203 	lsl.w	r2, r0, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	430a      	orrs	r2, r1
 8003162:	631a      	str	r2, [r3, #48]	; 0x30
 8003164:	e023      	b.n	80031ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	3b41      	subs	r3, #65	; 0x41
 8003178:	221f      	movs	r2, #31
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	43da      	mvns	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	400a      	ands	r2, r1
 8003186:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	b29b      	uxth	r3, r3
 8003194:	4618      	mov	r0, r3
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	3b41      	subs	r3, #65	; 0x41
 80031a2:	fa00 f203 	lsl.w	r2, r0, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031ae:	4b29      	ldr	r3, [pc, #164]	; (8003254 <HAL_ADC_ConfigChannel+0x250>)
 80031b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a28      	ldr	r2, [pc, #160]	; (8003258 <HAL_ADC_ConfigChannel+0x254>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d10f      	bne.n	80031dc <HAL_ADC_ConfigChannel+0x1d8>
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b12      	cmp	r3, #18
 80031c2:	d10b      	bne.n	80031dc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a1d      	ldr	r2, [pc, #116]	; (8003258 <HAL_ADC_ConfigChannel+0x254>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d12b      	bne.n	800323e <HAL_ADC_ConfigChannel+0x23a>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a1c      	ldr	r2, [pc, #112]	; (800325c <HAL_ADC_ConfigChannel+0x258>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d003      	beq.n	80031f8 <HAL_ADC_ConfigChannel+0x1f4>
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b11      	cmp	r3, #17
 80031f6:	d122      	bne.n	800323e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a11      	ldr	r2, [pc, #68]	; (800325c <HAL_ADC_ConfigChannel+0x258>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d111      	bne.n	800323e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800321a:	4b11      	ldr	r3, [pc, #68]	; (8003260 <HAL_ADC_ConfigChannel+0x25c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a11      	ldr	r2, [pc, #68]	; (8003264 <HAL_ADC_ConfigChannel+0x260>)
 8003220:	fba2 2303 	umull	r2, r3, r2, r3
 8003224:	0c9a      	lsrs	r2, r3, #18
 8003226:	4613      	mov	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003230:	e002      	b.n	8003238 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	3b01      	subs	r3, #1
 8003236:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f9      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	40012300 	.word	0x40012300
 8003258:	40012000 	.word	0x40012000
 800325c:	10000012 	.word	0x10000012
 8003260:	2000000c 	.word	0x2000000c
 8003264:	431bde83 	.word	0x431bde83

08003268 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003270:	4b79      	ldr	r3, [pc, #484]	; (8003458 <ADC_Init+0x1f0>)
 8003272:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	431a      	orrs	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800329c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6859      	ldr	r1, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	021a      	lsls	r2, r3, #8
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80032c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6859      	ldr	r1, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6899      	ldr	r1, [r3, #8]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fa:	4a58      	ldr	r2, [pc, #352]	; (800345c <ADC_Init+0x1f4>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d022      	beq.n	8003346 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800330e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6899      	ldr	r1, [r3, #8]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003330:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6899      	ldr	r1, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	609a      	str	r2, [r3, #8]
 8003344:	e00f      	b.n	8003366 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003354:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003364:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0202 	bic.w	r2, r2, #2
 8003374:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6899      	ldr	r1, [r3, #8]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	7e1b      	ldrb	r3, [r3, #24]
 8003380:	005a      	lsls	r2, r3, #1
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d01b      	beq.n	80033cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80033b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6859      	ldr	r1, [r3, #4]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	3b01      	subs	r3, #1
 80033c0:	035a      	lsls	r2, r3, #13
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	605a      	str	r2, [r3, #4]
 80033ca:	e007      	b.n	80033dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80033ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	3b01      	subs	r3, #1
 80033f8:	051a      	lsls	r2, r3, #20
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003410:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6899      	ldr	r1, [r3, #8]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800341e:	025a      	lsls	r2, r3, #9
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003436:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6899      	ldr	r1, [r3, #8]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	029a      	lsls	r2, r3, #10
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	609a      	str	r2, [r3, #8]
}
 800344c:	bf00      	nop
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	40012300 	.word	0x40012300
 800345c:	0f000001 	.word	0x0f000001

08003460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003470:	4b0c      	ldr	r3, [pc, #48]	; (80034a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800347c:	4013      	ands	r3, r2
 800347e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003488:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800348c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003492:	4a04      	ldr	r2, [pc, #16]	; (80034a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	60d3      	str	r3, [r2, #12]
}
 8003498:	bf00      	nop
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	e000ed00 	.word	0xe000ed00

080034a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034ac:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <__NVIC_GetPriorityGrouping+0x18>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	0a1b      	lsrs	r3, r3, #8
 80034b2:	f003 0307 	and.w	r3, r3, #7
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	e000ed00 	.word	0xe000ed00

080034c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4603      	mov	r3, r0
 80034cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	db0b      	blt.n	80034ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034d6:	79fb      	ldrb	r3, [r7, #7]
 80034d8:	f003 021f 	and.w	r2, r3, #31
 80034dc:	4907      	ldr	r1, [pc, #28]	; (80034fc <__NVIC_EnableIRQ+0x38>)
 80034de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e2:	095b      	lsrs	r3, r3, #5
 80034e4:	2001      	movs	r0, #1
 80034e6:	fa00 f202 	lsl.w	r2, r0, r2
 80034ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	e000e100 	.word	0xe000e100

08003500 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	4603      	mov	r3, r0
 8003508:	6039      	str	r1, [r7, #0]
 800350a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800350c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003510:	2b00      	cmp	r3, #0
 8003512:	db0a      	blt.n	800352a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	b2da      	uxtb	r2, r3
 8003518:	490c      	ldr	r1, [pc, #48]	; (800354c <__NVIC_SetPriority+0x4c>)
 800351a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351e:	0112      	lsls	r2, r2, #4
 8003520:	b2d2      	uxtb	r2, r2
 8003522:	440b      	add	r3, r1
 8003524:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003528:	e00a      	b.n	8003540 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	b2da      	uxtb	r2, r3
 800352e:	4908      	ldr	r1, [pc, #32]	; (8003550 <__NVIC_SetPriority+0x50>)
 8003530:	79fb      	ldrb	r3, [r7, #7]
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	3b04      	subs	r3, #4
 8003538:	0112      	lsls	r2, r2, #4
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	440b      	add	r3, r1
 800353e:	761a      	strb	r2, [r3, #24]
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	e000e100 	.word	0xe000e100
 8003550:	e000ed00 	.word	0xe000ed00

08003554 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003554:	b480      	push	{r7}
 8003556:	b089      	sub	sp, #36	; 0x24
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	f1c3 0307 	rsb	r3, r3, #7
 800356e:	2b04      	cmp	r3, #4
 8003570:	bf28      	it	cs
 8003572:	2304      	movcs	r3, #4
 8003574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	3304      	adds	r3, #4
 800357a:	2b06      	cmp	r3, #6
 800357c:	d902      	bls.n	8003584 <NVIC_EncodePriority+0x30>
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	3b03      	subs	r3, #3
 8003582:	e000      	b.n	8003586 <NVIC_EncodePriority+0x32>
 8003584:	2300      	movs	r3, #0
 8003586:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003588:	f04f 32ff 	mov.w	r2, #4294967295
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	43da      	mvns	r2, r3
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	401a      	ands	r2, r3
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800359c:	f04f 31ff 	mov.w	r1, #4294967295
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	fa01 f303 	lsl.w	r3, r1, r3
 80035a6:	43d9      	mvns	r1, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035ac:	4313      	orrs	r3, r2
         );
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3724      	adds	r7, #36	; 0x24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
	...

080035bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035cc:	d301      	bcc.n	80035d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035ce:	2301      	movs	r3, #1
 80035d0:	e00f      	b.n	80035f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035d2:	4a0a      	ldr	r2, [pc, #40]	; (80035fc <SysTick_Config+0x40>)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035da:	210f      	movs	r1, #15
 80035dc:	f04f 30ff 	mov.w	r0, #4294967295
 80035e0:	f7ff ff8e 	bl	8003500 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035e4:	4b05      	ldr	r3, [pc, #20]	; (80035fc <SysTick_Config+0x40>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035ea:	4b04      	ldr	r3, [pc, #16]	; (80035fc <SysTick_Config+0x40>)
 80035ec:	2207      	movs	r2, #7
 80035ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	e000e010 	.word	0xe000e010

08003600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f7ff ff29 	bl	8003460 <__NVIC_SetPriorityGrouping>
}
 800360e:	bf00      	nop
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003616:	b580      	push	{r7, lr}
 8003618:	b086      	sub	sp, #24
 800361a:	af00      	add	r7, sp, #0
 800361c:	4603      	mov	r3, r0
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	607a      	str	r2, [r7, #4]
 8003622:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003624:	2300      	movs	r3, #0
 8003626:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003628:	f7ff ff3e 	bl	80034a8 <__NVIC_GetPriorityGrouping>
 800362c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	68b9      	ldr	r1, [r7, #8]
 8003632:	6978      	ldr	r0, [r7, #20]
 8003634:	f7ff ff8e 	bl	8003554 <NVIC_EncodePriority>
 8003638:	4602      	mov	r2, r0
 800363a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800363e:	4611      	mov	r1, r2
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff ff5d 	bl	8003500 <__NVIC_SetPriority>
}
 8003646:	bf00      	nop
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b082      	sub	sp, #8
 8003652:	af00      	add	r7, sp, #0
 8003654:	4603      	mov	r3, r0
 8003656:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff ff31 	bl	80034c4 <__NVIC_EnableIRQ>
}
 8003662:	bf00      	nop
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b082      	sub	sp, #8
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7ff ffa2 	bl	80035bc <SysTick_Config>
 8003678:	4603      	mov	r3, r0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
	...

08003684 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003684:	b480      	push	{r7}
 8003686:	b089      	sub	sp, #36	; 0x24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003692:	2300      	movs	r3, #0
 8003694:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003696:	2300      	movs	r3, #0
 8003698:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800369a:	2300      	movs	r3, #0
 800369c:	61fb      	str	r3, [r7, #28]
 800369e:	e159      	b.n	8003954 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036a0:	2201      	movs	r2, #1
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	4013      	ands	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	f040 8148 	bne.w	800394e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d005      	beq.n	80036d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d130      	bne.n	8003738 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	2203      	movs	r2, #3
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	43db      	mvns	r3, r3
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	4013      	ands	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800370c:	2201      	movs	r2, #1
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	43db      	mvns	r3, r3
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4013      	ands	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	091b      	lsrs	r3, r3, #4
 8003722:	f003 0201 	and.w	r2, r3, #1
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4313      	orrs	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 0303 	and.w	r3, r3, #3
 8003740:	2b03      	cmp	r3, #3
 8003742:	d017      	beq.n	8003774 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	2203      	movs	r2, #3
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	43db      	mvns	r3, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4013      	ands	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4313      	orrs	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 0303 	and.w	r3, r3, #3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d123      	bne.n	80037c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	08da      	lsrs	r2, r3, #3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3208      	adds	r2, #8
 8003788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800378c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	220f      	movs	r2, #15
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	43db      	mvns	r3, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4013      	ands	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	691a      	ldr	r2, [r3, #16]
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	08da      	lsrs	r2, r3, #3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	3208      	adds	r2, #8
 80037c2:	69b9      	ldr	r1, [r7, #24]
 80037c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	2203      	movs	r2, #3
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	43db      	mvns	r3, r3
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4013      	ands	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f003 0203 	and.w	r2, r3, #3
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 80a2 	beq.w	800394e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800380a:	2300      	movs	r3, #0
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	4b57      	ldr	r3, [pc, #348]	; (800396c <HAL_GPIO_Init+0x2e8>)
 8003810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003812:	4a56      	ldr	r2, [pc, #344]	; (800396c <HAL_GPIO_Init+0x2e8>)
 8003814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003818:	6453      	str	r3, [r2, #68]	; 0x44
 800381a:	4b54      	ldr	r3, [pc, #336]	; (800396c <HAL_GPIO_Init+0x2e8>)
 800381c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003826:	4a52      	ldr	r2, [pc, #328]	; (8003970 <HAL_GPIO_Init+0x2ec>)
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	089b      	lsrs	r3, r3, #2
 800382c:	3302      	adds	r3, #2
 800382e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003832:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	220f      	movs	r2, #15
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	43db      	mvns	r3, r3
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4013      	ands	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a49      	ldr	r2, [pc, #292]	; (8003974 <HAL_GPIO_Init+0x2f0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d019      	beq.n	8003886 <HAL_GPIO_Init+0x202>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a48      	ldr	r2, [pc, #288]	; (8003978 <HAL_GPIO_Init+0x2f4>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d013      	beq.n	8003882 <HAL_GPIO_Init+0x1fe>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a47      	ldr	r2, [pc, #284]	; (800397c <HAL_GPIO_Init+0x2f8>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00d      	beq.n	800387e <HAL_GPIO_Init+0x1fa>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a46      	ldr	r2, [pc, #280]	; (8003980 <HAL_GPIO_Init+0x2fc>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d007      	beq.n	800387a <HAL_GPIO_Init+0x1f6>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a45      	ldr	r2, [pc, #276]	; (8003984 <HAL_GPIO_Init+0x300>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d101      	bne.n	8003876 <HAL_GPIO_Init+0x1f2>
 8003872:	2304      	movs	r3, #4
 8003874:	e008      	b.n	8003888 <HAL_GPIO_Init+0x204>
 8003876:	2307      	movs	r3, #7
 8003878:	e006      	b.n	8003888 <HAL_GPIO_Init+0x204>
 800387a:	2303      	movs	r3, #3
 800387c:	e004      	b.n	8003888 <HAL_GPIO_Init+0x204>
 800387e:	2302      	movs	r3, #2
 8003880:	e002      	b.n	8003888 <HAL_GPIO_Init+0x204>
 8003882:	2301      	movs	r3, #1
 8003884:	e000      	b.n	8003888 <HAL_GPIO_Init+0x204>
 8003886:	2300      	movs	r3, #0
 8003888:	69fa      	ldr	r2, [r7, #28]
 800388a:	f002 0203 	and.w	r2, r2, #3
 800388e:	0092      	lsls	r2, r2, #2
 8003890:	4093      	lsls	r3, r2
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	4313      	orrs	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003898:	4935      	ldr	r1, [pc, #212]	; (8003970 <HAL_GPIO_Init+0x2ec>)
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	089b      	lsrs	r3, r3, #2
 800389e:	3302      	adds	r3, #2
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038a6:	4b38      	ldr	r3, [pc, #224]	; (8003988 <HAL_GPIO_Init+0x304>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	43db      	mvns	r3, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4013      	ands	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038ca:	4a2f      	ldr	r2, [pc, #188]	; (8003988 <HAL_GPIO_Init+0x304>)
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038d0:	4b2d      	ldr	r3, [pc, #180]	; (8003988 <HAL_GPIO_Init+0x304>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	43db      	mvns	r3, r3
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4013      	ands	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038f4:	4a24      	ldr	r2, [pc, #144]	; (8003988 <HAL_GPIO_Init+0x304>)
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038fa:	4b23      	ldr	r3, [pc, #140]	; (8003988 <HAL_GPIO_Init+0x304>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	43db      	mvns	r3, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4013      	ands	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	4313      	orrs	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800391e:	4a1a      	ldr	r2, [pc, #104]	; (8003988 <HAL_GPIO_Init+0x304>)
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003924:	4b18      	ldr	r3, [pc, #96]	; (8003988 <HAL_GPIO_Init+0x304>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	43db      	mvns	r3, r3
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	4013      	ands	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d003      	beq.n	8003948 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	4313      	orrs	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003948:	4a0f      	ldr	r2, [pc, #60]	; (8003988 <HAL_GPIO_Init+0x304>)
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	3301      	adds	r3, #1
 8003952:	61fb      	str	r3, [r7, #28]
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	2b0f      	cmp	r3, #15
 8003958:	f67f aea2 	bls.w	80036a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800395c:	bf00      	nop
 800395e:	bf00      	nop
 8003960:	3724      	adds	r7, #36	; 0x24
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	40023800 	.word	0x40023800
 8003970:	40013800 	.word	0x40013800
 8003974:	40020000 	.word	0x40020000
 8003978:	40020400 	.word	0x40020400
 800397c:	40020800 	.word	0x40020800
 8003980:	40020c00 	.word	0x40020c00
 8003984:	40021000 	.word	0x40021000
 8003988:	40013c00 	.word	0x40013c00

0800398c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	460b      	mov	r3, r1
 8003996:	807b      	strh	r3, [r7, #2]
 8003998:	4613      	mov	r3, r2
 800399a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800399c:	787b      	ldrb	r3, [r7, #1]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039a2:	887a      	ldrh	r2, [r7, #2]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039a8:	e003      	b.n	80039b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039aa:	887b      	ldrh	r3, [r7, #2]
 80039ac:	041a      	lsls	r2, r3, #16
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	619a      	str	r2, [r3, #24]
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
	...

080039c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	4603      	mov	r3, r0
 80039c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80039ca:	4b08      	ldr	r3, [pc, #32]	; (80039ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039cc:	695a      	ldr	r2, [r3, #20]
 80039ce:	88fb      	ldrh	r3, [r7, #6]
 80039d0:	4013      	ands	r3, r2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d006      	beq.n	80039e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039d6:	4a05      	ldr	r2, [pc, #20]	; (80039ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039d8:	88fb      	ldrh	r3, [r7, #6]
 80039da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039dc:	88fb      	ldrh	r3, [r7, #6]
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 f806 	bl	80039f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80039e4:	bf00      	nop
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40013c00 	.word	0x40013c00

080039f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	4603      	mov	r3, r0
 80039f8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80039fa:	bf00      	nop
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
	...

08003a08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e267      	b.n	8003eea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d075      	beq.n	8003b12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a26:	4b88      	ldr	r3, [pc, #544]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 030c 	and.w	r3, r3, #12
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d00c      	beq.n	8003a4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a32:	4b85      	ldr	r3, [pc, #532]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a3a:	2b08      	cmp	r3, #8
 8003a3c:	d112      	bne.n	8003a64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a3e:	4b82      	ldr	r3, [pc, #520]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a4a:	d10b      	bne.n	8003a64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a4c:	4b7e      	ldr	r3, [pc, #504]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d05b      	beq.n	8003b10 <HAL_RCC_OscConfig+0x108>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d157      	bne.n	8003b10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e242      	b.n	8003eea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a6c:	d106      	bne.n	8003a7c <HAL_RCC_OscConfig+0x74>
 8003a6e:	4b76      	ldr	r3, [pc, #472]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a75      	ldr	r2, [pc, #468]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	e01d      	b.n	8003ab8 <HAL_RCC_OscConfig+0xb0>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a84:	d10c      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x98>
 8003a86:	4b70      	ldr	r3, [pc, #448]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a6f      	ldr	r2, [pc, #444]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003a8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	4b6d      	ldr	r3, [pc, #436]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a6c      	ldr	r2, [pc, #432]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a9c:	6013      	str	r3, [r2, #0]
 8003a9e:	e00b      	b.n	8003ab8 <HAL_RCC_OscConfig+0xb0>
 8003aa0:	4b69      	ldr	r3, [pc, #420]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a68      	ldr	r2, [pc, #416]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	4b66      	ldr	r3, [pc, #408]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a65      	ldr	r2, [pc, #404]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003ab2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ab6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d013      	beq.n	8003ae8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac0:	f7ff f8e0 	bl	8002c84 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ac8:	f7ff f8dc 	bl	8002c84 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b64      	cmp	r3, #100	; 0x64
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e207      	b.n	8003eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ada:	4b5b      	ldr	r3, [pc, #364]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0f0      	beq.n	8003ac8 <HAL_RCC_OscConfig+0xc0>
 8003ae6:	e014      	b.n	8003b12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae8:	f7ff f8cc 	bl	8002c84 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003af0:	f7ff f8c8 	bl	8002c84 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b64      	cmp	r3, #100	; 0x64
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e1f3      	b.n	8003eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b02:	4b51      	ldr	r3, [pc, #324]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1f0      	bne.n	8003af0 <HAL_RCC_OscConfig+0xe8>
 8003b0e:	e000      	b.n	8003b12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d063      	beq.n	8003be6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b1e:	4b4a      	ldr	r3, [pc, #296]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 030c 	and.w	r3, r3, #12
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00b      	beq.n	8003b42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b2a:	4b47      	ldr	r3, [pc, #284]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d11c      	bne.n	8003b70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b36:	4b44      	ldr	r3, [pc, #272]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d116      	bne.n	8003b70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b42:	4b41      	ldr	r3, [pc, #260]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d005      	beq.n	8003b5a <HAL_RCC_OscConfig+0x152>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d001      	beq.n	8003b5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e1c7      	b.n	8003eea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b5a:	4b3b      	ldr	r3, [pc, #236]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	4937      	ldr	r1, [pc, #220]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b6e:	e03a      	b.n	8003be6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d020      	beq.n	8003bba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b78:	4b34      	ldr	r3, [pc, #208]	; (8003c4c <HAL_RCC_OscConfig+0x244>)
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7e:	f7ff f881 	bl	8002c84 <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b86:	f7ff f87d 	bl	8002c84 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e1a8      	b.n	8003eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b98:	4b2b      	ldr	r3, [pc, #172]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0f0      	beq.n	8003b86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba4:	4b28      	ldr	r3, [pc, #160]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	4925      	ldr	r1, [pc, #148]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	600b      	str	r3, [r1, #0]
 8003bb8:	e015      	b.n	8003be6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bba:	4b24      	ldr	r3, [pc, #144]	; (8003c4c <HAL_RCC_OscConfig+0x244>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc0:	f7ff f860 	bl	8002c84 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bc8:	f7ff f85c 	bl	8002c84 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e187      	b.n	8003eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bda:	4b1b      	ldr	r3, [pc, #108]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1f0      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0308 	and.w	r3, r3, #8
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d036      	beq.n	8003c60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d016      	beq.n	8003c28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bfa:	4b15      	ldr	r3, [pc, #84]	; (8003c50 <HAL_RCC_OscConfig+0x248>)
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c00:	f7ff f840 	bl	8002c84 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c08:	f7ff f83c 	bl	8002c84 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e167      	b.n	8003eea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c1a:	4b0b      	ldr	r3, [pc, #44]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0f0      	beq.n	8003c08 <HAL_RCC_OscConfig+0x200>
 8003c26:	e01b      	b.n	8003c60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c28:	4b09      	ldr	r3, [pc, #36]	; (8003c50 <HAL_RCC_OscConfig+0x248>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c2e:	f7ff f829 	bl	8002c84 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c34:	e00e      	b.n	8003c54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c36:	f7ff f825 	bl	8002c84 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d907      	bls.n	8003c54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e150      	b.n	8003eea <HAL_RCC_OscConfig+0x4e2>
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	42470000 	.word	0x42470000
 8003c50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c54:	4b88      	ldr	r3, [pc, #544]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1ea      	bne.n	8003c36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 8097 	beq.w	8003d9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c72:	4b81      	ldr	r3, [pc, #516]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10f      	bne.n	8003c9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60bb      	str	r3, [r7, #8]
 8003c82:	4b7d      	ldr	r3, [pc, #500]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	4a7c      	ldr	r2, [pc, #496]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c8e:	4b7a      	ldr	r3, [pc, #488]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c96:	60bb      	str	r3, [r7, #8]
 8003c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c9e:	4b77      	ldr	r3, [pc, #476]	; (8003e7c <HAL_RCC_OscConfig+0x474>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d118      	bne.n	8003cdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003caa:	4b74      	ldr	r3, [pc, #464]	; (8003e7c <HAL_RCC_OscConfig+0x474>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a73      	ldr	r2, [pc, #460]	; (8003e7c <HAL_RCC_OscConfig+0x474>)
 8003cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cb6:	f7fe ffe5 	bl	8002c84 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cbe:	f7fe ffe1 	bl	8002c84 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e10c      	b.n	8003eea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd0:	4b6a      	ldr	r3, [pc, #424]	; (8003e7c <HAL_RCC_OscConfig+0x474>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0f0      	beq.n	8003cbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d106      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x2ea>
 8003ce4:	4b64      	ldr	r3, [pc, #400]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce8:	4a63      	ldr	r2, [pc, #396]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003cea:	f043 0301 	orr.w	r3, r3, #1
 8003cee:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf0:	e01c      	b.n	8003d2c <HAL_RCC_OscConfig+0x324>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	2b05      	cmp	r3, #5
 8003cf8:	d10c      	bne.n	8003d14 <HAL_RCC_OscConfig+0x30c>
 8003cfa:	4b5f      	ldr	r3, [pc, #380]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfe:	4a5e      	ldr	r2, [pc, #376]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003d00:	f043 0304 	orr.w	r3, r3, #4
 8003d04:	6713      	str	r3, [r2, #112]	; 0x70
 8003d06:	4b5c      	ldr	r3, [pc, #368]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0a:	4a5b      	ldr	r2, [pc, #364]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003d0c:	f043 0301 	orr.w	r3, r3, #1
 8003d10:	6713      	str	r3, [r2, #112]	; 0x70
 8003d12:	e00b      	b.n	8003d2c <HAL_RCC_OscConfig+0x324>
 8003d14:	4b58      	ldr	r3, [pc, #352]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d18:	4a57      	ldr	r2, [pc, #348]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003d1a:	f023 0301 	bic.w	r3, r3, #1
 8003d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d20:	4b55      	ldr	r3, [pc, #340]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d24:	4a54      	ldr	r2, [pc, #336]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003d26:	f023 0304 	bic.w	r3, r3, #4
 8003d2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d015      	beq.n	8003d60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d34:	f7fe ffa6 	bl	8002c84 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d3a:	e00a      	b.n	8003d52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d3c:	f7fe ffa2 	bl	8002c84 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e0cb      	b.n	8003eea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d52:	4b49      	ldr	r3, [pc, #292]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0ee      	beq.n	8003d3c <HAL_RCC_OscConfig+0x334>
 8003d5e:	e014      	b.n	8003d8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d60:	f7fe ff90 	bl	8002c84 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d66:	e00a      	b.n	8003d7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d68:	f7fe ff8c 	bl	8002c84 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e0b5      	b.n	8003eea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d7e:	4b3e      	ldr	r3, [pc, #248]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1ee      	bne.n	8003d68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d8a:	7dfb      	ldrb	r3, [r7, #23]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d105      	bne.n	8003d9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d90:	4b39      	ldr	r3, [pc, #228]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d94:	4a38      	ldr	r2, [pc, #224]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 80a1 	beq.w	8003ee8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003da6:	4b34      	ldr	r3, [pc, #208]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 030c 	and.w	r3, r3, #12
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d05c      	beq.n	8003e6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d141      	bne.n	8003e3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dba:	4b31      	ldr	r3, [pc, #196]	; (8003e80 <HAL_RCC_OscConfig+0x478>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc0:	f7fe ff60 	bl	8002c84 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dc8:	f7fe ff5c 	bl	8002c84 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e087      	b.n	8003eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dda:	4b27      	ldr	r3, [pc, #156]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f0      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69da      	ldr	r2, [r3, #28]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	431a      	orrs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	019b      	lsls	r3, r3, #6
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfc:	085b      	lsrs	r3, r3, #1
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	041b      	lsls	r3, r3, #16
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	061b      	lsls	r3, r3, #24
 8003e0a:	491b      	ldr	r1, [pc, #108]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e10:	4b1b      	ldr	r3, [pc, #108]	; (8003e80 <HAL_RCC_OscConfig+0x478>)
 8003e12:	2201      	movs	r2, #1
 8003e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e16:	f7fe ff35 	bl	8002c84 <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e1c:	e008      	b.n	8003e30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e1e:	f7fe ff31 	bl	8002c84 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e05c      	b.n	8003eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e30:	4b11      	ldr	r3, [pc, #68]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0f0      	beq.n	8003e1e <HAL_RCC_OscConfig+0x416>
 8003e3c:	e054      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e3e:	4b10      	ldr	r3, [pc, #64]	; (8003e80 <HAL_RCC_OscConfig+0x478>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e44:	f7fe ff1e 	bl	8002c84 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e4c:	f7fe ff1a 	bl	8002c84 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e045      	b.n	8003eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e5e:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1f0      	bne.n	8003e4c <HAL_RCC_OscConfig+0x444>
 8003e6a:	e03d      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d107      	bne.n	8003e84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e038      	b.n	8003eea <HAL_RCC_OscConfig+0x4e2>
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	40007000 	.word	0x40007000
 8003e80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e84:	4b1b      	ldr	r3, [pc, #108]	; (8003ef4 <HAL_RCC_OscConfig+0x4ec>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d028      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d121      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d11a      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003eba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d111      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eca:	085b      	lsrs	r3, r3, #1
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d107      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d001      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e000      	b.n	8003eea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40023800 	.word	0x40023800

08003ef8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e0cc      	b.n	80040a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f0c:	4b68      	ldr	r3, [pc, #416]	; (80040b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0307 	and.w	r3, r3, #7
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d90c      	bls.n	8003f34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f1a:	4b65      	ldr	r3, [pc, #404]	; (80040b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f22:	4b63      	ldr	r3, [pc, #396]	; (80040b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0307 	and.w	r3, r3, #7
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d001      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e0b8      	b.n	80040a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d020      	beq.n	8003f82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d005      	beq.n	8003f58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f4c:	4b59      	ldr	r3, [pc, #356]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	4a58      	ldr	r2, [pc, #352]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0308 	and.w	r3, r3, #8
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d005      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f64:	4b53      	ldr	r3, [pc, #332]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	4a52      	ldr	r2, [pc, #328]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f70:	4b50      	ldr	r3, [pc, #320]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	494d      	ldr	r1, [pc, #308]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d044      	beq.n	8004018 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d107      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f96:	4b47      	ldr	r3, [pc, #284]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d119      	bne.n	8003fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e07f      	b.n	80040a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d003      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d107      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb6:	4b3f      	ldr	r3, [pc, #252]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d109      	bne.n	8003fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e06f      	b.n	80040a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fc6:	4b3b      	ldr	r3, [pc, #236]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e067      	b.n	80040a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fd6:	4b37      	ldr	r3, [pc, #220]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f023 0203 	bic.w	r2, r3, #3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	4934      	ldr	r1, [pc, #208]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fe8:	f7fe fe4c 	bl	8002c84 <HAL_GetTick>
 8003fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fee:	e00a      	b.n	8004006 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ff0:	f7fe fe48 	bl	8002c84 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e04f      	b.n	80040a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004006:	4b2b      	ldr	r3, [pc, #172]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f003 020c 	and.w	r2, r3, #12
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	429a      	cmp	r2, r3
 8004016:	d1eb      	bne.n	8003ff0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004018:	4b25      	ldr	r3, [pc, #148]	; (80040b0 <HAL_RCC_ClockConfig+0x1b8>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	429a      	cmp	r2, r3
 8004024:	d20c      	bcs.n	8004040 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004026:	4b22      	ldr	r3, [pc, #136]	; (80040b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	b2d2      	uxtb	r2, r2
 800402c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800402e:	4b20      	ldr	r3, [pc, #128]	; (80040b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0307 	and.w	r3, r3, #7
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	429a      	cmp	r2, r3
 800403a:	d001      	beq.n	8004040 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e032      	b.n	80040a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b00      	cmp	r3, #0
 800404a:	d008      	beq.n	800405e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800404c:	4b19      	ldr	r3, [pc, #100]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	4916      	ldr	r1, [pc, #88]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 800405a:	4313      	orrs	r3, r2
 800405c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0308 	and.w	r3, r3, #8
 8004066:	2b00      	cmp	r3, #0
 8004068:	d009      	beq.n	800407e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800406a:	4b12      	ldr	r3, [pc, #72]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	490e      	ldr	r1, [pc, #56]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 800407a:	4313      	orrs	r3, r2
 800407c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800407e:	f000 f821 	bl	80040c4 <HAL_RCC_GetSysClockFreq>
 8004082:	4602      	mov	r2, r0
 8004084:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	091b      	lsrs	r3, r3, #4
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	490a      	ldr	r1, [pc, #40]	; (80040b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004090:	5ccb      	ldrb	r3, [r1, r3]
 8004092:	fa22 f303 	lsr.w	r3, r2, r3
 8004096:	4a09      	ldr	r2, [pc, #36]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 8004098:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800409a:	4b09      	ldr	r3, [pc, #36]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fe fdac 	bl	8002bfc <HAL_InitTick>

  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	40023c00 	.word	0x40023c00
 80040b4:	40023800 	.word	0x40023800
 80040b8:	080065b8 	.word	0x080065b8
 80040bc:	2000000c 	.word	0x2000000c
 80040c0:	20000010 	.word	0x20000010

080040c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040c8:	b090      	sub	sp, #64	; 0x40
 80040ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040cc:	2300      	movs	r3, #0
 80040ce:	637b      	str	r3, [r7, #52]	; 0x34
 80040d0:	2300      	movs	r3, #0
 80040d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040d4:	2300      	movs	r3, #0
 80040d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80040d8:	2300      	movs	r3, #0
 80040da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040dc:	4b59      	ldr	r3, [pc, #356]	; (8004244 <HAL_RCC_GetSysClockFreq+0x180>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f003 030c 	and.w	r3, r3, #12
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d00d      	beq.n	8004104 <HAL_RCC_GetSysClockFreq+0x40>
 80040e8:	2b08      	cmp	r3, #8
 80040ea:	f200 80a1 	bhi.w	8004230 <HAL_RCC_GetSysClockFreq+0x16c>
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d002      	beq.n	80040f8 <HAL_RCC_GetSysClockFreq+0x34>
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	d003      	beq.n	80040fe <HAL_RCC_GetSysClockFreq+0x3a>
 80040f6:	e09b      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040f8:	4b53      	ldr	r3, [pc, #332]	; (8004248 <HAL_RCC_GetSysClockFreq+0x184>)
 80040fa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80040fc:	e09b      	b.n	8004236 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040fe:	4b53      	ldr	r3, [pc, #332]	; (800424c <HAL_RCC_GetSysClockFreq+0x188>)
 8004100:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004102:	e098      	b.n	8004236 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004104:	4b4f      	ldr	r3, [pc, #316]	; (8004244 <HAL_RCC_GetSysClockFreq+0x180>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800410c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800410e:	4b4d      	ldr	r3, [pc, #308]	; (8004244 <HAL_RCC_GetSysClockFreq+0x180>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d028      	beq.n	800416c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800411a:	4b4a      	ldr	r3, [pc, #296]	; (8004244 <HAL_RCC_GetSysClockFreq+0x180>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	099b      	lsrs	r3, r3, #6
 8004120:	2200      	movs	r2, #0
 8004122:	623b      	str	r3, [r7, #32]
 8004124:	627a      	str	r2, [r7, #36]	; 0x24
 8004126:	6a3b      	ldr	r3, [r7, #32]
 8004128:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800412c:	2100      	movs	r1, #0
 800412e:	4b47      	ldr	r3, [pc, #284]	; (800424c <HAL_RCC_GetSysClockFreq+0x188>)
 8004130:	fb03 f201 	mul.w	r2, r3, r1
 8004134:	2300      	movs	r3, #0
 8004136:	fb00 f303 	mul.w	r3, r0, r3
 800413a:	4413      	add	r3, r2
 800413c:	4a43      	ldr	r2, [pc, #268]	; (800424c <HAL_RCC_GetSysClockFreq+0x188>)
 800413e:	fba0 1202 	umull	r1, r2, r0, r2
 8004142:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004144:	460a      	mov	r2, r1
 8004146:	62ba      	str	r2, [r7, #40]	; 0x28
 8004148:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800414a:	4413      	add	r3, r2
 800414c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800414e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004150:	2200      	movs	r2, #0
 8004152:	61bb      	str	r3, [r7, #24]
 8004154:	61fa      	str	r2, [r7, #28]
 8004156:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800415a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800415e:	f7fc f88f 	bl	8000280 <__aeabi_uldivmod>
 8004162:	4602      	mov	r2, r0
 8004164:	460b      	mov	r3, r1
 8004166:	4613      	mov	r3, r2
 8004168:	63fb      	str	r3, [r7, #60]	; 0x3c
 800416a:	e053      	b.n	8004214 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800416c:	4b35      	ldr	r3, [pc, #212]	; (8004244 <HAL_RCC_GetSysClockFreq+0x180>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	099b      	lsrs	r3, r3, #6
 8004172:	2200      	movs	r2, #0
 8004174:	613b      	str	r3, [r7, #16]
 8004176:	617a      	str	r2, [r7, #20]
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800417e:	f04f 0b00 	mov.w	fp, #0
 8004182:	4652      	mov	r2, sl
 8004184:	465b      	mov	r3, fp
 8004186:	f04f 0000 	mov.w	r0, #0
 800418a:	f04f 0100 	mov.w	r1, #0
 800418e:	0159      	lsls	r1, r3, #5
 8004190:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004194:	0150      	lsls	r0, r2, #5
 8004196:	4602      	mov	r2, r0
 8004198:	460b      	mov	r3, r1
 800419a:	ebb2 080a 	subs.w	r8, r2, sl
 800419e:	eb63 090b 	sbc.w	r9, r3, fp
 80041a2:	f04f 0200 	mov.w	r2, #0
 80041a6:	f04f 0300 	mov.w	r3, #0
 80041aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80041ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80041b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80041b6:	ebb2 0408 	subs.w	r4, r2, r8
 80041ba:	eb63 0509 	sbc.w	r5, r3, r9
 80041be:	f04f 0200 	mov.w	r2, #0
 80041c2:	f04f 0300 	mov.w	r3, #0
 80041c6:	00eb      	lsls	r3, r5, #3
 80041c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041cc:	00e2      	lsls	r2, r4, #3
 80041ce:	4614      	mov	r4, r2
 80041d0:	461d      	mov	r5, r3
 80041d2:	eb14 030a 	adds.w	r3, r4, sl
 80041d6:	603b      	str	r3, [r7, #0]
 80041d8:	eb45 030b 	adc.w	r3, r5, fp
 80041dc:	607b      	str	r3, [r7, #4]
 80041de:	f04f 0200 	mov.w	r2, #0
 80041e2:	f04f 0300 	mov.w	r3, #0
 80041e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041ea:	4629      	mov	r1, r5
 80041ec:	028b      	lsls	r3, r1, #10
 80041ee:	4621      	mov	r1, r4
 80041f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041f4:	4621      	mov	r1, r4
 80041f6:	028a      	lsls	r2, r1, #10
 80041f8:	4610      	mov	r0, r2
 80041fa:	4619      	mov	r1, r3
 80041fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041fe:	2200      	movs	r2, #0
 8004200:	60bb      	str	r3, [r7, #8]
 8004202:	60fa      	str	r2, [r7, #12]
 8004204:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004208:	f7fc f83a 	bl	8000280 <__aeabi_uldivmod>
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
 8004210:	4613      	mov	r3, r2
 8004212:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004214:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <HAL_RCC_GetSysClockFreq+0x180>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	0c1b      	lsrs	r3, r3, #16
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	3301      	adds	r3, #1
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004224:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004228:	fbb2 f3f3 	udiv	r3, r2, r3
 800422c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800422e:	e002      	b.n	8004236 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004230:	4b05      	ldr	r3, [pc, #20]	; (8004248 <HAL_RCC_GetSysClockFreq+0x184>)
 8004232:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004234:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004238:	4618      	mov	r0, r3
 800423a:	3740      	adds	r7, #64	; 0x40
 800423c:	46bd      	mov	sp, r7
 800423e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004242:	bf00      	nop
 8004244:	40023800 	.word	0x40023800
 8004248:	00f42400 	.word	0x00f42400
 800424c:	017d7840 	.word	0x017d7840

08004250 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e07b      	b.n	800435a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	2b00      	cmp	r3, #0
 8004268:	d108      	bne.n	800427c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004272:	d009      	beq.n	8004288 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	61da      	str	r2, [r3, #28]
 800427a:	e005      	b.n	8004288 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d106      	bne.n	80042a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7fe f9d8 	bl	8002658 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2202      	movs	r2, #2
 80042ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80042d0:	431a      	orrs	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042da:	431a      	orrs	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	431a      	orrs	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	431a      	orrs	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042f8:	431a      	orrs	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004302:	431a      	orrs	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a1b      	ldr	r3, [r3, #32]
 8004308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430c:	ea42 0103 	orr.w	r1, r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004314:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	0c1b      	lsrs	r3, r3, #16
 8004326:	f003 0104 	and.w	r1, r3, #4
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	f003 0210 	and.w	r2, r3, #16
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	69da      	ldr	r2, [r3, #28]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004348:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b088      	sub	sp, #32
 8004366:	af00      	add	r7, sp, #0
 8004368:	60f8      	str	r0, [r7, #12]
 800436a:	60b9      	str	r1, [r7, #8]
 800436c:	603b      	str	r3, [r7, #0]
 800436e:	4613      	mov	r3, r2
 8004370:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800437c:	2b01      	cmp	r3, #1
 800437e:	d101      	bne.n	8004384 <HAL_SPI_Transmit+0x22>
 8004380:	2302      	movs	r3, #2
 8004382:	e126      	b.n	80045d2 <HAL_SPI_Transmit+0x270>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800438c:	f7fe fc7a 	bl	8002c84 <HAL_GetTick>
 8004390:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004392:	88fb      	ldrh	r3, [r7, #6]
 8004394:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d002      	beq.n	80043a8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80043a2:	2302      	movs	r3, #2
 80043a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80043a6:	e10b      	b.n	80045c0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d002      	beq.n	80043b4 <HAL_SPI_Transmit+0x52>
 80043ae:	88fb      	ldrh	r3, [r7, #6]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d102      	bne.n	80043ba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80043b8:	e102      	b.n	80045c0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2203      	movs	r2, #3
 80043be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	88fa      	ldrh	r2, [r7, #6]
 80043d2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	88fa      	ldrh	r2, [r7, #6]
 80043d8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004400:	d10f      	bne.n	8004422 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004410:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004420:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442c:	2b40      	cmp	r3, #64	; 0x40
 800442e:	d007      	beq.n	8004440 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800443e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004448:	d14b      	bne.n	80044e2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d002      	beq.n	8004458 <HAL_SPI_Transmit+0xf6>
 8004452:	8afb      	ldrh	r3, [r7, #22]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d13e      	bne.n	80044d6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445c:	881a      	ldrh	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004468:	1c9a      	adds	r2, r3, #2
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004472:	b29b      	uxth	r3, r3
 8004474:	3b01      	subs	r3, #1
 8004476:	b29a      	uxth	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800447c:	e02b      	b.n	80044d6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b02      	cmp	r3, #2
 800448a:	d112      	bne.n	80044b2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004490:	881a      	ldrh	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449c:	1c9a      	adds	r2, r3, #2
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	3b01      	subs	r3, #1
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80044b0:	e011      	b.n	80044d6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044b2:	f7fe fbe7 	bl	8002c84 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d803      	bhi.n	80044ca <HAL_SPI_Transmit+0x168>
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c8:	d102      	bne.n	80044d0 <HAL_SPI_Transmit+0x16e>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d102      	bne.n	80044d6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80044d4:	e074      	b.n	80045c0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044da:	b29b      	uxth	r3, r3
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1ce      	bne.n	800447e <HAL_SPI_Transmit+0x11c>
 80044e0:	e04c      	b.n	800457c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <HAL_SPI_Transmit+0x18e>
 80044ea:	8afb      	ldrh	r3, [r7, #22]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d140      	bne.n	8004572 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	330c      	adds	r3, #12
 80044fa:	7812      	ldrb	r2, [r2, #0]
 80044fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800450c:	b29b      	uxth	r3, r3
 800450e:	3b01      	subs	r3, #1
 8004510:	b29a      	uxth	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004516:	e02c      	b.n	8004572 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b02      	cmp	r3, #2
 8004524:	d113      	bne.n	800454e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	330c      	adds	r3, #12
 8004530:	7812      	ldrb	r2, [r2, #0]
 8004532:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004538:	1c5a      	adds	r2, r3, #1
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004542:	b29b      	uxth	r3, r3
 8004544:	3b01      	subs	r3, #1
 8004546:	b29a      	uxth	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	86da      	strh	r2, [r3, #54]	; 0x36
 800454c:	e011      	b.n	8004572 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800454e:	f7fe fb99 	bl	8002c84 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	429a      	cmp	r2, r3
 800455c:	d803      	bhi.n	8004566 <HAL_SPI_Transmit+0x204>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004564:	d102      	bne.n	800456c <HAL_SPI_Transmit+0x20a>
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d102      	bne.n	8004572 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004570:	e026      	b.n	80045c0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004576:	b29b      	uxth	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1cd      	bne.n	8004518 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	6839      	ldr	r1, [r7, #0]
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f000 f8c1 	bl	8004708 <SPI_EndRxTxTransaction>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d002      	beq.n	8004592 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2220      	movs	r2, #32
 8004590:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10a      	bne.n	80045b0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800459a:	2300      	movs	r3, #0
 800459c:	613b      	str	r3, [r7, #16]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	613b      	str	r3, [r7, #16]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	613b      	str	r3, [r7, #16]
 80045ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	77fb      	strb	r3, [r7, #31]
 80045bc:	e000      	b.n	80045c0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80045be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80045d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3720      	adds	r7, #32
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045e8:	b2db      	uxtb	r3, r3
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
	...

080045f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b088      	sub	sp, #32
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	603b      	str	r3, [r7, #0]
 8004604:	4613      	mov	r3, r2
 8004606:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004608:	f7fe fb3c 	bl	8002c84 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004610:	1a9b      	subs	r3, r3, r2
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	4413      	add	r3, r2
 8004616:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004618:	f7fe fb34 	bl	8002c84 <HAL_GetTick>
 800461c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800461e:	4b39      	ldr	r3, [pc, #228]	; (8004704 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	015b      	lsls	r3, r3, #5
 8004624:	0d1b      	lsrs	r3, r3, #20
 8004626:	69fa      	ldr	r2, [r7, #28]
 8004628:	fb02 f303 	mul.w	r3, r2, r3
 800462c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800462e:	e054      	b.n	80046da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004636:	d050      	beq.n	80046da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004638:	f7fe fb24 	bl	8002c84 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	69fa      	ldr	r2, [r7, #28]
 8004644:	429a      	cmp	r2, r3
 8004646:	d902      	bls.n	800464e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d13d      	bne.n	80046ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800465c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004666:	d111      	bne.n	800468c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004670:	d004      	beq.n	800467c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800467a:	d107      	bne.n	800468c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800468a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004694:	d10f      	bne.n	80046b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e017      	b.n	80046fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	3b01      	subs	r3, #1
 80046d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	4013      	ands	r3, r2
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	bf0c      	ite	eq
 80046ea:	2301      	moveq	r3, #1
 80046ec:	2300      	movne	r3, #0
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	461a      	mov	r2, r3
 80046f2:	79fb      	ldrb	r3, [r7, #7]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d19b      	bne.n	8004630 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3720      	adds	r7, #32
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	2000000c 	.word	0x2000000c

08004708 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b088      	sub	sp, #32
 800470c:	af02      	add	r7, sp, #8
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004714:	4b1b      	ldr	r3, [pc, #108]	; (8004784 <SPI_EndRxTxTransaction+0x7c>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a1b      	ldr	r2, [pc, #108]	; (8004788 <SPI_EndRxTxTransaction+0x80>)
 800471a:	fba2 2303 	umull	r2, r3, r2, r3
 800471e:	0d5b      	lsrs	r3, r3, #21
 8004720:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004724:	fb02 f303 	mul.w	r3, r2, r3
 8004728:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004732:	d112      	bne.n	800475a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	2200      	movs	r2, #0
 800473c:	2180      	movs	r1, #128	; 0x80
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f7ff ff5a 	bl	80045f8 <SPI_WaitFlagStateUntilTimeout>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d016      	beq.n	8004778 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474e:	f043 0220 	orr.w	r2, r3, #32
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e00f      	b.n	800477a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00a      	beq.n	8004776 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	3b01      	subs	r3, #1
 8004764:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004770:	2b80      	cmp	r3, #128	; 0x80
 8004772:	d0f2      	beq.n	800475a <SPI_EndRxTxTransaction+0x52>
 8004774:	e000      	b.n	8004778 <SPI_EndRxTxTransaction+0x70>
        break;
 8004776:	bf00      	nop
  }

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	2000000c 	.word	0x2000000c
 8004788:	165e9f81 	.word	0x165e9f81

0800478c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e041      	b.n	8004822 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d106      	bne.n	80047b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fe f9ae 	bl	8002b14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	3304      	adds	r3, #4
 80047c8:	4619      	mov	r1, r3
 80047ca:	4610      	mov	r0, r2
 80047cc:	f000 fb48 	bl	8004e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
	...

0800482c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b01      	cmp	r3, #1
 800483e:	d001      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e044      	b.n	80048ce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2202      	movs	r2, #2
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0201 	orr.w	r2, r2, #1
 800485a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a1e      	ldr	r2, [pc, #120]	; (80048dc <HAL_TIM_Base_Start_IT+0xb0>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d018      	beq.n	8004898 <HAL_TIM_Base_Start_IT+0x6c>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800486e:	d013      	beq.n	8004898 <HAL_TIM_Base_Start_IT+0x6c>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a1a      	ldr	r2, [pc, #104]	; (80048e0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d00e      	beq.n	8004898 <HAL_TIM_Base_Start_IT+0x6c>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a19      	ldr	r2, [pc, #100]	; (80048e4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d009      	beq.n	8004898 <HAL_TIM_Base_Start_IT+0x6c>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a17      	ldr	r2, [pc, #92]	; (80048e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d004      	beq.n	8004898 <HAL_TIM_Base_Start_IT+0x6c>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a16      	ldr	r2, [pc, #88]	; (80048ec <HAL_TIM_Base_Start_IT+0xc0>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d111      	bne.n	80048bc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f003 0307 	and.w	r3, r3, #7
 80048a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2b06      	cmp	r3, #6
 80048a8:	d010      	beq.n	80048cc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f042 0201 	orr.w	r2, r2, #1
 80048b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ba:	e007      	b.n	80048cc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0201 	orr.w	r2, r2, #1
 80048ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	40010000 	.word	0x40010000
 80048e0:	40000400 	.word	0x40000400
 80048e4:	40000800 	.word	0x40000800
 80048e8:	40000c00 	.word	0x40000c00
 80048ec:	40014000 	.word	0x40014000

080048f0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e041      	b.n	8004986 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d106      	bne.n	800491c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f839 	bl	800498e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3304      	adds	r3, #4
 800492c:	4619      	mov	r1, r3
 800492e:	4610      	mov	r0, r2
 8004930:	f000 fa96 	bl	8004e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800498e:	b480      	push	{r7}
 8004990:	b083      	sub	sp, #12
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b082      	sub	sp, #8
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d122      	bne.n	80049fe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d11b      	bne.n	80049fe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f06f 0202 	mvn.w	r2, #2
 80049ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	f003 0303 	and.w	r3, r3, #3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 fa1c 	bl	8004e22 <HAL_TIM_IC_CaptureCallback>
 80049ea:	e005      	b.n	80049f8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 fa0e 	bl	8004e0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 fa1f 	bl	8004e36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	f003 0304 	and.w	r3, r3, #4
 8004a08:	2b04      	cmp	r3, #4
 8004a0a:	d122      	bne.n	8004a52 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	f003 0304 	and.w	r3, r3, #4
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d11b      	bne.n	8004a52 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f06f 0204 	mvn.w	r2, #4
 8004a22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d003      	beq.n	8004a40 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 f9f2 	bl	8004e22 <HAL_TIM_IC_CaptureCallback>
 8004a3e:	e005      	b.n	8004a4c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f9e4 	bl	8004e0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f9f5 	bl	8004e36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	f003 0308 	and.w	r3, r3, #8
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d122      	bne.n	8004aa6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f003 0308 	and.w	r3, r3, #8
 8004a6a:	2b08      	cmp	r3, #8
 8004a6c:	d11b      	bne.n	8004aa6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f06f 0208 	mvn.w	r2, #8
 8004a76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2204      	movs	r2, #4
 8004a7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	f003 0303 	and.w	r3, r3, #3
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d003      	beq.n	8004a94 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 f9c8 	bl	8004e22 <HAL_TIM_IC_CaptureCallback>
 8004a92:	e005      	b.n	8004aa0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f9ba 	bl	8004e0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f9cb 	bl	8004e36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	f003 0310 	and.w	r3, r3, #16
 8004ab0:	2b10      	cmp	r3, #16
 8004ab2:	d122      	bne.n	8004afa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	f003 0310 	and.w	r3, r3, #16
 8004abe:	2b10      	cmp	r3, #16
 8004ac0:	d11b      	bne.n	8004afa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f06f 0210 	mvn.w	r2, #16
 8004aca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2208      	movs	r2, #8
 8004ad0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	69db      	ldr	r3, [r3, #28]
 8004ad8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 f99e 	bl	8004e22 <HAL_TIM_IC_CaptureCallback>
 8004ae6:	e005      	b.n	8004af4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f990 	bl	8004e0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f9a1 	bl	8004e36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d10e      	bne.n	8004b26 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d107      	bne.n	8004b26 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f06f 0201 	mvn.w	r2, #1
 8004b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 f96a 	bl	8004dfa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b30:	2b80      	cmp	r3, #128	; 0x80
 8004b32:	d10e      	bne.n	8004b52 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b3e:	2b80      	cmp	r3, #128	; 0x80
 8004b40:	d107      	bne.n	8004b52 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 fca5 	bl	800549c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5c:	2b40      	cmp	r3, #64	; 0x40
 8004b5e:	d10e      	bne.n	8004b7e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6a:	2b40      	cmp	r3, #64	; 0x40
 8004b6c:	d107      	bne.n	8004b7e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f966 	bl	8004e4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	f003 0320 	and.w	r3, r3, #32
 8004b88:	2b20      	cmp	r3, #32
 8004b8a:	d10e      	bne.n	8004baa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	f003 0320 	and.w	r3, r3, #32
 8004b96:	2b20      	cmp	r3, #32
 8004b98:	d107      	bne.n	8004baa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f06f 0220 	mvn.w	r2, #32
 8004ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 fc6f 	bl	8005488 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004baa:	bf00      	nop
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
	...

08004bb4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d101      	bne.n	8004bd2 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004bce:	2302      	movs	r3, #2
 8004bd0:	e048      	b.n	8004c64 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2b0c      	cmp	r3, #12
 8004bde:	d839      	bhi.n	8004c54 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004be0:	a201      	add	r2, pc, #4	; (adr r2, 8004be8 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be6:	bf00      	nop
 8004be8:	08004c1d 	.word	0x08004c1d
 8004bec:	08004c55 	.word	0x08004c55
 8004bf0:	08004c55 	.word	0x08004c55
 8004bf4:	08004c55 	.word	0x08004c55
 8004bf8:	08004c2b 	.word	0x08004c2b
 8004bfc:	08004c55 	.word	0x08004c55
 8004c00:	08004c55 	.word	0x08004c55
 8004c04:	08004c55 	.word	0x08004c55
 8004c08:	08004c39 	.word	0x08004c39
 8004c0c:	08004c55 	.word	0x08004c55
 8004c10:	08004c55 	.word	0x08004c55
 8004c14:	08004c55 	.word	0x08004c55
 8004c18:	08004c47 	.word	0x08004c47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68b9      	ldr	r1, [r7, #8]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 f99c 	bl	8004f60 <TIM_OC1_SetConfig>
      break;
 8004c28:	e017      	b.n	8004c5a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68b9      	ldr	r1, [r7, #8]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 f9fb 	bl	800502c <TIM_OC2_SetConfig>
      break;
 8004c36:	e010      	b.n	8004c5a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68b9      	ldr	r1, [r7, #8]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fa60 	bl	8005104 <TIM_OC3_SetConfig>
      break;
 8004c44:	e009      	b.n	8004c5a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68b9      	ldr	r1, [r7, #8]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 fac3 	bl	80051d8 <TIM_OC4_SetConfig>
      break;
 8004c52:	e002      	b.n	8004c5a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	75fb      	strb	r3, [r7, #23]
      break;
 8004c58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3718      	adds	r7, #24
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c76:	2300      	movs	r3, #0
 8004c78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d101      	bne.n	8004c88 <HAL_TIM_ConfigClockSource+0x1c>
 8004c84:	2302      	movs	r3, #2
 8004c86:	e0b4      	b.n	8004df2 <HAL_TIM_ConfigClockSource+0x186>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2202      	movs	r2, #2
 8004c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ca6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cc0:	d03e      	beq.n	8004d40 <HAL_TIM_ConfigClockSource+0xd4>
 8004cc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cc6:	f200 8087 	bhi.w	8004dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cce:	f000 8086 	beq.w	8004dde <HAL_TIM_ConfigClockSource+0x172>
 8004cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cd6:	d87f      	bhi.n	8004dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd8:	2b70      	cmp	r3, #112	; 0x70
 8004cda:	d01a      	beq.n	8004d12 <HAL_TIM_ConfigClockSource+0xa6>
 8004cdc:	2b70      	cmp	r3, #112	; 0x70
 8004cde:	d87b      	bhi.n	8004dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce0:	2b60      	cmp	r3, #96	; 0x60
 8004ce2:	d050      	beq.n	8004d86 <HAL_TIM_ConfigClockSource+0x11a>
 8004ce4:	2b60      	cmp	r3, #96	; 0x60
 8004ce6:	d877      	bhi.n	8004dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce8:	2b50      	cmp	r3, #80	; 0x50
 8004cea:	d03c      	beq.n	8004d66 <HAL_TIM_ConfigClockSource+0xfa>
 8004cec:	2b50      	cmp	r3, #80	; 0x50
 8004cee:	d873      	bhi.n	8004dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cf0:	2b40      	cmp	r3, #64	; 0x40
 8004cf2:	d058      	beq.n	8004da6 <HAL_TIM_ConfigClockSource+0x13a>
 8004cf4:	2b40      	cmp	r3, #64	; 0x40
 8004cf6:	d86f      	bhi.n	8004dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cf8:	2b30      	cmp	r3, #48	; 0x30
 8004cfa:	d064      	beq.n	8004dc6 <HAL_TIM_ConfigClockSource+0x15a>
 8004cfc:	2b30      	cmp	r3, #48	; 0x30
 8004cfe:	d86b      	bhi.n	8004dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004d00:	2b20      	cmp	r3, #32
 8004d02:	d060      	beq.n	8004dc6 <HAL_TIM_ConfigClockSource+0x15a>
 8004d04:	2b20      	cmp	r3, #32
 8004d06:	d867      	bhi.n	8004dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d05c      	beq.n	8004dc6 <HAL_TIM_ConfigClockSource+0x15a>
 8004d0c:	2b10      	cmp	r3, #16
 8004d0e:	d05a      	beq.n	8004dc6 <HAL_TIM_ConfigClockSource+0x15a>
 8004d10:	e062      	b.n	8004dd8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6818      	ldr	r0, [r3, #0]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	6899      	ldr	r1, [r3, #8]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f000 fb23 	bl	800536c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	609a      	str	r2, [r3, #8]
      break;
 8004d3e:	e04f      	b.n	8004de0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6818      	ldr	r0, [r3, #0]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	6899      	ldr	r1, [r3, #8]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f000 fb0c 	bl	800536c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689a      	ldr	r2, [r3, #8]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d62:	609a      	str	r2, [r3, #8]
      break;
 8004d64:	e03c      	b.n	8004de0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6818      	ldr	r0, [r3, #0]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	6859      	ldr	r1, [r3, #4]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	461a      	mov	r2, r3
 8004d74:	f000 fa80 	bl	8005278 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2150      	movs	r1, #80	; 0x50
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 fad9 	bl	8005336 <TIM_ITRx_SetConfig>
      break;
 8004d84:	e02c      	b.n	8004de0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6818      	ldr	r0, [r3, #0]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	6859      	ldr	r1, [r3, #4]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	461a      	mov	r2, r3
 8004d94:	f000 fa9f 	bl	80052d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2160      	movs	r1, #96	; 0x60
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 fac9 	bl	8005336 <TIM_ITRx_SetConfig>
      break;
 8004da4:	e01c      	b.n	8004de0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6818      	ldr	r0, [r3, #0]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	6859      	ldr	r1, [r3, #4]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	461a      	mov	r2, r3
 8004db4:	f000 fa60 	bl	8005278 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2140      	movs	r1, #64	; 0x40
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 fab9 	bl	8005336 <TIM_ITRx_SetConfig>
      break;
 8004dc4:	e00c      	b.n	8004de0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4619      	mov	r1, r3
 8004dd0:	4610      	mov	r0, r2
 8004dd2:	f000 fab0 	bl	8005336 <TIM_ITRx_SetConfig>
      break;
 8004dd6:	e003      	b.n	8004de0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	73fb      	strb	r3, [r7, #15]
      break;
 8004ddc:	e000      	b.n	8004de0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004dde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b083      	sub	sp, #12
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e02:	bf00      	nop
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b083      	sub	sp, #12
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e16:	bf00      	nop
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e2a:	bf00      	nop
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b083      	sub	sp, #12
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e3e:	bf00      	nop
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b083      	sub	sp, #12
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e52:	bf00      	nop
 8004e54:	370c      	adds	r7, #12
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
	...

08004e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a34      	ldr	r2, [pc, #208]	; (8004f44 <TIM_Base_SetConfig+0xe4>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d00f      	beq.n	8004e98 <TIM_Base_SetConfig+0x38>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e7e:	d00b      	beq.n	8004e98 <TIM_Base_SetConfig+0x38>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a31      	ldr	r2, [pc, #196]	; (8004f48 <TIM_Base_SetConfig+0xe8>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d007      	beq.n	8004e98 <TIM_Base_SetConfig+0x38>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a30      	ldr	r2, [pc, #192]	; (8004f4c <TIM_Base_SetConfig+0xec>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d003      	beq.n	8004e98 <TIM_Base_SetConfig+0x38>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a2f      	ldr	r2, [pc, #188]	; (8004f50 <TIM_Base_SetConfig+0xf0>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d108      	bne.n	8004eaa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a25      	ldr	r2, [pc, #148]	; (8004f44 <TIM_Base_SetConfig+0xe4>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d01b      	beq.n	8004eea <TIM_Base_SetConfig+0x8a>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb8:	d017      	beq.n	8004eea <TIM_Base_SetConfig+0x8a>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a22      	ldr	r2, [pc, #136]	; (8004f48 <TIM_Base_SetConfig+0xe8>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d013      	beq.n	8004eea <TIM_Base_SetConfig+0x8a>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a21      	ldr	r2, [pc, #132]	; (8004f4c <TIM_Base_SetConfig+0xec>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d00f      	beq.n	8004eea <TIM_Base_SetConfig+0x8a>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a20      	ldr	r2, [pc, #128]	; (8004f50 <TIM_Base_SetConfig+0xf0>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d00b      	beq.n	8004eea <TIM_Base_SetConfig+0x8a>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a1f      	ldr	r2, [pc, #124]	; (8004f54 <TIM_Base_SetConfig+0xf4>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d007      	beq.n	8004eea <TIM_Base_SetConfig+0x8a>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a1e      	ldr	r2, [pc, #120]	; (8004f58 <TIM_Base_SetConfig+0xf8>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d003      	beq.n	8004eea <TIM_Base_SetConfig+0x8a>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a1d      	ldr	r2, [pc, #116]	; (8004f5c <TIM_Base_SetConfig+0xfc>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d108      	bne.n	8004efc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a08      	ldr	r2, [pc, #32]	; (8004f44 <TIM_Base_SetConfig+0xe4>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d103      	bne.n	8004f30 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	691a      	ldr	r2, [r3, #16]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	615a      	str	r2, [r3, #20]
}
 8004f36:	bf00      	nop
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	40010000 	.word	0x40010000
 8004f48:	40000400 	.word	0x40000400
 8004f4c:	40000800 	.word	0x40000800
 8004f50:	40000c00 	.word	0x40000c00
 8004f54:	40014000 	.word	0x40014000
 8004f58:	40014400 	.word	0x40014400
 8004f5c:	40014800 	.word	0x40014800

08004f60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b087      	sub	sp, #28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	f023 0201 	bic.w	r2, r3, #1
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f023 0303 	bic.w	r3, r3, #3
 8004f96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f023 0302 	bic.w	r3, r3, #2
 8004fa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a1c      	ldr	r2, [pc, #112]	; (8005028 <TIM_OC1_SetConfig+0xc8>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d10c      	bne.n	8004fd6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f023 0308 	bic.w	r3, r3, #8
 8004fc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f023 0304 	bic.w	r3, r3, #4
 8004fd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a13      	ldr	r2, [pc, #76]	; (8005028 <TIM_OC1_SetConfig+0xc8>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d111      	bne.n	8005002 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fe4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	621a      	str	r2, [r3, #32]
}
 800501c:	bf00      	nop
 800501e:	371c      	adds	r7, #28
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr
 8005028:	40010000 	.word	0x40010000

0800502c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800502c:	b480      	push	{r7}
 800502e:	b087      	sub	sp, #28
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	f023 0210 	bic.w	r2, r3, #16
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800505a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	021b      	lsls	r3, r3, #8
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	4313      	orrs	r3, r2
 800506e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f023 0320 	bic.w	r3, r3, #32
 8005076:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	011b      	lsls	r3, r3, #4
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	4313      	orrs	r3, r2
 8005082:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a1e      	ldr	r2, [pc, #120]	; (8005100 <TIM_OC2_SetConfig+0xd4>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d10d      	bne.n	80050a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005092:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	011b      	lsls	r3, r3, #4
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	4313      	orrs	r3, r2
 800509e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a15      	ldr	r2, [pc, #84]	; (8005100 <TIM_OC2_SetConfig+0xd4>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d113      	bne.n	80050d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	621a      	str	r2, [r3, #32]
}
 80050f2:	bf00      	nop
 80050f4:	371c      	adds	r7, #28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	40010000 	.word	0x40010000

08005104 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005104:	b480      	push	{r7}
 8005106:	b087      	sub	sp, #28
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f023 0303 	bic.w	r3, r3, #3
 800513a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	4313      	orrs	r3, r2
 8005144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800514c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	021b      	lsls	r3, r3, #8
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	4313      	orrs	r3, r2
 8005158:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a1d      	ldr	r2, [pc, #116]	; (80051d4 <TIM_OC3_SetConfig+0xd0>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d10d      	bne.n	800517e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005168:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	021b      	lsls	r3, r3, #8
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	4313      	orrs	r3, r2
 8005174:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800517c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a14      	ldr	r2, [pc, #80]	; (80051d4 <TIM_OC3_SetConfig+0xd0>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d113      	bne.n	80051ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800518c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005194:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	4313      	orrs	r3, r2
 80051a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	011b      	lsls	r3, r3, #4
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	621a      	str	r2, [r3, #32]
}
 80051c8:	bf00      	nop
 80051ca:	371c      	adds	r7, #28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	40010000 	.word	0x40010000

080051d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800520e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	021b      	lsls	r3, r3, #8
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	4313      	orrs	r3, r2
 800521a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005222:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	031b      	lsls	r3, r3, #12
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	4313      	orrs	r3, r2
 800522e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a10      	ldr	r2, [pc, #64]	; (8005274 <TIM_OC4_SetConfig+0x9c>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d109      	bne.n	800524c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800523e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	019b      	lsls	r3, r3, #6
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	4313      	orrs	r3, r2
 800524a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	621a      	str	r2, [r3, #32]
}
 8005266:	bf00      	nop
 8005268:	371c      	adds	r7, #28
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	40010000 	.word	0x40010000

08005278 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005278:	b480      	push	{r7}
 800527a:	b087      	sub	sp, #28
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	f023 0201 	bic.w	r2, r3, #1
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	011b      	lsls	r3, r3, #4
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f023 030a 	bic.w	r3, r3, #10
 80052b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	621a      	str	r2, [r3, #32]
}
 80052ca:	bf00      	nop
 80052cc:	371c      	adds	r7, #28
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b087      	sub	sp, #28
 80052da:	af00      	add	r7, sp, #0
 80052dc:	60f8      	str	r0, [r7, #12]
 80052de:	60b9      	str	r1, [r7, #8]
 80052e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	f023 0210 	bic.w	r2, r3, #16
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005300:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	031b      	lsls	r3, r3, #12
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	4313      	orrs	r3, r2
 800530a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005312:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	011b      	lsls	r3, r3, #4
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	4313      	orrs	r3, r2
 800531c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	621a      	str	r2, [r3, #32]
}
 800532a:	bf00      	nop
 800532c:	371c      	adds	r7, #28
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005336:	b480      	push	{r7}
 8005338:	b085      	sub	sp, #20
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
 800533e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4313      	orrs	r3, r2
 8005354:	f043 0307 	orr.w	r3, r3, #7
 8005358:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	609a      	str	r2, [r3, #8]
}
 8005360:	bf00      	nop
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800536c:	b480      	push	{r7}
 800536e:	b087      	sub	sp, #28
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005386:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	021a      	lsls	r2, r3, #8
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	431a      	orrs	r2, r3
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	4313      	orrs	r3, r2
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	4313      	orrs	r3, r2
 8005398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	609a      	str	r2, [r3, #8]
}
 80053a0:	bf00      	nop
 80053a2:	371c      	adds	r7, #28
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d101      	bne.n	80053c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053c0:	2302      	movs	r3, #2
 80053c2:	e050      	b.n	8005466 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a1c      	ldr	r2, [pc, #112]	; (8005474 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d018      	beq.n	800543a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005410:	d013      	beq.n	800543a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a18      	ldr	r2, [pc, #96]	; (8005478 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d00e      	beq.n	800543a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a16      	ldr	r2, [pc, #88]	; (800547c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d009      	beq.n	800543a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a15      	ldr	r2, [pc, #84]	; (8005480 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d004      	beq.n	800543a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a13      	ldr	r2, [pc, #76]	; (8005484 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d10c      	bne.n	8005454 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005440:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	4313      	orrs	r3, r2
 800544a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	40010000 	.word	0x40010000
 8005478:	40000400 	.word	0x40000400
 800547c:	40000800 	.word	0x40000800
 8005480:	40000c00 	.word	0x40000c00
 8005484:	40014000 	.word	0x40014000

08005488 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <__errno>:
 80054b0:	4b01      	ldr	r3, [pc, #4]	; (80054b8 <__errno+0x8>)
 80054b2:	6818      	ldr	r0, [r3, #0]
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	20000018 	.word	0x20000018

080054bc <__libc_init_array>:
 80054bc:	b570      	push	{r4, r5, r6, lr}
 80054be:	4d0d      	ldr	r5, [pc, #52]	; (80054f4 <__libc_init_array+0x38>)
 80054c0:	4c0d      	ldr	r4, [pc, #52]	; (80054f8 <__libc_init_array+0x3c>)
 80054c2:	1b64      	subs	r4, r4, r5
 80054c4:	10a4      	asrs	r4, r4, #2
 80054c6:	2600      	movs	r6, #0
 80054c8:	42a6      	cmp	r6, r4
 80054ca:	d109      	bne.n	80054e0 <__libc_init_array+0x24>
 80054cc:	4d0b      	ldr	r5, [pc, #44]	; (80054fc <__libc_init_array+0x40>)
 80054ce:	4c0c      	ldr	r4, [pc, #48]	; (8005500 <__libc_init_array+0x44>)
 80054d0:	f001 f866 	bl	80065a0 <_init>
 80054d4:	1b64      	subs	r4, r4, r5
 80054d6:	10a4      	asrs	r4, r4, #2
 80054d8:	2600      	movs	r6, #0
 80054da:	42a6      	cmp	r6, r4
 80054dc:	d105      	bne.n	80054ea <__libc_init_array+0x2e>
 80054de:	bd70      	pop	{r4, r5, r6, pc}
 80054e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80054e4:	4798      	blx	r3
 80054e6:	3601      	adds	r6, #1
 80054e8:	e7ee      	b.n	80054c8 <__libc_init_array+0xc>
 80054ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ee:	4798      	blx	r3
 80054f0:	3601      	adds	r6, #1
 80054f2:	e7f2      	b.n	80054da <__libc_init_array+0x1e>
 80054f4:	08006718 	.word	0x08006718
 80054f8:	08006718 	.word	0x08006718
 80054fc:	08006718 	.word	0x08006718
 8005500:	0800671c 	.word	0x0800671c

08005504 <memcpy>:
 8005504:	440a      	add	r2, r1
 8005506:	4291      	cmp	r1, r2
 8005508:	f100 33ff 	add.w	r3, r0, #4294967295
 800550c:	d100      	bne.n	8005510 <memcpy+0xc>
 800550e:	4770      	bx	lr
 8005510:	b510      	push	{r4, lr}
 8005512:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005516:	f803 4f01 	strb.w	r4, [r3, #1]!
 800551a:	4291      	cmp	r1, r2
 800551c:	d1f9      	bne.n	8005512 <memcpy+0xe>
 800551e:	bd10      	pop	{r4, pc}

08005520 <memset>:
 8005520:	4402      	add	r2, r0
 8005522:	4603      	mov	r3, r0
 8005524:	4293      	cmp	r3, r2
 8005526:	d100      	bne.n	800552a <memset+0xa>
 8005528:	4770      	bx	lr
 800552a:	f803 1b01 	strb.w	r1, [r3], #1
 800552e:	e7f9      	b.n	8005524 <memset+0x4>

08005530 <rand>:
 8005530:	4b16      	ldr	r3, [pc, #88]	; (800558c <rand+0x5c>)
 8005532:	b510      	push	{r4, lr}
 8005534:	681c      	ldr	r4, [r3, #0]
 8005536:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005538:	b9b3      	cbnz	r3, 8005568 <rand+0x38>
 800553a:	2018      	movs	r0, #24
 800553c:	f000 f95e 	bl	80057fc <malloc>
 8005540:	63a0      	str	r0, [r4, #56]	; 0x38
 8005542:	b928      	cbnz	r0, 8005550 <rand+0x20>
 8005544:	4602      	mov	r2, r0
 8005546:	4b12      	ldr	r3, [pc, #72]	; (8005590 <rand+0x60>)
 8005548:	4812      	ldr	r0, [pc, #72]	; (8005594 <rand+0x64>)
 800554a:	214e      	movs	r1, #78	; 0x4e
 800554c:	f000 f82e 	bl	80055ac <__assert_func>
 8005550:	4a11      	ldr	r2, [pc, #68]	; (8005598 <rand+0x68>)
 8005552:	4b12      	ldr	r3, [pc, #72]	; (800559c <rand+0x6c>)
 8005554:	e9c0 2300 	strd	r2, r3, [r0]
 8005558:	4b11      	ldr	r3, [pc, #68]	; (80055a0 <rand+0x70>)
 800555a:	6083      	str	r3, [r0, #8]
 800555c:	230b      	movs	r3, #11
 800555e:	8183      	strh	r3, [r0, #12]
 8005560:	2201      	movs	r2, #1
 8005562:	2300      	movs	r3, #0
 8005564:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005568:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800556a:	4a0e      	ldr	r2, [pc, #56]	; (80055a4 <rand+0x74>)
 800556c:	6920      	ldr	r0, [r4, #16]
 800556e:	6963      	ldr	r3, [r4, #20]
 8005570:	490d      	ldr	r1, [pc, #52]	; (80055a8 <rand+0x78>)
 8005572:	4342      	muls	r2, r0
 8005574:	fb01 2203 	mla	r2, r1, r3, r2
 8005578:	fba0 0101 	umull	r0, r1, r0, r1
 800557c:	1c43      	adds	r3, r0, #1
 800557e:	eb42 0001 	adc.w	r0, r2, r1
 8005582:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8005586:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800558a:	bd10      	pop	{r4, pc}
 800558c:	20000018 	.word	0x20000018
 8005590:	080065cc 	.word	0x080065cc
 8005594:	080065e3 	.word	0x080065e3
 8005598:	abcd330e 	.word	0xabcd330e
 800559c:	e66d1234 	.word	0xe66d1234
 80055a0:	0005deec 	.word	0x0005deec
 80055a4:	5851f42d 	.word	0x5851f42d
 80055a8:	4c957f2d 	.word	0x4c957f2d

080055ac <__assert_func>:
 80055ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80055ae:	4614      	mov	r4, r2
 80055b0:	461a      	mov	r2, r3
 80055b2:	4b09      	ldr	r3, [pc, #36]	; (80055d8 <__assert_func+0x2c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4605      	mov	r5, r0
 80055b8:	68d8      	ldr	r0, [r3, #12]
 80055ba:	b14c      	cbz	r4, 80055d0 <__assert_func+0x24>
 80055bc:	4b07      	ldr	r3, [pc, #28]	; (80055dc <__assert_func+0x30>)
 80055be:	9100      	str	r1, [sp, #0]
 80055c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80055c4:	4906      	ldr	r1, [pc, #24]	; (80055e0 <__assert_func+0x34>)
 80055c6:	462b      	mov	r3, r5
 80055c8:	f000 f8e4 	bl	8005794 <fiprintf>
 80055cc:	f000 fe12 	bl	80061f4 <abort>
 80055d0:	4b04      	ldr	r3, [pc, #16]	; (80055e4 <__assert_func+0x38>)
 80055d2:	461c      	mov	r4, r3
 80055d4:	e7f3      	b.n	80055be <__assert_func+0x12>
 80055d6:	bf00      	nop
 80055d8:	20000018 	.word	0x20000018
 80055dc:	0800663e 	.word	0x0800663e
 80055e0:	0800664b 	.word	0x0800664b
 80055e4:	08006679 	.word	0x08006679

080055e8 <std>:
 80055e8:	2300      	movs	r3, #0
 80055ea:	b510      	push	{r4, lr}
 80055ec:	4604      	mov	r4, r0
 80055ee:	e9c0 3300 	strd	r3, r3, [r0]
 80055f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055f6:	6083      	str	r3, [r0, #8]
 80055f8:	8181      	strh	r1, [r0, #12]
 80055fa:	6643      	str	r3, [r0, #100]	; 0x64
 80055fc:	81c2      	strh	r2, [r0, #14]
 80055fe:	6183      	str	r3, [r0, #24]
 8005600:	4619      	mov	r1, r3
 8005602:	2208      	movs	r2, #8
 8005604:	305c      	adds	r0, #92	; 0x5c
 8005606:	f7ff ff8b 	bl	8005520 <memset>
 800560a:	4b05      	ldr	r3, [pc, #20]	; (8005620 <std+0x38>)
 800560c:	6263      	str	r3, [r4, #36]	; 0x24
 800560e:	4b05      	ldr	r3, [pc, #20]	; (8005624 <std+0x3c>)
 8005610:	62a3      	str	r3, [r4, #40]	; 0x28
 8005612:	4b05      	ldr	r3, [pc, #20]	; (8005628 <std+0x40>)
 8005614:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005616:	4b05      	ldr	r3, [pc, #20]	; (800562c <std+0x44>)
 8005618:	6224      	str	r4, [r4, #32]
 800561a:	6323      	str	r3, [r4, #48]	; 0x30
 800561c:	bd10      	pop	{r4, pc}
 800561e:	bf00      	nop
 8005620:	08005fc9 	.word	0x08005fc9
 8005624:	08005feb 	.word	0x08005feb
 8005628:	08006023 	.word	0x08006023
 800562c:	08006047 	.word	0x08006047

08005630 <_cleanup_r>:
 8005630:	4901      	ldr	r1, [pc, #4]	; (8005638 <_cleanup_r+0x8>)
 8005632:	f000 b8c1 	b.w	80057b8 <_fwalk_reent>
 8005636:	bf00      	nop
 8005638:	08006331 	.word	0x08006331

0800563c <__sfmoreglue>:
 800563c:	b570      	push	{r4, r5, r6, lr}
 800563e:	2268      	movs	r2, #104	; 0x68
 8005640:	1e4d      	subs	r5, r1, #1
 8005642:	4355      	muls	r5, r2
 8005644:	460e      	mov	r6, r1
 8005646:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800564a:	f000 f94b 	bl	80058e4 <_malloc_r>
 800564e:	4604      	mov	r4, r0
 8005650:	b140      	cbz	r0, 8005664 <__sfmoreglue+0x28>
 8005652:	2100      	movs	r1, #0
 8005654:	e9c0 1600 	strd	r1, r6, [r0]
 8005658:	300c      	adds	r0, #12
 800565a:	60a0      	str	r0, [r4, #8]
 800565c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005660:	f7ff ff5e 	bl	8005520 <memset>
 8005664:	4620      	mov	r0, r4
 8005666:	bd70      	pop	{r4, r5, r6, pc}

08005668 <__sfp_lock_acquire>:
 8005668:	4801      	ldr	r0, [pc, #4]	; (8005670 <__sfp_lock_acquire+0x8>)
 800566a:	f000 b8c5 	b.w	80057f8 <__retarget_lock_acquire_recursive>
 800566e:	bf00      	nop
 8005670:	200003ad 	.word	0x200003ad

08005674 <__sfp_lock_release>:
 8005674:	4801      	ldr	r0, [pc, #4]	; (800567c <__sfp_lock_release+0x8>)
 8005676:	f000 b8c0 	b.w	80057fa <__retarget_lock_release_recursive>
 800567a:	bf00      	nop
 800567c:	200003ad 	.word	0x200003ad

08005680 <__sinit_lock_acquire>:
 8005680:	4801      	ldr	r0, [pc, #4]	; (8005688 <__sinit_lock_acquire+0x8>)
 8005682:	f000 b8b9 	b.w	80057f8 <__retarget_lock_acquire_recursive>
 8005686:	bf00      	nop
 8005688:	200003ae 	.word	0x200003ae

0800568c <__sinit_lock_release>:
 800568c:	4801      	ldr	r0, [pc, #4]	; (8005694 <__sinit_lock_release+0x8>)
 800568e:	f000 b8b4 	b.w	80057fa <__retarget_lock_release_recursive>
 8005692:	bf00      	nop
 8005694:	200003ae 	.word	0x200003ae

08005698 <__sinit>:
 8005698:	b510      	push	{r4, lr}
 800569a:	4604      	mov	r4, r0
 800569c:	f7ff fff0 	bl	8005680 <__sinit_lock_acquire>
 80056a0:	69a3      	ldr	r3, [r4, #24]
 80056a2:	b11b      	cbz	r3, 80056ac <__sinit+0x14>
 80056a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056a8:	f7ff bff0 	b.w	800568c <__sinit_lock_release>
 80056ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80056b0:	6523      	str	r3, [r4, #80]	; 0x50
 80056b2:	4b13      	ldr	r3, [pc, #76]	; (8005700 <__sinit+0x68>)
 80056b4:	4a13      	ldr	r2, [pc, #76]	; (8005704 <__sinit+0x6c>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80056ba:	42a3      	cmp	r3, r4
 80056bc:	bf04      	itt	eq
 80056be:	2301      	moveq	r3, #1
 80056c0:	61a3      	streq	r3, [r4, #24]
 80056c2:	4620      	mov	r0, r4
 80056c4:	f000 f820 	bl	8005708 <__sfp>
 80056c8:	6060      	str	r0, [r4, #4]
 80056ca:	4620      	mov	r0, r4
 80056cc:	f000 f81c 	bl	8005708 <__sfp>
 80056d0:	60a0      	str	r0, [r4, #8]
 80056d2:	4620      	mov	r0, r4
 80056d4:	f000 f818 	bl	8005708 <__sfp>
 80056d8:	2200      	movs	r2, #0
 80056da:	60e0      	str	r0, [r4, #12]
 80056dc:	2104      	movs	r1, #4
 80056de:	6860      	ldr	r0, [r4, #4]
 80056e0:	f7ff ff82 	bl	80055e8 <std>
 80056e4:	68a0      	ldr	r0, [r4, #8]
 80056e6:	2201      	movs	r2, #1
 80056e8:	2109      	movs	r1, #9
 80056ea:	f7ff ff7d 	bl	80055e8 <std>
 80056ee:	68e0      	ldr	r0, [r4, #12]
 80056f0:	2202      	movs	r2, #2
 80056f2:	2112      	movs	r1, #18
 80056f4:	f7ff ff78 	bl	80055e8 <std>
 80056f8:	2301      	movs	r3, #1
 80056fa:	61a3      	str	r3, [r4, #24]
 80056fc:	e7d2      	b.n	80056a4 <__sinit+0xc>
 80056fe:	bf00      	nop
 8005700:	080065c8 	.word	0x080065c8
 8005704:	08005631 	.word	0x08005631

08005708 <__sfp>:
 8005708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570a:	4607      	mov	r7, r0
 800570c:	f7ff ffac 	bl	8005668 <__sfp_lock_acquire>
 8005710:	4b1e      	ldr	r3, [pc, #120]	; (800578c <__sfp+0x84>)
 8005712:	681e      	ldr	r6, [r3, #0]
 8005714:	69b3      	ldr	r3, [r6, #24]
 8005716:	b913      	cbnz	r3, 800571e <__sfp+0x16>
 8005718:	4630      	mov	r0, r6
 800571a:	f7ff ffbd 	bl	8005698 <__sinit>
 800571e:	3648      	adds	r6, #72	; 0x48
 8005720:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005724:	3b01      	subs	r3, #1
 8005726:	d503      	bpl.n	8005730 <__sfp+0x28>
 8005728:	6833      	ldr	r3, [r6, #0]
 800572a:	b30b      	cbz	r3, 8005770 <__sfp+0x68>
 800572c:	6836      	ldr	r6, [r6, #0]
 800572e:	e7f7      	b.n	8005720 <__sfp+0x18>
 8005730:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005734:	b9d5      	cbnz	r5, 800576c <__sfp+0x64>
 8005736:	4b16      	ldr	r3, [pc, #88]	; (8005790 <__sfp+0x88>)
 8005738:	60e3      	str	r3, [r4, #12]
 800573a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800573e:	6665      	str	r5, [r4, #100]	; 0x64
 8005740:	f000 f859 	bl	80057f6 <__retarget_lock_init_recursive>
 8005744:	f7ff ff96 	bl	8005674 <__sfp_lock_release>
 8005748:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800574c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005750:	6025      	str	r5, [r4, #0]
 8005752:	61a5      	str	r5, [r4, #24]
 8005754:	2208      	movs	r2, #8
 8005756:	4629      	mov	r1, r5
 8005758:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800575c:	f7ff fee0 	bl	8005520 <memset>
 8005760:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005764:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005768:	4620      	mov	r0, r4
 800576a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800576c:	3468      	adds	r4, #104	; 0x68
 800576e:	e7d9      	b.n	8005724 <__sfp+0x1c>
 8005770:	2104      	movs	r1, #4
 8005772:	4638      	mov	r0, r7
 8005774:	f7ff ff62 	bl	800563c <__sfmoreglue>
 8005778:	4604      	mov	r4, r0
 800577a:	6030      	str	r0, [r6, #0]
 800577c:	2800      	cmp	r0, #0
 800577e:	d1d5      	bne.n	800572c <__sfp+0x24>
 8005780:	f7ff ff78 	bl	8005674 <__sfp_lock_release>
 8005784:	230c      	movs	r3, #12
 8005786:	603b      	str	r3, [r7, #0]
 8005788:	e7ee      	b.n	8005768 <__sfp+0x60>
 800578a:	bf00      	nop
 800578c:	080065c8 	.word	0x080065c8
 8005790:	ffff0001 	.word	0xffff0001

08005794 <fiprintf>:
 8005794:	b40e      	push	{r1, r2, r3}
 8005796:	b503      	push	{r0, r1, lr}
 8005798:	4601      	mov	r1, r0
 800579a:	ab03      	add	r3, sp, #12
 800579c:	4805      	ldr	r0, [pc, #20]	; (80057b4 <fiprintf+0x20>)
 800579e:	f853 2b04 	ldr.w	r2, [r3], #4
 80057a2:	6800      	ldr	r0, [r0, #0]
 80057a4:	9301      	str	r3, [sp, #4]
 80057a6:	f000 f93b 	bl	8005a20 <_vfiprintf_r>
 80057aa:	b002      	add	sp, #8
 80057ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80057b0:	b003      	add	sp, #12
 80057b2:	4770      	bx	lr
 80057b4:	20000018 	.word	0x20000018

080057b8 <_fwalk_reent>:
 80057b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057bc:	4606      	mov	r6, r0
 80057be:	4688      	mov	r8, r1
 80057c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80057c4:	2700      	movs	r7, #0
 80057c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057ca:	f1b9 0901 	subs.w	r9, r9, #1
 80057ce:	d505      	bpl.n	80057dc <_fwalk_reent+0x24>
 80057d0:	6824      	ldr	r4, [r4, #0]
 80057d2:	2c00      	cmp	r4, #0
 80057d4:	d1f7      	bne.n	80057c6 <_fwalk_reent+0xe>
 80057d6:	4638      	mov	r0, r7
 80057d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057dc:	89ab      	ldrh	r3, [r5, #12]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d907      	bls.n	80057f2 <_fwalk_reent+0x3a>
 80057e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057e6:	3301      	adds	r3, #1
 80057e8:	d003      	beq.n	80057f2 <_fwalk_reent+0x3a>
 80057ea:	4629      	mov	r1, r5
 80057ec:	4630      	mov	r0, r6
 80057ee:	47c0      	blx	r8
 80057f0:	4307      	orrs	r7, r0
 80057f2:	3568      	adds	r5, #104	; 0x68
 80057f4:	e7e9      	b.n	80057ca <_fwalk_reent+0x12>

080057f6 <__retarget_lock_init_recursive>:
 80057f6:	4770      	bx	lr

080057f8 <__retarget_lock_acquire_recursive>:
 80057f8:	4770      	bx	lr

080057fa <__retarget_lock_release_recursive>:
 80057fa:	4770      	bx	lr

080057fc <malloc>:
 80057fc:	4b02      	ldr	r3, [pc, #8]	; (8005808 <malloc+0xc>)
 80057fe:	4601      	mov	r1, r0
 8005800:	6818      	ldr	r0, [r3, #0]
 8005802:	f000 b86f 	b.w	80058e4 <_malloc_r>
 8005806:	bf00      	nop
 8005808:	20000018 	.word	0x20000018

0800580c <_free_r>:
 800580c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800580e:	2900      	cmp	r1, #0
 8005810:	d044      	beq.n	800589c <_free_r+0x90>
 8005812:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005816:	9001      	str	r0, [sp, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	f1a1 0404 	sub.w	r4, r1, #4
 800581e:	bfb8      	it	lt
 8005820:	18e4      	addlt	r4, r4, r3
 8005822:	f000 fe39 	bl	8006498 <__malloc_lock>
 8005826:	4a1e      	ldr	r2, [pc, #120]	; (80058a0 <_free_r+0x94>)
 8005828:	9801      	ldr	r0, [sp, #4]
 800582a:	6813      	ldr	r3, [r2, #0]
 800582c:	b933      	cbnz	r3, 800583c <_free_r+0x30>
 800582e:	6063      	str	r3, [r4, #4]
 8005830:	6014      	str	r4, [r2, #0]
 8005832:	b003      	add	sp, #12
 8005834:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005838:	f000 be34 	b.w	80064a4 <__malloc_unlock>
 800583c:	42a3      	cmp	r3, r4
 800583e:	d908      	bls.n	8005852 <_free_r+0x46>
 8005840:	6825      	ldr	r5, [r4, #0]
 8005842:	1961      	adds	r1, r4, r5
 8005844:	428b      	cmp	r3, r1
 8005846:	bf01      	itttt	eq
 8005848:	6819      	ldreq	r1, [r3, #0]
 800584a:	685b      	ldreq	r3, [r3, #4]
 800584c:	1949      	addeq	r1, r1, r5
 800584e:	6021      	streq	r1, [r4, #0]
 8005850:	e7ed      	b.n	800582e <_free_r+0x22>
 8005852:	461a      	mov	r2, r3
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	b10b      	cbz	r3, 800585c <_free_r+0x50>
 8005858:	42a3      	cmp	r3, r4
 800585a:	d9fa      	bls.n	8005852 <_free_r+0x46>
 800585c:	6811      	ldr	r1, [r2, #0]
 800585e:	1855      	adds	r5, r2, r1
 8005860:	42a5      	cmp	r5, r4
 8005862:	d10b      	bne.n	800587c <_free_r+0x70>
 8005864:	6824      	ldr	r4, [r4, #0]
 8005866:	4421      	add	r1, r4
 8005868:	1854      	adds	r4, r2, r1
 800586a:	42a3      	cmp	r3, r4
 800586c:	6011      	str	r1, [r2, #0]
 800586e:	d1e0      	bne.n	8005832 <_free_r+0x26>
 8005870:	681c      	ldr	r4, [r3, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	6053      	str	r3, [r2, #4]
 8005876:	4421      	add	r1, r4
 8005878:	6011      	str	r1, [r2, #0]
 800587a:	e7da      	b.n	8005832 <_free_r+0x26>
 800587c:	d902      	bls.n	8005884 <_free_r+0x78>
 800587e:	230c      	movs	r3, #12
 8005880:	6003      	str	r3, [r0, #0]
 8005882:	e7d6      	b.n	8005832 <_free_r+0x26>
 8005884:	6825      	ldr	r5, [r4, #0]
 8005886:	1961      	adds	r1, r4, r5
 8005888:	428b      	cmp	r3, r1
 800588a:	bf04      	itt	eq
 800588c:	6819      	ldreq	r1, [r3, #0]
 800588e:	685b      	ldreq	r3, [r3, #4]
 8005890:	6063      	str	r3, [r4, #4]
 8005892:	bf04      	itt	eq
 8005894:	1949      	addeq	r1, r1, r5
 8005896:	6021      	streq	r1, [r4, #0]
 8005898:	6054      	str	r4, [r2, #4]
 800589a:	e7ca      	b.n	8005832 <_free_r+0x26>
 800589c:	b003      	add	sp, #12
 800589e:	bd30      	pop	{r4, r5, pc}
 80058a0:	200003b0 	.word	0x200003b0

080058a4 <sbrk_aligned>:
 80058a4:	b570      	push	{r4, r5, r6, lr}
 80058a6:	4e0e      	ldr	r6, [pc, #56]	; (80058e0 <sbrk_aligned+0x3c>)
 80058a8:	460c      	mov	r4, r1
 80058aa:	6831      	ldr	r1, [r6, #0]
 80058ac:	4605      	mov	r5, r0
 80058ae:	b911      	cbnz	r1, 80058b6 <sbrk_aligned+0x12>
 80058b0:	f000 fb7a 	bl	8005fa8 <_sbrk_r>
 80058b4:	6030      	str	r0, [r6, #0]
 80058b6:	4621      	mov	r1, r4
 80058b8:	4628      	mov	r0, r5
 80058ba:	f000 fb75 	bl	8005fa8 <_sbrk_r>
 80058be:	1c43      	adds	r3, r0, #1
 80058c0:	d00a      	beq.n	80058d8 <sbrk_aligned+0x34>
 80058c2:	1cc4      	adds	r4, r0, #3
 80058c4:	f024 0403 	bic.w	r4, r4, #3
 80058c8:	42a0      	cmp	r0, r4
 80058ca:	d007      	beq.n	80058dc <sbrk_aligned+0x38>
 80058cc:	1a21      	subs	r1, r4, r0
 80058ce:	4628      	mov	r0, r5
 80058d0:	f000 fb6a 	bl	8005fa8 <_sbrk_r>
 80058d4:	3001      	adds	r0, #1
 80058d6:	d101      	bne.n	80058dc <sbrk_aligned+0x38>
 80058d8:	f04f 34ff 	mov.w	r4, #4294967295
 80058dc:	4620      	mov	r0, r4
 80058de:	bd70      	pop	{r4, r5, r6, pc}
 80058e0:	200003b4 	.word	0x200003b4

080058e4 <_malloc_r>:
 80058e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058e8:	1ccd      	adds	r5, r1, #3
 80058ea:	f025 0503 	bic.w	r5, r5, #3
 80058ee:	3508      	adds	r5, #8
 80058f0:	2d0c      	cmp	r5, #12
 80058f2:	bf38      	it	cc
 80058f4:	250c      	movcc	r5, #12
 80058f6:	2d00      	cmp	r5, #0
 80058f8:	4607      	mov	r7, r0
 80058fa:	db01      	blt.n	8005900 <_malloc_r+0x1c>
 80058fc:	42a9      	cmp	r1, r5
 80058fe:	d905      	bls.n	800590c <_malloc_r+0x28>
 8005900:	230c      	movs	r3, #12
 8005902:	603b      	str	r3, [r7, #0]
 8005904:	2600      	movs	r6, #0
 8005906:	4630      	mov	r0, r6
 8005908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800590c:	4e2e      	ldr	r6, [pc, #184]	; (80059c8 <_malloc_r+0xe4>)
 800590e:	f000 fdc3 	bl	8006498 <__malloc_lock>
 8005912:	6833      	ldr	r3, [r6, #0]
 8005914:	461c      	mov	r4, r3
 8005916:	bb34      	cbnz	r4, 8005966 <_malloc_r+0x82>
 8005918:	4629      	mov	r1, r5
 800591a:	4638      	mov	r0, r7
 800591c:	f7ff ffc2 	bl	80058a4 <sbrk_aligned>
 8005920:	1c43      	adds	r3, r0, #1
 8005922:	4604      	mov	r4, r0
 8005924:	d14d      	bne.n	80059c2 <_malloc_r+0xde>
 8005926:	6834      	ldr	r4, [r6, #0]
 8005928:	4626      	mov	r6, r4
 800592a:	2e00      	cmp	r6, #0
 800592c:	d140      	bne.n	80059b0 <_malloc_r+0xcc>
 800592e:	6823      	ldr	r3, [r4, #0]
 8005930:	4631      	mov	r1, r6
 8005932:	4638      	mov	r0, r7
 8005934:	eb04 0803 	add.w	r8, r4, r3
 8005938:	f000 fb36 	bl	8005fa8 <_sbrk_r>
 800593c:	4580      	cmp	r8, r0
 800593e:	d13a      	bne.n	80059b6 <_malloc_r+0xd2>
 8005940:	6821      	ldr	r1, [r4, #0]
 8005942:	3503      	adds	r5, #3
 8005944:	1a6d      	subs	r5, r5, r1
 8005946:	f025 0503 	bic.w	r5, r5, #3
 800594a:	3508      	adds	r5, #8
 800594c:	2d0c      	cmp	r5, #12
 800594e:	bf38      	it	cc
 8005950:	250c      	movcc	r5, #12
 8005952:	4629      	mov	r1, r5
 8005954:	4638      	mov	r0, r7
 8005956:	f7ff ffa5 	bl	80058a4 <sbrk_aligned>
 800595a:	3001      	adds	r0, #1
 800595c:	d02b      	beq.n	80059b6 <_malloc_r+0xd2>
 800595e:	6823      	ldr	r3, [r4, #0]
 8005960:	442b      	add	r3, r5
 8005962:	6023      	str	r3, [r4, #0]
 8005964:	e00e      	b.n	8005984 <_malloc_r+0xa0>
 8005966:	6822      	ldr	r2, [r4, #0]
 8005968:	1b52      	subs	r2, r2, r5
 800596a:	d41e      	bmi.n	80059aa <_malloc_r+0xc6>
 800596c:	2a0b      	cmp	r2, #11
 800596e:	d916      	bls.n	800599e <_malloc_r+0xba>
 8005970:	1961      	adds	r1, r4, r5
 8005972:	42a3      	cmp	r3, r4
 8005974:	6025      	str	r5, [r4, #0]
 8005976:	bf18      	it	ne
 8005978:	6059      	strne	r1, [r3, #4]
 800597a:	6863      	ldr	r3, [r4, #4]
 800597c:	bf08      	it	eq
 800597e:	6031      	streq	r1, [r6, #0]
 8005980:	5162      	str	r2, [r4, r5]
 8005982:	604b      	str	r3, [r1, #4]
 8005984:	4638      	mov	r0, r7
 8005986:	f104 060b 	add.w	r6, r4, #11
 800598a:	f000 fd8b 	bl	80064a4 <__malloc_unlock>
 800598e:	f026 0607 	bic.w	r6, r6, #7
 8005992:	1d23      	adds	r3, r4, #4
 8005994:	1af2      	subs	r2, r6, r3
 8005996:	d0b6      	beq.n	8005906 <_malloc_r+0x22>
 8005998:	1b9b      	subs	r3, r3, r6
 800599a:	50a3      	str	r3, [r4, r2]
 800599c:	e7b3      	b.n	8005906 <_malloc_r+0x22>
 800599e:	6862      	ldr	r2, [r4, #4]
 80059a0:	42a3      	cmp	r3, r4
 80059a2:	bf0c      	ite	eq
 80059a4:	6032      	streq	r2, [r6, #0]
 80059a6:	605a      	strne	r2, [r3, #4]
 80059a8:	e7ec      	b.n	8005984 <_malloc_r+0xa0>
 80059aa:	4623      	mov	r3, r4
 80059ac:	6864      	ldr	r4, [r4, #4]
 80059ae:	e7b2      	b.n	8005916 <_malloc_r+0x32>
 80059b0:	4634      	mov	r4, r6
 80059b2:	6876      	ldr	r6, [r6, #4]
 80059b4:	e7b9      	b.n	800592a <_malloc_r+0x46>
 80059b6:	230c      	movs	r3, #12
 80059b8:	603b      	str	r3, [r7, #0]
 80059ba:	4638      	mov	r0, r7
 80059bc:	f000 fd72 	bl	80064a4 <__malloc_unlock>
 80059c0:	e7a1      	b.n	8005906 <_malloc_r+0x22>
 80059c2:	6025      	str	r5, [r4, #0]
 80059c4:	e7de      	b.n	8005984 <_malloc_r+0xa0>
 80059c6:	bf00      	nop
 80059c8:	200003b0 	.word	0x200003b0

080059cc <__sfputc_r>:
 80059cc:	6893      	ldr	r3, [r2, #8]
 80059ce:	3b01      	subs	r3, #1
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	b410      	push	{r4}
 80059d4:	6093      	str	r3, [r2, #8]
 80059d6:	da08      	bge.n	80059ea <__sfputc_r+0x1e>
 80059d8:	6994      	ldr	r4, [r2, #24]
 80059da:	42a3      	cmp	r3, r4
 80059dc:	db01      	blt.n	80059e2 <__sfputc_r+0x16>
 80059de:	290a      	cmp	r1, #10
 80059e0:	d103      	bne.n	80059ea <__sfputc_r+0x1e>
 80059e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059e6:	f000 bb33 	b.w	8006050 <__swbuf_r>
 80059ea:	6813      	ldr	r3, [r2, #0]
 80059ec:	1c58      	adds	r0, r3, #1
 80059ee:	6010      	str	r0, [r2, #0]
 80059f0:	7019      	strb	r1, [r3, #0]
 80059f2:	4608      	mov	r0, r1
 80059f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <__sfputs_r>:
 80059fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059fc:	4606      	mov	r6, r0
 80059fe:	460f      	mov	r7, r1
 8005a00:	4614      	mov	r4, r2
 8005a02:	18d5      	adds	r5, r2, r3
 8005a04:	42ac      	cmp	r4, r5
 8005a06:	d101      	bne.n	8005a0c <__sfputs_r+0x12>
 8005a08:	2000      	movs	r0, #0
 8005a0a:	e007      	b.n	8005a1c <__sfputs_r+0x22>
 8005a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a10:	463a      	mov	r2, r7
 8005a12:	4630      	mov	r0, r6
 8005a14:	f7ff ffda 	bl	80059cc <__sfputc_r>
 8005a18:	1c43      	adds	r3, r0, #1
 8005a1a:	d1f3      	bne.n	8005a04 <__sfputs_r+0xa>
 8005a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a20 <_vfiprintf_r>:
 8005a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a24:	460d      	mov	r5, r1
 8005a26:	b09d      	sub	sp, #116	; 0x74
 8005a28:	4614      	mov	r4, r2
 8005a2a:	4698      	mov	r8, r3
 8005a2c:	4606      	mov	r6, r0
 8005a2e:	b118      	cbz	r0, 8005a38 <_vfiprintf_r+0x18>
 8005a30:	6983      	ldr	r3, [r0, #24]
 8005a32:	b90b      	cbnz	r3, 8005a38 <_vfiprintf_r+0x18>
 8005a34:	f7ff fe30 	bl	8005698 <__sinit>
 8005a38:	4b89      	ldr	r3, [pc, #548]	; (8005c60 <_vfiprintf_r+0x240>)
 8005a3a:	429d      	cmp	r5, r3
 8005a3c:	d11b      	bne.n	8005a76 <_vfiprintf_r+0x56>
 8005a3e:	6875      	ldr	r5, [r6, #4]
 8005a40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a42:	07d9      	lsls	r1, r3, #31
 8005a44:	d405      	bmi.n	8005a52 <_vfiprintf_r+0x32>
 8005a46:	89ab      	ldrh	r3, [r5, #12]
 8005a48:	059a      	lsls	r2, r3, #22
 8005a4a:	d402      	bmi.n	8005a52 <_vfiprintf_r+0x32>
 8005a4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a4e:	f7ff fed3 	bl	80057f8 <__retarget_lock_acquire_recursive>
 8005a52:	89ab      	ldrh	r3, [r5, #12]
 8005a54:	071b      	lsls	r3, r3, #28
 8005a56:	d501      	bpl.n	8005a5c <_vfiprintf_r+0x3c>
 8005a58:	692b      	ldr	r3, [r5, #16]
 8005a5a:	b9eb      	cbnz	r3, 8005a98 <_vfiprintf_r+0x78>
 8005a5c:	4629      	mov	r1, r5
 8005a5e:	4630      	mov	r0, r6
 8005a60:	f000 fb5a 	bl	8006118 <__swsetup_r>
 8005a64:	b1c0      	cbz	r0, 8005a98 <_vfiprintf_r+0x78>
 8005a66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a68:	07dc      	lsls	r4, r3, #31
 8005a6a:	d50e      	bpl.n	8005a8a <_vfiprintf_r+0x6a>
 8005a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a70:	b01d      	add	sp, #116	; 0x74
 8005a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a76:	4b7b      	ldr	r3, [pc, #492]	; (8005c64 <_vfiprintf_r+0x244>)
 8005a78:	429d      	cmp	r5, r3
 8005a7a:	d101      	bne.n	8005a80 <_vfiprintf_r+0x60>
 8005a7c:	68b5      	ldr	r5, [r6, #8]
 8005a7e:	e7df      	b.n	8005a40 <_vfiprintf_r+0x20>
 8005a80:	4b79      	ldr	r3, [pc, #484]	; (8005c68 <_vfiprintf_r+0x248>)
 8005a82:	429d      	cmp	r5, r3
 8005a84:	bf08      	it	eq
 8005a86:	68f5      	ldreq	r5, [r6, #12]
 8005a88:	e7da      	b.n	8005a40 <_vfiprintf_r+0x20>
 8005a8a:	89ab      	ldrh	r3, [r5, #12]
 8005a8c:	0598      	lsls	r0, r3, #22
 8005a8e:	d4ed      	bmi.n	8005a6c <_vfiprintf_r+0x4c>
 8005a90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a92:	f7ff feb2 	bl	80057fa <__retarget_lock_release_recursive>
 8005a96:	e7e9      	b.n	8005a6c <_vfiprintf_r+0x4c>
 8005a98:	2300      	movs	r3, #0
 8005a9a:	9309      	str	r3, [sp, #36]	; 0x24
 8005a9c:	2320      	movs	r3, #32
 8005a9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005aa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005aa6:	2330      	movs	r3, #48	; 0x30
 8005aa8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005c6c <_vfiprintf_r+0x24c>
 8005aac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ab0:	f04f 0901 	mov.w	r9, #1
 8005ab4:	4623      	mov	r3, r4
 8005ab6:	469a      	mov	sl, r3
 8005ab8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005abc:	b10a      	cbz	r2, 8005ac2 <_vfiprintf_r+0xa2>
 8005abe:	2a25      	cmp	r2, #37	; 0x25
 8005ac0:	d1f9      	bne.n	8005ab6 <_vfiprintf_r+0x96>
 8005ac2:	ebba 0b04 	subs.w	fp, sl, r4
 8005ac6:	d00b      	beq.n	8005ae0 <_vfiprintf_r+0xc0>
 8005ac8:	465b      	mov	r3, fp
 8005aca:	4622      	mov	r2, r4
 8005acc:	4629      	mov	r1, r5
 8005ace:	4630      	mov	r0, r6
 8005ad0:	f7ff ff93 	bl	80059fa <__sfputs_r>
 8005ad4:	3001      	adds	r0, #1
 8005ad6:	f000 80aa 	beq.w	8005c2e <_vfiprintf_r+0x20e>
 8005ada:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005adc:	445a      	add	r2, fp
 8005ade:	9209      	str	r2, [sp, #36]	; 0x24
 8005ae0:	f89a 3000 	ldrb.w	r3, [sl]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f000 80a2 	beq.w	8005c2e <_vfiprintf_r+0x20e>
 8005aea:	2300      	movs	r3, #0
 8005aec:	f04f 32ff 	mov.w	r2, #4294967295
 8005af0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005af4:	f10a 0a01 	add.w	sl, sl, #1
 8005af8:	9304      	str	r3, [sp, #16]
 8005afa:	9307      	str	r3, [sp, #28]
 8005afc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b00:	931a      	str	r3, [sp, #104]	; 0x68
 8005b02:	4654      	mov	r4, sl
 8005b04:	2205      	movs	r2, #5
 8005b06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b0a:	4858      	ldr	r0, [pc, #352]	; (8005c6c <_vfiprintf_r+0x24c>)
 8005b0c:	f7fa fb68 	bl	80001e0 <memchr>
 8005b10:	9a04      	ldr	r2, [sp, #16]
 8005b12:	b9d8      	cbnz	r0, 8005b4c <_vfiprintf_r+0x12c>
 8005b14:	06d1      	lsls	r1, r2, #27
 8005b16:	bf44      	itt	mi
 8005b18:	2320      	movmi	r3, #32
 8005b1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b1e:	0713      	lsls	r3, r2, #28
 8005b20:	bf44      	itt	mi
 8005b22:	232b      	movmi	r3, #43	; 0x2b
 8005b24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b28:	f89a 3000 	ldrb.w	r3, [sl]
 8005b2c:	2b2a      	cmp	r3, #42	; 0x2a
 8005b2e:	d015      	beq.n	8005b5c <_vfiprintf_r+0x13c>
 8005b30:	9a07      	ldr	r2, [sp, #28]
 8005b32:	4654      	mov	r4, sl
 8005b34:	2000      	movs	r0, #0
 8005b36:	f04f 0c0a 	mov.w	ip, #10
 8005b3a:	4621      	mov	r1, r4
 8005b3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b40:	3b30      	subs	r3, #48	; 0x30
 8005b42:	2b09      	cmp	r3, #9
 8005b44:	d94e      	bls.n	8005be4 <_vfiprintf_r+0x1c4>
 8005b46:	b1b0      	cbz	r0, 8005b76 <_vfiprintf_r+0x156>
 8005b48:	9207      	str	r2, [sp, #28]
 8005b4a:	e014      	b.n	8005b76 <_vfiprintf_r+0x156>
 8005b4c:	eba0 0308 	sub.w	r3, r0, r8
 8005b50:	fa09 f303 	lsl.w	r3, r9, r3
 8005b54:	4313      	orrs	r3, r2
 8005b56:	9304      	str	r3, [sp, #16]
 8005b58:	46a2      	mov	sl, r4
 8005b5a:	e7d2      	b.n	8005b02 <_vfiprintf_r+0xe2>
 8005b5c:	9b03      	ldr	r3, [sp, #12]
 8005b5e:	1d19      	adds	r1, r3, #4
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	9103      	str	r1, [sp, #12]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	bfbb      	ittet	lt
 8005b68:	425b      	neglt	r3, r3
 8005b6a:	f042 0202 	orrlt.w	r2, r2, #2
 8005b6e:	9307      	strge	r3, [sp, #28]
 8005b70:	9307      	strlt	r3, [sp, #28]
 8005b72:	bfb8      	it	lt
 8005b74:	9204      	strlt	r2, [sp, #16]
 8005b76:	7823      	ldrb	r3, [r4, #0]
 8005b78:	2b2e      	cmp	r3, #46	; 0x2e
 8005b7a:	d10c      	bne.n	8005b96 <_vfiprintf_r+0x176>
 8005b7c:	7863      	ldrb	r3, [r4, #1]
 8005b7e:	2b2a      	cmp	r3, #42	; 0x2a
 8005b80:	d135      	bne.n	8005bee <_vfiprintf_r+0x1ce>
 8005b82:	9b03      	ldr	r3, [sp, #12]
 8005b84:	1d1a      	adds	r2, r3, #4
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	9203      	str	r2, [sp, #12]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	bfb8      	it	lt
 8005b8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b92:	3402      	adds	r4, #2
 8005b94:	9305      	str	r3, [sp, #20]
 8005b96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005c7c <_vfiprintf_r+0x25c>
 8005b9a:	7821      	ldrb	r1, [r4, #0]
 8005b9c:	2203      	movs	r2, #3
 8005b9e:	4650      	mov	r0, sl
 8005ba0:	f7fa fb1e 	bl	80001e0 <memchr>
 8005ba4:	b140      	cbz	r0, 8005bb8 <_vfiprintf_r+0x198>
 8005ba6:	2340      	movs	r3, #64	; 0x40
 8005ba8:	eba0 000a 	sub.w	r0, r0, sl
 8005bac:	fa03 f000 	lsl.w	r0, r3, r0
 8005bb0:	9b04      	ldr	r3, [sp, #16]
 8005bb2:	4303      	orrs	r3, r0
 8005bb4:	3401      	adds	r4, #1
 8005bb6:	9304      	str	r3, [sp, #16]
 8005bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bbc:	482c      	ldr	r0, [pc, #176]	; (8005c70 <_vfiprintf_r+0x250>)
 8005bbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bc2:	2206      	movs	r2, #6
 8005bc4:	f7fa fb0c 	bl	80001e0 <memchr>
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	d03f      	beq.n	8005c4c <_vfiprintf_r+0x22c>
 8005bcc:	4b29      	ldr	r3, [pc, #164]	; (8005c74 <_vfiprintf_r+0x254>)
 8005bce:	bb1b      	cbnz	r3, 8005c18 <_vfiprintf_r+0x1f8>
 8005bd0:	9b03      	ldr	r3, [sp, #12]
 8005bd2:	3307      	adds	r3, #7
 8005bd4:	f023 0307 	bic.w	r3, r3, #7
 8005bd8:	3308      	adds	r3, #8
 8005bda:	9303      	str	r3, [sp, #12]
 8005bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bde:	443b      	add	r3, r7
 8005be0:	9309      	str	r3, [sp, #36]	; 0x24
 8005be2:	e767      	b.n	8005ab4 <_vfiprintf_r+0x94>
 8005be4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005be8:	460c      	mov	r4, r1
 8005bea:	2001      	movs	r0, #1
 8005bec:	e7a5      	b.n	8005b3a <_vfiprintf_r+0x11a>
 8005bee:	2300      	movs	r3, #0
 8005bf0:	3401      	adds	r4, #1
 8005bf2:	9305      	str	r3, [sp, #20]
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	f04f 0c0a 	mov.w	ip, #10
 8005bfa:	4620      	mov	r0, r4
 8005bfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c00:	3a30      	subs	r2, #48	; 0x30
 8005c02:	2a09      	cmp	r2, #9
 8005c04:	d903      	bls.n	8005c0e <_vfiprintf_r+0x1ee>
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0c5      	beq.n	8005b96 <_vfiprintf_r+0x176>
 8005c0a:	9105      	str	r1, [sp, #20]
 8005c0c:	e7c3      	b.n	8005b96 <_vfiprintf_r+0x176>
 8005c0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c12:	4604      	mov	r4, r0
 8005c14:	2301      	movs	r3, #1
 8005c16:	e7f0      	b.n	8005bfa <_vfiprintf_r+0x1da>
 8005c18:	ab03      	add	r3, sp, #12
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	462a      	mov	r2, r5
 8005c1e:	4b16      	ldr	r3, [pc, #88]	; (8005c78 <_vfiprintf_r+0x258>)
 8005c20:	a904      	add	r1, sp, #16
 8005c22:	4630      	mov	r0, r6
 8005c24:	f3af 8000 	nop.w
 8005c28:	4607      	mov	r7, r0
 8005c2a:	1c78      	adds	r0, r7, #1
 8005c2c:	d1d6      	bne.n	8005bdc <_vfiprintf_r+0x1bc>
 8005c2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c30:	07d9      	lsls	r1, r3, #31
 8005c32:	d405      	bmi.n	8005c40 <_vfiprintf_r+0x220>
 8005c34:	89ab      	ldrh	r3, [r5, #12]
 8005c36:	059a      	lsls	r2, r3, #22
 8005c38:	d402      	bmi.n	8005c40 <_vfiprintf_r+0x220>
 8005c3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c3c:	f7ff fddd 	bl	80057fa <__retarget_lock_release_recursive>
 8005c40:	89ab      	ldrh	r3, [r5, #12]
 8005c42:	065b      	lsls	r3, r3, #25
 8005c44:	f53f af12 	bmi.w	8005a6c <_vfiprintf_r+0x4c>
 8005c48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c4a:	e711      	b.n	8005a70 <_vfiprintf_r+0x50>
 8005c4c:	ab03      	add	r3, sp, #12
 8005c4e:	9300      	str	r3, [sp, #0]
 8005c50:	462a      	mov	r2, r5
 8005c52:	4b09      	ldr	r3, [pc, #36]	; (8005c78 <_vfiprintf_r+0x258>)
 8005c54:	a904      	add	r1, sp, #16
 8005c56:	4630      	mov	r0, r6
 8005c58:	f000 f880 	bl	8005d5c <_printf_i>
 8005c5c:	e7e4      	b.n	8005c28 <_vfiprintf_r+0x208>
 8005c5e:	bf00      	nop
 8005c60:	0800669c 	.word	0x0800669c
 8005c64:	080066bc 	.word	0x080066bc
 8005c68:	0800667c 	.word	0x0800667c
 8005c6c:	080066dc 	.word	0x080066dc
 8005c70:	080066e6 	.word	0x080066e6
 8005c74:	00000000 	.word	0x00000000
 8005c78:	080059fb 	.word	0x080059fb
 8005c7c:	080066e2 	.word	0x080066e2

08005c80 <_printf_common>:
 8005c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c84:	4616      	mov	r6, r2
 8005c86:	4699      	mov	r9, r3
 8005c88:	688a      	ldr	r2, [r1, #8]
 8005c8a:	690b      	ldr	r3, [r1, #16]
 8005c8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c90:	4293      	cmp	r3, r2
 8005c92:	bfb8      	it	lt
 8005c94:	4613      	movlt	r3, r2
 8005c96:	6033      	str	r3, [r6, #0]
 8005c98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c9c:	4607      	mov	r7, r0
 8005c9e:	460c      	mov	r4, r1
 8005ca0:	b10a      	cbz	r2, 8005ca6 <_printf_common+0x26>
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	6033      	str	r3, [r6, #0]
 8005ca6:	6823      	ldr	r3, [r4, #0]
 8005ca8:	0699      	lsls	r1, r3, #26
 8005caa:	bf42      	ittt	mi
 8005cac:	6833      	ldrmi	r3, [r6, #0]
 8005cae:	3302      	addmi	r3, #2
 8005cb0:	6033      	strmi	r3, [r6, #0]
 8005cb2:	6825      	ldr	r5, [r4, #0]
 8005cb4:	f015 0506 	ands.w	r5, r5, #6
 8005cb8:	d106      	bne.n	8005cc8 <_printf_common+0x48>
 8005cba:	f104 0a19 	add.w	sl, r4, #25
 8005cbe:	68e3      	ldr	r3, [r4, #12]
 8005cc0:	6832      	ldr	r2, [r6, #0]
 8005cc2:	1a9b      	subs	r3, r3, r2
 8005cc4:	42ab      	cmp	r3, r5
 8005cc6:	dc26      	bgt.n	8005d16 <_printf_common+0x96>
 8005cc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ccc:	1e13      	subs	r3, r2, #0
 8005cce:	6822      	ldr	r2, [r4, #0]
 8005cd0:	bf18      	it	ne
 8005cd2:	2301      	movne	r3, #1
 8005cd4:	0692      	lsls	r2, r2, #26
 8005cd6:	d42b      	bmi.n	8005d30 <_printf_common+0xb0>
 8005cd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cdc:	4649      	mov	r1, r9
 8005cde:	4638      	mov	r0, r7
 8005ce0:	47c0      	blx	r8
 8005ce2:	3001      	adds	r0, #1
 8005ce4:	d01e      	beq.n	8005d24 <_printf_common+0xa4>
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	68e5      	ldr	r5, [r4, #12]
 8005cea:	6832      	ldr	r2, [r6, #0]
 8005cec:	f003 0306 	and.w	r3, r3, #6
 8005cf0:	2b04      	cmp	r3, #4
 8005cf2:	bf08      	it	eq
 8005cf4:	1aad      	subeq	r5, r5, r2
 8005cf6:	68a3      	ldr	r3, [r4, #8]
 8005cf8:	6922      	ldr	r2, [r4, #16]
 8005cfa:	bf0c      	ite	eq
 8005cfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d00:	2500      	movne	r5, #0
 8005d02:	4293      	cmp	r3, r2
 8005d04:	bfc4      	itt	gt
 8005d06:	1a9b      	subgt	r3, r3, r2
 8005d08:	18ed      	addgt	r5, r5, r3
 8005d0a:	2600      	movs	r6, #0
 8005d0c:	341a      	adds	r4, #26
 8005d0e:	42b5      	cmp	r5, r6
 8005d10:	d11a      	bne.n	8005d48 <_printf_common+0xc8>
 8005d12:	2000      	movs	r0, #0
 8005d14:	e008      	b.n	8005d28 <_printf_common+0xa8>
 8005d16:	2301      	movs	r3, #1
 8005d18:	4652      	mov	r2, sl
 8005d1a:	4649      	mov	r1, r9
 8005d1c:	4638      	mov	r0, r7
 8005d1e:	47c0      	blx	r8
 8005d20:	3001      	adds	r0, #1
 8005d22:	d103      	bne.n	8005d2c <_printf_common+0xac>
 8005d24:	f04f 30ff 	mov.w	r0, #4294967295
 8005d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d2c:	3501      	adds	r5, #1
 8005d2e:	e7c6      	b.n	8005cbe <_printf_common+0x3e>
 8005d30:	18e1      	adds	r1, r4, r3
 8005d32:	1c5a      	adds	r2, r3, #1
 8005d34:	2030      	movs	r0, #48	; 0x30
 8005d36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d3a:	4422      	add	r2, r4
 8005d3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d44:	3302      	adds	r3, #2
 8005d46:	e7c7      	b.n	8005cd8 <_printf_common+0x58>
 8005d48:	2301      	movs	r3, #1
 8005d4a:	4622      	mov	r2, r4
 8005d4c:	4649      	mov	r1, r9
 8005d4e:	4638      	mov	r0, r7
 8005d50:	47c0      	blx	r8
 8005d52:	3001      	adds	r0, #1
 8005d54:	d0e6      	beq.n	8005d24 <_printf_common+0xa4>
 8005d56:	3601      	adds	r6, #1
 8005d58:	e7d9      	b.n	8005d0e <_printf_common+0x8e>
	...

08005d5c <_printf_i>:
 8005d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d60:	7e0f      	ldrb	r7, [r1, #24]
 8005d62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d64:	2f78      	cmp	r7, #120	; 0x78
 8005d66:	4691      	mov	r9, r2
 8005d68:	4680      	mov	r8, r0
 8005d6a:	460c      	mov	r4, r1
 8005d6c:	469a      	mov	sl, r3
 8005d6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d72:	d807      	bhi.n	8005d84 <_printf_i+0x28>
 8005d74:	2f62      	cmp	r7, #98	; 0x62
 8005d76:	d80a      	bhi.n	8005d8e <_printf_i+0x32>
 8005d78:	2f00      	cmp	r7, #0
 8005d7a:	f000 80d8 	beq.w	8005f2e <_printf_i+0x1d2>
 8005d7e:	2f58      	cmp	r7, #88	; 0x58
 8005d80:	f000 80a3 	beq.w	8005eca <_printf_i+0x16e>
 8005d84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d8c:	e03a      	b.n	8005e04 <_printf_i+0xa8>
 8005d8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d92:	2b15      	cmp	r3, #21
 8005d94:	d8f6      	bhi.n	8005d84 <_printf_i+0x28>
 8005d96:	a101      	add	r1, pc, #4	; (adr r1, 8005d9c <_printf_i+0x40>)
 8005d98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d9c:	08005df5 	.word	0x08005df5
 8005da0:	08005e09 	.word	0x08005e09
 8005da4:	08005d85 	.word	0x08005d85
 8005da8:	08005d85 	.word	0x08005d85
 8005dac:	08005d85 	.word	0x08005d85
 8005db0:	08005d85 	.word	0x08005d85
 8005db4:	08005e09 	.word	0x08005e09
 8005db8:	08005d85 	.word	0x08005d85
 8005dbc:	08005d85 	.word	0x08005d85
 8005dc0:	08005d85 	.word	0x08005d85
 8005dc4:	08005d85 	.word	0x08005d85
 8005dc8:	08005f15 	.word	0x08005f15
 8005dcc:	08005e39 	.word	0x08005e39
 8005dd0:	08005ef7 	.word	0x08005ef7
 8005dd4:	08005d85 	.word	0x08005d85
 8005dd8:	08005d85 	.word	0x08005d85
 8005ddc:	08005f37 	.word	0x08005f37
 8005de0:	08005d85 	.word	0x08005d85
 8005de4:	08005e39 	.word	0x08005e39
 8005de8:	08005d85 	.word	0x08005d85
 8005dec:	08005d85 	.word	0x08005d85
 8005df0:	08005eff 	.word	0x08005eff
 8005df4:	682b      	ldr	r3, [r5, #0]
 8005df6:	1d1a      	adds	r2, r3, #4
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	602a      	str	r2, [r5, #0]
 8005dfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e04:	2301      	movs	r3, #1
 8005e06:	e0a3      	b.n	8005f50 <_printf_i+0x1f4>
 8005e08:	6820      	ldr	r0, [r4, #0]
 8005e0a:	6829      	ldr	r1, [r5, #0]
 8005e0c:	0606      	lsls	r6, r0, #24
 8005e0e:	f101 0304 	add.w	r3, r1, #4
 8005e12:	d50a      	bpl.n	8005e2a <_printf_i+0xce>
 8005e14:	680e      	ldr	r6, [r1, #0]
 8005e16:	602b      	str	r3, [r5, #0]
 8005e18:	2e00      	cmp	r6, #0
 8005e1a:	da03      	bge.n	8005e24 <_printf_i+0xc8>
 8005e1c:	232d      	movs	r3, #45	; 0x2d
 8005e1e:	4276      	negs	r6, r6
 8005e20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e24:	485e      	ldr	r0, [pc, #376]	; (8005fa0 <_printf_i+0x244>)
 8005e26:	230a      	movs	r3, #10
 8005e28:	e019      	b.n	8005e5e <_printf_i+0x102>
 8005e2a:	680e      	ldr	r6, [r1, #0]
 8005e2c:	602b      	str	r3, [r5, #0]
 8005e2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e32:	bf18      	it	ne
 8005e34:	b236      	sxthne	r6, r6
 8005e36:	e7ef      	b.n	8005e18 <_printf_i+0xbc>
 8005e38:	682b      	ldr	r3, [r5, #0]
 8005e3a:	6820      	ldr	r0, [r4, #0]
 8005e3c:	1d19      	adds	r1, r3, #4
 8005e3e:	6029      	str	r1, [r5, #0]
 8005e40:	0601      	lsls	r1, r0, #24
 8005e42:	d501      	bpl.n	8005e48 <_printf_i+0xec>
 8005e44:	681e      	ldr	r6, [r3, #0]
 8005e46:	e002      	b.n	8005e4e <_printf_i+0xf2>
 8005e48:	0646      	lsls	r6, r0, #25
 8005e4a:	d5fb      	bpl.n	8005e44 <_printf_i+0xe8>
 8005e4c:	881e      	ldrh	r6, [r3, #0]
 8005e4e:	4854      	ldr	r0, [pc, #336]	; (8005fa0 <_printf_i+0x244>)
 8005e50:	2f6f      	cmp	r7, #111	; 0x6f
 8005e52:	bf0c      	ite	eq
 8005e54:	2308      	moveq	r3, #8
 8005e56:	230a      	movne	r3, #10
 8005e58:	2100      	movs	r1, #0
 8005e5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e5e:	6865      	ldr	r5, [r4, #4]
 8005e60:	60a5      	str	r5, [r4, #8]
 8005e62:	2d00      	cmp	r5, #0
 8005e64:	bfa2      	ittt	ge
 8005e66:	6821      	ldrge	r1, [r4, #0]
 8005e68:	f021 0104 	bicge.w	r1, r1, #4
 8005e6c:	6021      	strge	r1, [r4, #0]
 8005e6e:	b90e      	cbnz	r6, 8005e74 <_printf_i+0x118>
 8005e70:	2d00      	cmp	r5, #0
 8005e72:	d04d      	beq.n	8005f10 <_printf_i+0x1b4>
 8005e74:	4615      	mov	r5, r2
 8005e76:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e7a:	fb03 6711 	mls	r7, r3, r1, r6
 8005e7e:	5dc7      	ldrb	r7, [r0, r7]
 8005e80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e84:	4637      	mov	r7, r6
 8005e86:	42bb      	cmp	r3, r7
 8005e88:	460e      	mov	r6, r1
 8005e8a:	d9f4      	bls.n	8005e76 <_printf_i+0x11a>
 8005e8c:	2b08      	cmp	r3, #8
 8005e8e:	d10b      	bne.n	8005ea8 <_printf_i+0x14c>
 8005e90:	6823      	ldr	r3, [r4, #0]
 8005e92:	07de      	lsls	r6, r3, #31
 8005e94:	d508      	bpl.n	8005ea8 <_printf_i+0x14c>
 8005e96:	6923      	ldr	r3, [r4, #16]
 8005e98:	6861      	ldr	r1, [r4, #4]
 8005e9a:	4299      	cmp	r1, r3
 8005e9c:	bfde      	ittt	le
 8005e9e:	2330      	movle	r3, #48	; 0x30
 8005ea0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ea4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ea8:	1b52      	subs	r2, r2, r5
 8005eaa:	6122      	str	r2, [r4, #16]
 8005eac:	f8cd a000 	str.w	sl, [sp]
 8005eb0:	464b      	mov	r3, r9
 8005eb2:	aa03      	add	r2, sp, #12
 8005eb4:	4621      	mov	r1, r4
 8005eb6:	4640      	mov	r0, r8
 8005eb8:	f7ff fee2 	bl	8005c80 <_printf_common>
 8005ebc:	3001      	adds	r0, #1
 8005ebe:	d14c      	bne.n	8005f5a <_printf_i+0x1fe>
 8005ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec4:	b004      	add	sp, #16
 8005ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eca:	4835      	ldr	r0, [pc, #212]	; (8005fa0 <_printf_i+0x244>)
 8005ecc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ed0:	6829      	ldr	r1, [r5, #0]
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ed8:	6029      	str	r1, [r5, #0]
 8005eda:	061d      	lsls	r5, r3, #24
 8005edc:	d514      	bpl.n	8005f08 <_printf_i+0x1ac>
 8005ede:	07df      	lsls	r7, r3, #31
 8005ee0:	bf44      	itt	mi
 8005ee2:	f043 0320 	orrmi.w	r3, r3, #32
 8005ee6:	6023      	strmi	r3, [r4, #0]
 8005ee8:	b91e      	cbnz	r6, 8005ef2 <_printf_i+0x196>
 8005eea:	6823      	ldr	r3, [r4, #0]
 8005eec:	f023 0320 	bic.w	r3, r3, #32
 8005ef0:	6023      	str	r3, [r4, #0]
 8005ef2:	2310      	movs	r3, #16
 8005ef4:	e7b0      	b.n	8005e58 <_printf_i+0xfc>
 8005ef6:	6823      	ldr	r3, [r4, #0]
 8005ef8:	f043 0320 	orr.w	r3, r3, #32
 8005efc:	6023      	str	r3, [r4, #0]
 8005efe:	2378      	movs	r3, #120	; 0x78
 8005f00:	4828      	ldr	r0, [pc, #160]	; (8005fa4 <_printf_i+0x248>)
 8005f02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f06:	e7e3      	b.n	8005ed0 <_printf_i+0x174>
 8005f08:	0659      	lsls	r1, r3, #25
 8005f0a:	bf48      	it	mi
 8005f0c:	b2b6      	uxthmi	r6, r6
 8005f0e:	e7e6      	b.n	8005ede <_printf_i+0x182>
 8005f10:	4615      	mov	r5, r2
 8005f12:	e7bb      	b.n	8005e8c <_printf_i+0x130>
 8005f14:	682b      	ldr	r3, [r5, #0]
 8005f16:	6826      	ldr	r6, [r4, #0]
 8005f18:	6961      	ldr	r1, [r4, #20]
 8005f1a:	1d18      	adds	r0, r3, #4
 8005f1c:	6028      	str	r0, [r5, #0]
 8005f1e:	0635      	lsls	r5, r6, #24
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	d501      	bpl.n	8005f28 <_printf_i+0x1cc>
 8005f24:	6019      	str	r1, [r3, #0]
 8005f26:	e002      	b.n	8005f2e <_printf_i+0x1d2>
 8005f28:	0670      	lsls	r0, r6, #25
 8005f2a:	d5fb      	bpl.n	8005f24 <_printf_i+0x1c8>
 8005f2c:	8019      	strh	r1, [r3, #0]
 8005f2e:	2300      	movs	r3, #0
 8005f30:	6123      	str	r3, [r4, #16]
 8005f32:	4615      	mov	r5, r2
 8005f34:	e7ba      	b.n	8005eac <_printf_i+0x150>
 8005f36:	682b      	ldr	r3, [r5, #0]
 8005f38:	1d1a      	adds	r2, r3, #4
 8005f3a:	602a      	str	r2, [r5, #0]
 8005f3c:	681d      	ldr	r5, [r3, #0]
 8005f3e:	6862      	ldr	r2, [r4, #4]
 8005f40:	2100      	movs	r1, #0
 8005f42:	4628      	mov	r0, r5
 8005f44:	f7fa f94c 	bl	80001e0 <memchr>
 8005f48:	b108      	cbz	r0, 8005f4e <_printf_i+0x1f2>
 8005f4a:	1b40      	subs	r0, r0, r5
 8005f4c:	6060      	str	r0, [r4, #4]
 8005f4e:	6863      	ldr	r3, [r4, #4]
 8005f50:	6123      	str	r3, [r4, #16]
 8005f52:	2300      	movs	r3, #0
 8005f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f58:	e7a8      	b.n	8005eac <_printf_i+0x150>
 8005f5a:	6923      	ldr	r3, [r4, #16]
 8005f5c:	462a      	mov	r2, r5
 8005f5e:	4649      	mov	r1, r9
 8005f60:	4640      	mov	r0, r8
 8005f62:	47d0      	blx	sl
 8005f64:	3001      	adds	r0, #1
 8005f66:	d0ab      	beq.n	8005ec0 <_printf_i+0x164>
 8005f68:	6823      	ldr	r3, [r4, #0]
 8005f6a:	079b      	lsls	r3, r3, #30
 8005f6c:	d413      	bmi.n	8005f96 <_printf_i+0x23a>
 8005f6e:	68e0      	ldr	r0, [r4, #12]
 8005f70:	9b03      	ldr	r3, [sp, #12]
 8005f72:	4298      	cmp	r0, r3
 8005f74:	bfb8      	it	lt
 8005f76:	4618      	movlt	r0, r3
 8005f78:	e7a4      	b.n	8005ec4 <_printf_i+0x168>
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	4632      	mov	r2, r6
 8005f7e:	4649      	mov	r1, r9
 8005f80:	4640      	mov	r0, r8
 8005f82:	47d0      	blx	sl
 8005f84:	3001      	adds	r0, #1
 8005f86:	d09b      	beq.n	8005ec0 <_printf_i+0x164>
 8005f88:	3501      	adds	r5, #1
 8005f8a:	68e3      	ldr	r3, [r4, #12]
 8005f8c:	9903      	ldr	r1, [sp, #12]
 8005f8e:	1a5b      	subs	r3, r3, r1
 8005f90:	42ab      	cmp	r3, r5
 8005f92:	dcf2      	bgt.n	8005f7a <_printf_i+0x21e>
 8005f94:	e7eb      	b.n	8005f6e <_printf_i+0x212>
 8005f96:	2500      	movs	r5, #0
 8005f98:	f104 0619 	add.w	r6, r4, #25
 8005f9c:	e7f5      	b.n	8005f8a <_printf_i+0x22e>
 8005f9e:	bf00      	nop
 8005fa0:	080066ed 	.word	0x080066ed
 8005fa4:	080066fe 	.word	0x080066fe

08005fa8 <_sbrk_r>:
 8005fa8:	b538      	push	{r3, r4, r5, lr}
 8005faa:	4d06      	ldr	r5, [pc, #24]	; (8005fc4 <_sbrk_r+0x1c>)
 8005fac:	2300      	movs	r3, #0
 8005fae:	4604      	mov	r4, r0
 8005fb0:	4608      	mov	r0, r1
 8005fb2:	602b      	str	r3, [r5, #0]
 8005fb4:	f7fc fcf2 	bl	800299c <_sbrk>
 8005fb8:	1c43      	adds	r3, r0, #1
 8005fba:	d102      	bne.n	8005fc2 <_sbrk_r+0x1a>
 8005fbc:	682b      	ldr	r3, [r5, #0]
 8005fbe:	b103      	cbz	r3, 8005fc2 <_sbrk_r+0x1a>
 8005fc0:	6023      	str	r3, [r4, #0]
 8005fc2:	bd38      	pop	{r3, r4, r5, pc}
 8005fc4:	200003b8 	.word	0x200003b8

08005fc8 <__sread>:
 8005fc8:	b510      	push	{r4, lr}
 8005fca:	460c      	mov	r4, r1
 8005fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fd0:	f000 fa6e 	bl	80064b0 <_read_r>
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	bfab      	itete	ge
 8005fd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005fda:	89a3      	ldrhlt	r3, [r4, #12]
 8005fdc:	181b      	addge	r3, r3, r0
 8005fde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005fe2:	bfac      	ite	ge
 8005fe4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005fe6:	81a3      	strhlt	r3, [r4, #12]
 8005fe8:	bd10      	pop	{r4, pc}

08005fea <__swrite>:
 8005fea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fee:	461f      	mov	r7, r3
 8005ff0:	898b      	ldrh	r3, [r1, #12]
 8005ff2:	05db      	lsls	r3, r3, #23
 8005ff4:	4605      	mov	r5, r0
 8005ff6:	460c      	mov	r4, r1
 8005ff8:	4616      	mov	r6, r2
 8005ffa:	d505      	bpl.n	8006008 <__swrite+0x1e>
 8005ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006000:	2302      	movs	r3, #2
 8006002:	2200      	movs	r2, #0
 8006004:	f000 f9d0 	bl	80063a8 <_lseek_r>
 8006008:	89a3      	ldrh	r3, [r4, #12]
 800600a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800600e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006012:	81a3      	strh	r3, [r4, #12]
 8006014:	4632      	mov	r2, r6
 8006016:	463b      	mov	r3, r7
 8006018:	4628      	mov	r0, r5
 800601a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800601e:	f000 b869 	b.w	80060f4 <_write_r>

08006022 <__sseek>:
 8006022:	b510      	push	{r4, lr}
 8006024:	460c      	mov	r4, r1
 8006026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800602a:	f000 f9bd 	bl	80063a8 <_lseek_r>
 800602e:	1c43      	adds	r3, r0, #1
 8006030:	89a3      	ldrh	r3, [r4, #12]
 8006032:	bf15      	itete	ne
 8006034:	6560      	strne	r0, [r4, #84]	; 0x54
 8006036:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800603a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800603e:	81a3      	strheq	r3, [r4, #12]
 8006040:	bf18      	it	ne
 8006042:	81a3      	strhne	r3, [r4, #12]
 8006044:	bd10      	pop	{r4, pc}

08006046 <__sclose>:
 8006046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800604a:	f000 b8db 	b.w	8006204 <_close_r>
	...

08006050 <__swbuf_r>:
 8006050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006052:	460e      	mov	r6, r1
 8006054:	4614      	mov	r4, r2
 8006056:	4605      	mov	r5, r0
 8006058:	b118      	cbz	r0, 8006062 <__swbuf_r+0x12>
 800605a:	6983      	ldr	r3, [r0, #24]
 800605c:	b90b      	cbnz	r3, 8006062 <__swbuf_r+0x12>
 800605e:	f7ff fb1b 	bl	8005698 <__sinit>
 8006062:	4b21      	ldr	r3, [pc, #132]	; (80060e8 <__swbuf_r+0x98>)
 8006064:	429c      	cmp	r4, r3
 8006066:	d12b      	bne.n	80060c0 <__swbuf_r+0x70>
 8006068:	686c      	ldr	r4, [r5, #4]
 800606a:	69a3      	ldr	r3, [r4, #24]
 800606c:	60a3      	str	r3, [r4, #8]
 800606e:	89a3      	ldrh	r3, [r4, #12]
 8006070:	071a      	lsls	r2, r3, #28
 8006072:	d52f      	bpl.n	80060d4 <__swbuf_r+0x84>
 8006074:	6923      	ldr	r3, [r4, #16]
 8006076:	b36b      	cbz	r3, 80060d4 <__swbuf_r+0x84>
 8006078:	6923      	ldr	r3, [r4, #16]
 800607a:	6820      	ldr	r0, [r4, #0]
 800607c:	1ac0      	subs	r0, r0, r3
 800607e:	6963      	ldr	r3, [r4, #20]
 8006080:	b2f6      	uxtb	r6, r6
 8006082:	4283      	cmp	r3, r0
 8006084:	4637      	mov	r7, r6
 8006086:	dc04      	bgt.n	8006092 <__swbuf_r+0x42>
 8006088:	4621      	mov	r1, r4
 800608a:	4628      	mov	r0, r5
 800608c:	f000 f950 	bl	8006330 <_fflush_r>
 8006090:	bb30      	cbnz	r0, 80060e0 <__swbuf_r+0x90>
 8006092:	68a3      	ldr	r3, [r4, #8]
 8006094:	3b01      	subs	r3, #1
 8006096:	60a3      	str	r3, [r4, #8]
 8006098:	6823      	ldr	r3, [r4, #0]
 800609a:	1c5a      	adds	r2, r3, #1
 800609c:	6022      	str	r2, [r4, #0]
 800609e:	701e      	strb	r6, [r3, #0]
 80060a0:	6963      	ldr	r3, [r4, #20]
 80060a2:	3001      	adds	r0, #1
 80060a4:	4283      	cmp	r3, r0
 80060a6:	d004      	beq.n	80060b2 <__swbuf_r+0x62>
 80060a8:	89a3      	ldrh	r3, [r4, #12]
 80060aa:	07db      	lsls	r3, r3, #31
 80060ac:	d506      	bpl.n	80060bc <__swbuf_r+0x6c>
 80060ae:	2e0a      	cmp	r6, #10
 80060b0:	d104      	bne.n	80060bc <__swbuf_r+0x6c>
 80060b2:	4621      	mov	r1, r4
 80060b4:	4628      	mov	r0, r5
 80060b6:	f000 f93b 	bl	8006330 <_fflush_r>
 80060ba:	b988      	cbnz	r0, 80060e0 <__swbuf_r+0x90>
 80060bc:	4638      	mov	r0, r7
 80060be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060c0:	4b0a      	ldr	r3, [pc, #40]	; (80060ec <__swbuf_r+0x9c>)
 80060c2:	429c      	cmp	r4, r3
 80060c4:	d101      	bne.n	80060ca <__swbuf_r+0x7a>
 80060c6:	68ac      	ldr	r4, [r5, #8]
 80060c8:	e7cf      	b.n	800606a <__swbuf_r+0x1a>
 80060ca:	4b09      	ldr	r3, [pc, #36]	; (80060f0 <__swbuf_r+0xa0>)
 80060cc:	429c      	cmp	r4, r3
 80060ce:	bf08      	it	eq
 80060d0:	68ec      	ldreq	r4, [r5, #12]
 80060d2:	e7ca      	b.n	800606a <__swbuf_r+0x1a>
 80060d4:	4621      	mov	r1, r4
 80060d6:	4628      	mov	r0, r5
 80060d8:	f000 f81e 	bl	8006118 <__swsetup_r>
 80060dc:	2800      	cmp	r0, #0
 80060de:	d0cb      	beq.n	8006078 <__swbuf_r+0x28>
 80060e0:	f04f 37ff 	mov.w	r7, #4294967295
 80060e4:	e7ea      	b.n	80060bc <__swbuf_r+0x6c>
 80060e6:	bf00      	nop
 80060e8:	0800669c 	.word	0x0800669c
 80060ec:	080066bc 	.word	0x080066bc
 80060f0:	0800667c 	.word	0x0800667c

080060f4 <_write_r>:
 80060f4:	b538      	push	{r3, r4, r5, lr}
 80060f6:	4d07      	ldr	r5, [pc, #28]	; (8006114 <_write_r+0x20>)
 80060f8:	4604      	mov	r4, r0
 80060fa:	4608      	mov	r0, r1
 80060fc:	4611      	mov	r1, r2
 80060fe:	2200      	movs	r2, #0
 8006100:	602a      	str	r2, [r5, #0]
 8006102:	461a      	mov	r2, r3
 8006104:	f7fc fbf9 	bl	80028fa <_write>
 8006108:	1c43      	adds	r3, r0, #1
 800610a:	d102      	bne.n	8006112 <_write_r+0x1e>
 800610c:	682b      	ldr	r3, [r5, #0]
 800610e:	b103      	cbz	r3, 8006112 <_write_r+0x1e>
 8006110:	6023      	str	r3, [r4, #0]
 8006112:	bd38      	pop	{r3, r4, r5, pc}
 8006114:	200003b8 	.word	0x200003b8

08006118 <__swsetup_r>:
 8006118:	4b32      	ldr	r3, [pc, #200]	; (80061e4 <__swsetup_r+0xcc>)
 800611a:	b570      	push	{r4, r5, r6, lr}
 800611c:	681d      	ldr	r5, [r3, #0]
 800611e:	4606      	mov	r6, r0
 8006120:	460c      	mov	r4, r1
 8006122:	b125      	cbz	r5, 800612e <__swsetup_r+0x16>
 8006124:	69ab      	ldr	r3, [r5, #24]
 8006126:	b913      	cbnz	r3, 800612e <__swsetup_r+0x16>
 8006128:	4628      	mov	r0, r5
 800612a:	f7ff fab5 	bl	8005698 <__sinit>
 800612e:	4b2e      	ldr	r3, [pc, #184]	; (80061e8 <__swsetup_r+0xd0>)
 8006130:	429c      	cmp	r4, r3
 8006132:	d10f      	bne.n	8006154 <__swsetup_r+0x3c>
 8006134:	686c      	ldr	r4, [r5, #4]
 8006136:	89a3      	ldrh	r3, [r4, #12]
 8006138:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800613c:	0719      	lsls	r1, r3, #28
 800613e:	d42c      	bmi.n	800619a <__swsetup_r+0x82>
 8006140:	06dd      	lsls	r5, r3, #27
 8006142:	d411      	bmi.n	8006168 <__swsetup_r+0x50>
 8006144:	2309      	movs	r3, #9
 8006146:	6033      	str	r3, [r6, #0]
 8006148:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800614c:	81a3      	strh	r3, [r4, #12]
 800614e:	f04f 30ff 	mov.w	r0, #4294967295
 8006152:	e03e      	b.n	80061d2 <__swsetup_r+0xba>
 8006154:	4b25      	ldr	r3, [pc, #148]	; (80061ec <__swsetup_r+0xd4>)
 8006156:	429c      	cmp	r4, r3
 8006158:	d101      	bne.n	800615e <__swsetup_r+0x46>
 800615a:	68ac      	ldr	r4, [r5, #8]
 800615c:	e7eb      	b.n	8006136 <__swsetup_r+0x1e>
 800615e:	4b24      	ldr	r3, [pc, #144]	; (80061f0 <__swsetup_r+0xd8>)
 8006160:	429c      	cmp	r4, r3
 8006162:	bf08      	it	eq
 8006164:	68ec      	ldreq	r4, [r5, #12]
 8006166:	e7e6      	b.n	8006136 <__swsetup_r+0x1e>
 8006168:	0758      	lsls	r0, r3, #29
 800616a:	d512      	bpl.n	8006192 <__swsetup_r+0x7a>
 800616c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800616e:	b141      	cbz	r1, 8006182 <__swsetup_r+0x6a>
 8006170:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006174:	4299      	cmp	r1, r3
 8006176:	d002      	beq.n	800617e <__swsetup_r+0x66>
 8006178:	4630      	mov	r0, r6
 800617a:	f7ff fb47 	bl	800580c <_free_r>
 800617e:	2300      	movs	r3, #0
 8006180:	6363      	str	r3, [r4, #52]	; 0x34
 8006182:	89a3      	ldrh	r3, [r4, #12]
 8006184:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006188:	81a3      	strh	r3, [r4, #12]
 800618a:	2300      	movs	r3, #0
 800618c:	6063      	str	r3, [r4, #4]
 800618e:	6923      	ldr	r3, [r4, #16]
 8006190:	6023      	str	r3, [r4, #0]
 8006192:	89a3      	ldrh	r3, [r4, #12]
 8006194:	f043 0308 	orr.w	r3, r3, #8
 8006198:	81a3      	strh	r3, [r4, #12]
 800619a:	6923      	ldr	r3, [r4, #16]
 800619c:	b94b      	cbnz	r3, 80061b2 <__swsetup_r+0x9a>
 800619e:	89a3      	ldrh	r3, [r4, #12]
 80061a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80061a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061a8:	d003      	beq.n	80061b2 <__swsetup_r+0x9a>
 80061aa:	4621      	mov	r1, r4
 80061ac:	4630      	mov	r0, r6
 80061ae:	f000 f933 	bl	8006418 <__smakebuf_r>
 80061b2:	89a0      	ldrh	r0, [r4, #12]
 80061b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80061b8:	f010 0301 	ands.w	r3, r0, #1
 80061bc:	d00a      	beq.n	80061d4 <__swsetup_r+0xbc>
 80061be:	2300      	movs	r3, #0
 80061c0:	60a3      	str	r3, [r4, #8]
 80061c2:	6963      	ldr	r3, [r4, #20]
 80061c4:	425b      	negs	r3, r3
 80061c6:	61a3      	str	r3, [r4, #24]
 80061c8:	6923      	ldr	r3, [r4, #16]
 80061ca:	b943      	cbnz	r3, 80061de <__swsetup_r+0xc6>
 80061cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80061d0:	d1ba      	bne.n	8006148 <__swsetup_r+0x30>
 80061d2:	bd70      	pop	{r4, r5, r6, pc}
 80061d4:	0781      	lsls	r1, r0, #30
 80061d6:	bf58      	it	pl
 80061d8:	6963      	ldrpl	r3, [r4, #20]
 80061da:	60a3      	str	r3, [r4, #8]
 80061dc:	e7f4      	b.n	80061c8 <__swsetup_r+0xb0>
 80061de:	2000      	movs	r0, #0
 80061e0:	e7f7      	b.n	80061d2 <__swsetup_r+0xba>
 80061e2:	bf00      	nop
 80061e4:	20000018 	.word	0x20000018
 80061e8:	0800669c 	.word	0x0800669c
 80061ec:	080066bc 	.word	0x080066bc
 80061f0:	0800667c 	.word	0x0800667c

080061f4 <abort>:
 80061f4:	b508      	push	{r3, lr}
 80061f6:	2006      	movs	r0, #6
 80061f8:	f000 f994 	bl	8006524 <raise>
 80061fc:	2001      	movs	r0, #1
 80061fe:	f7fc fb55 	bl	80028ac <_exit>
	...

08006204 <_close_r>:
 8006204:	b538      	push	{r3, r4, r5, lr}
 8006206:	4d06      	ldr	r5, [pc, #24]	; (8006220 <_close_r+0x1c>)
 8006208:	2300      	movs	r3, #0
 800620a:	4604      	mov	r4, r0
 800620c:	4608      	mov	r0, r1
 800620e:	602b      	str	r3, [r5, #0]
 8006210:	f7fc fb8f 	bl	8002932 <_close>
 8006214:	1c43      	adds	r3, r0, #1
 8006216:	d102      	bne.n	800621e <_close_r+0x1a>
 8006218:	682b      	ldr	r3, [r5, #0]
 800621a:	b103      	cbz	r3, 800621e <_close_r+0x1a>
 800621c:	6023      	str	r3, [r4, #0]
 800621e:	bd38      	pop	{r3, r4, r5, pc}
 8006220:	200003b8 	.word	0x200003b8

08006224 <__sflush_r>:
 8006224:	898a      	ldrh	r2, [r1, #12]
 8006226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800622a:	4605      	mov	r5, r0
 800622c:	0710      	lsls	r0, r2, #28
 800622e:	460c      	mov	r4, r1
 8006230:	d458      	bmi.n	80062e4 <__sflush_r+0xc0>
 8006232:	684b      	ldr	r3, [r1, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	dc05      	bgt.n	8006244 <__sflush_r+0x20>
 8006238:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800623a:	2b00      	cmp	r3, #0
 800623c:	dc02      	bgt.n	8006244 <__sflush_r+0x20>
 800623e:	2000      	movs	r0, #0
 8006240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006244:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006246:	2e00      	cmp	r6, #0
 8006248:	d0f9      	beq.n	800623e <__sflush_r+0x1a>
 800624a:	2300      	movs	r3, #0
 800624c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006250:	682f      	ldr	r7, [r5, #0]
 8006252:	602b      	str	r3, [r5, #0]
 8006254:	d032      	beq.n	80062bc <__sflush_r+0x98>
 8006256:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006258:	89a3      	ldrh	r3, [r4, #12]
 800625a:	075a      	lsls	r2, r3, #29
 800625c:	d505      	bpl.n	800626a <__sflush_r+0x46>
 800625e:	6863      	ldr	r3, [r4, #4]
 8006260:	1ac0      	subs	r0, r0, r3
 8006262:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006264:	b10b      	cbz	r3, 800626a <__sflush_r+0x46>
 8006266:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006268:	1ac0      	subs	r0, r0, r3
 800626a:	2300      	movs	r3, #0
 800626c:	4602      	mov	r2, r0
 800626e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006270:	6a21      	ldr	r1, [r4, #32]
 8006272:	4628      	mov	r0, r5
 8006274:	47b0      	blx	r6
 8006276:	1c43      	adds	r3, r0, #1
 8006278:	89a3      	ldrh	r3, [r4, #12]
 800627a:	d106      	bne.n	800628a <__sflush_r+0x66>
 800627c:	6829      	ldr	r1, [r5, #0]
 800627e:	291d      	cmp	r1, #29
 8006280:	d82c      	bhi.n	80062dc <__sflush_r+0xb8>
 8006282:	4a2a      	ldr	r2, [pc, #168]	; (800632c <__sflush_r+0x108>)
 8006284:	40ca      	lsrs	r2, r1
 8006286:	07d6      	lsls	r6, r2, #31
 8006288:	d528      	bpl.n	80062dc <__sflush_r+0xb8>
 800628a:	2200      	movs	r2, #0
 800628c:	6062      	str	r2, [r4, #4]
 800628e:	04d9      	lsls	r1, r3, #19
 8006290:	6922      	ldr	r2, [r4, #16]
 8006292:	6022      	str	r2, [r4, #0]
 8006294:	d504      	bpl.n	80062a0 <__sflush_r+0x7c>
 8006296:	1c42      	adds	r2, r0, #1
 8006298:	d101      	bne.n	800629e <__sflush_r+0x7a>
 800629a:	682b      	ldr	r3, [r5, #0]
 800629c:	b903      	cbnz	r3, 80062a0 <__sflush_r+0x7c>
 800629e:	6560      	str	r0, [r4, #84]	; 0x54
 80062a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062a2:	602f      	str	r7, [r5, #0]
 80062a4:	2900      	cmp	r1, #0
 80062a6:	d0ca      	beq.n	800623e <__sflush_r+0x1a>
 80062a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062ac:	4299      	cmp	r1, r3
 80062ae:	d002      	beq.n	80062b6 <__sflush_r+0x92>
 80062b0:	4628      	mov	r0, r5
 80062b2:	f7ff faab 	bl	800580c <_free_r>
 80062b6:	2000      	movs	r0, #0
 80062b8:	6360      	str	r0, [r4, #52]	; 0x34
 80062ba:	e7c1      	b.n	8006240 <__sflush_r+0x1c>
 80062bc:	6a21      	ldr	r1, [r4, #32]
 80062be:	2301      	movs	r3, #1
 80062c0:	4628      	mov	r0, r5
 80062c2:	47b0      	blx	r6
 80062c4:	1c41      	adds	r1, r0, #1
 80062c6:	d1c7      	bne.n	8006258 <__sflush_r+0x34>
 80062c8:	682b      	ldr	r3, [r5, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d0c4      	beq.n	8006258 <__sflush_r+0x34>
 80062ce:	2b1d      	cmp	r3, #29
 80062d0:	d001      	beq.n	80062d6 <__sflush_r+0xb2>
 80062d2:	2b16      	cmp	r3, #22
 80062d4:	d101      	bne.n	80062da <__sflush_r+0xb6>
 80062d6:	602f      	str	r7, [r5, #0]
 80062d8:	e7b1      	b.n	800623e <__sflush_r+0x1a>
 80062da:	89a3      	ldrh	r3, [r4, #12]
 80062dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062e0:	81a3      	strh	r3, [r4, #12]
 80062e2:	e7ad      	b.n	8006240 <__sflush_r+0x1c>
 80062e4:	690f      	ldr	r7, [r1, #16]
 80062e6:	2f00      	cmp	r7, #0
 80062e8:	d0a9      	beq.n	800623e <__sflush_r+0x1a>
 80062ea:	0793      	lsls	r3, r2, #30
 80062ec:	680e      	ldr	r6, [r1, #0]
 80062ee:	bf08      	it	eq
 80062f0:	694b      	ldreq	r3, [r1, #20]
 80062f2:	600f      	str	r7, [r1, #0]
 80062f4:	bf18      	it	ne
 80062f6:	2300      	movne	r3, #0
 80062f8:	eba6 0807 	sub.w	r8, r6, r7
 80062fc:	608b      	str	r3, [r1, #8]
 80062fe:	f1b8 0f00 	cmp.w	r8, #0
 8006302:	dd9c      	ble.n	800623e <__sflush_r+0x1a>
 8006304:	6a21      	ldr	r1, [r4, #32]
 8006306:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006308:	4643      	mov	r3, r8
 800630a:	463a      	mov	r2, r7
 800630c:	4628      	mov	r0, r5
 800630e:	47b0      	blx	r6
 8006310:	2800      	cmp	r0, #0
 8006312:	dc06      	bgt.n	8006322 <__sflush_r+0xfe>
 8006314:	89a3      	ldrh	r3, [r4, #12]
 8006316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800631a:	81a3      	strh	r3, [r4, #12]
 800631c:	f04f 30ff 	mov.w	r0, #4294967295
 8006320:	e78e      	b.n	8006240 <__sflush_r+0x1c>
 8006322:	4407      	add	r7, r0
 8006324:	eba8 0800 	sub.w	r8, r8, r0
 8006328:	e7e9      	b.n	80062fe <__sflush_r+0xda>
 800632a:	bf00      	nop
 800632c:	20400001 	.word	0x20400001

08006330 <_fflush_r>:
 8006330:	b538      	push	{r3, r4, r5, lr}
 8006332:	690b      	ldr	r3, [r1, #16]
 8006334:	4605      	mov	r5, r0
 8006336:	460c      	mov	r4, r1
 8006338:	b913      	cbnz	r3, 8006340 <_fflush_r+0x10>
 800633a:	2500      	movs	r5, #0
 800633c:	4628      	mov	r0, r5
 800633e:	bd38      	pop	{r3, r4, r5, pc}
 8006340:	b118      	cbz	r0, 800634a <_fflush_r+0x1a>
 8006342:	6983      	ldr	r3, [r0, #24]
 8006344:	b90b      	cbnz	r3, 800634a <_fflush_r+0x1a>
 8006346:	f7ff f9a7 	bl	8005698 <__sinit>
 800634a:	4b14      	ldr	r3, [pc, #80]	; (800639c <_fflush_r+0x6c>)
 800634c:	429c      	cmp	r4, r3
 800634e:	d11b      	bne.n	8006388 <_fflush_r+0x58>
 8006350:	686c      	ldr	r4, [r5, #4]
 8006352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d0ef      	beq.n	800633a <_fflush_r+0xa>
 800635a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800635c:	07d0      	lsls	r0, r2, #31
 800635e:	d404      	bmi.n	800636a <_fflush_r+0x3a>
 8006360:	0599      	lsls	r1, r3, #22
 8006362:	d402      	bmi.n	800636a <_fflush_r+0x3a>
 8006364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006366:	f7ff fa47 	bl	80057f8 <__retarget_lock_acquire_recursive>
 800636a:	4628      	mov	r0, r5
 800636c:	4621      	mov	r1, r4
 800636e:	f7ff ff59 	bl	8006224 <__sflush_r>
 8006372:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006374:	07da      	lsls	r2, r3, #31
 8006376:	4605      	mov	r5, r0
 8006378:	d4e0      	bmi.n	800633c <_fflush_r+0xc>
 800637a:	89a3      	ldrh	r3, [r4, #12]
 800637c:	059b      	lsls	r3, r3, #22
 800637e:	d4dd      	bmi.n	800633c <_fflush_r+0xc>
 8006380:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006382:	f7ff fa3a 	bl	80057fa <__retarget_lock_release_recursive>
 8006386:	e7d9      	b.n	800633c <_fflush_r+0xc>
 8006388:	4b05      	ldr	r3, [pc, #20]	; (80063a0 <_fflush_r+0x70>)
 800638a:	429c      	cmp	r4, r3
 800638c:	d101      	bne.n	8006392 <_fflush_r+0x62>
 800638e:	68ac      	ldr	r4, [r5, #8]
 8006390:	e7df      	b.n	8006352 <_fflush_r+0x22>
 8006392:	4b04      	ldr	r3, [pc, #16]	; (80063a4 <_fflush_r+0x74>)
 8006394:	429c      	cmp	r4, r3
 8006396:	bf08      	it	eq
 8006398:	68ec      	ldreq	r4, [r5, #12]
 800639a:	e7da      	b.n	8006352 <_fflush_r+0x22>
 800639c:	0800669c 	.word	0x0800669c
 80063a0:	080066bc 	.word	0x080066bc
 80063a4:	0800667c 	.word	0x0800667c

080063a8 <_lseek_r>:
 80063a8:	b538      	push	{r3, r4, r5, lr}
 80063aa:	4d07      	ldr	r5, [pc, #28]	; (80063c8 <_lseek_r+0x20>)
 80063ac:	4604      	mov	r4, r0
 80063ae:	4608      	mov	r0, r1
 80063b0:	4611      	mov	r1, r2
 80063b2:	2200      	movs	r2, #0
 80063b4:	602a      	str	r2, [r5, #0]
 80063b6:	461a      	mov	r2, r3
 80063b8:	f7fc fae2 	bl	8002980 <_lseek>
 80063bc:	1c43      	adds	r3, r0, #1
 80063be:	d102      	bne.n	80063c6 <_lseek_r+0x1e>
 80063c0:	682b      	ldr	r3, [r5, #0]
 80063c2:	b103      	cbz	r3, 80063c6 <_lseek_r+0x1e>
 80063c4:	6023      	str	r3, [r4, #0]
 80063c6:	bd38      	pop	{r3, r4, r5, pc}
 80063c8:	200003b8 	.word	0x200003b8

080063cc <__swhatbuf_r>:
 80063cc:	b570      	push	{r4, r5, r6, lr}
 80063ce:	460e      	mov	r6, r1
 80063d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063d4:	2900      	cmp	r1, #0
 80063d6:	b096      	sub	sp, #88	; 0x58
 80063d8:	4614      	mov	r4, r2
 80063da:	461d      	mov	r5, r3
 80063dc:	da08      	bge.n	80063f0 <__swhatbuf_r+0x24>
 80063de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	602a      	str	r2, [r5, #0]
 80063e6:	061a      	lsls	r2, r3, #24
 80063e8:	d410      	bmi.n	800640c <__swhatbuf_r+0x40>
 80063ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063ee:	e00e      	b.n	800640e <__swhatbuf_r+0x42>
 80063f0:	466a      	mov	r2, sp
 80063f2:	f000 f8b3 	bl	800655c <_fstat_r>
 80063f6:	2800      	cmp	r0, #0
 80063f8:	dbf1      	blt.n	80063de <__swhatbuf_r+0x12>
 80063fa:	9a01      	ldr	r2, [sp, #4]
 80063fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006400:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006404:	425a      	negs	r2, r3
 8006406:	415a      	adcs	r2, r3
 8006408:	602a      	str	r2, [r5, #0]
 800640a:	e7ee      	b.n	80063ea <__swhatbuf_r+0x1e>
 800640c:	2340      	movs	r3, #64	; 0x40
 800640e:	2000      	movs	r0, #0
 8006410:	6023      	str	r3, [r4, #0]
 8006412:	b016      	add	sp, #88	; 0x58
 8006414:	bd70      	pop	{r4, r5, r6, pc}
	...

08006418 <__smakebuf_r>:
 8006418:	898b      	ldrh	r3, [r1, #12]
 800641a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800641c:	079d      	lsls	r5, r3, #30
 800641e:	4606      	mov	r6, r0
 8006420:	460c      	mov	r4, r1
 8006422:	d507      	bpl.n	8006434 <__smakebuf_r+0x1c>
 8006424:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006428:	6023      	str	r3, [r4, #0]
 800642a:	6123      	str	r3, [r4, #16]
 800642c:	2301      	movs	r3, #1
 800642e:	6163      	str	r3, [r4, #20]
 8006430:	b002      	add	sp, #8
 8006432:	bd70      	pop	{r4, r5, r6, pc}
 8006434:	ab01      	add	r3, sp, #4
 8006436:	466a      	mov	r2, sp
 8006438:	f7ff ffc8 	bl	80063cc <__swhatbuf_r>
 800643c:	9900      	ldr	r1, [sp, #0]
 800643e:	4605      	mov	r5, r0
 8006440:	4630      	mov	r0, r6
 8006442:	f7ff fa4f 	bl	80058e4 <_malloc_r>
 8006446:	b948      	cbnz	r0, 800645c <__smakebuf_r+0x44>
 8006448:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800644c:	059a      	lsls	r2, r3, #22
 800644e:	d4ef      	bmi.n	8006430 <__smakebuf_r+0x18>
 8006450:	f023 0303 	bic.w	r3, r3, #3
 8006454:	f043 0302 	orr.w	r3, r3, #2
 8006458:	81a3      	strh	r3, [r4, #12]
 800645a:	e7e3      	b.n	8006424 <__smakebuf_r+0xc>
 800645c:	4b0d      	ldr	r3, [pc, #52]	; (8006494 <__smakebuf_r+0x7c>)
 800645e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006460:	89a3      	ldrh	r3, [r4, #12]
 8006462:	6020      	str	r0, [r4, #0]
 8006464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006468:	81a3      	strh	r3, [r4, #12]
 800646a:	9b00      	ldr	r3, [sp, #0]
 800646c:	6163      	str	r3, [r4, #20]
 800646e:	9b01      	ldr	r3, [sp, #4]
 8006470:	6120      	str	r0, [r4, #16]
 8006472:	b15b      	cbz	r3, 800648c <__smakebuf_r+0x74>
 8006474:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006478:	4630      	mov	r0, r6
 800647a:	f000 f881 	bl	8006580 <_isatty_r>
 800647e:	b128      	cbz	r0, 800648c <__smakebuf_r+0x74>
 8006480:	89a3      	ldrh	r3, [r4, #12]
 8006482:	f023 0303 	bic.w	r3, r3, #3
 8006486:	f043 0301 	orr.w	r3, r3, #1
 800648a:	81a3      	strh	r3, [r4, #12]
 800648c:	89a0      	ldrh	r0, [r4, #12]
 800648e:	4305      	orrs	r5, r0
 8006490:	81a5      	strh	r5, [r4, #12]
 8006492:	e7cd      	b.n	8006430 <__smakebuf_r+0x18>
 8006494:	08005631 	.word	0x08005631

08006498 <__malloc_lock>:
 8006498:	4801      	ldr	r0, [pc, #4]	; (80064a0 <__malloc_lock+0x8>)
 800649a:	f7ff b9ad 	b.w	80057f8 <__retarget_lock_acquire_recursive>
 800649e:	bf00      	nop
 80064a0:	200003ac 	.word	0x200003ac

080064a4 <__malloc_unlock>:
 80064a4:	4801      	ldr	r0, [pc, #4]	; (80064ac <__malloc_unlock+0x8>)
 80064a6:	f7ff b9a8 	b.w	80057fa <__retarget_lock_release_recursive>
 80064aa:	bf00      	nop
 80064ac:	200003ac 	.word	0x200003ac

080064b0 <_read_r>:
 80064b0:	b538      	push	{r3, r4, r5, lr}
 80064b2:	4d07      	ldr	r5, [pc, #28]	; (80064d0 <_read_r+0x20>)
 80064b4:	4604      	mov	r4, r0
 80064b6:	4608      	mov	r0, r1
 80064b8:	4611      	mov	r1, r2
 80064ba:	2200      	movs	r2, #0
 80064bc:	602a      	str	r2, [r5, #0]
 80064be:	461a      	mov	r2, r3
 80064c0:	f7fc f9fe 	bl	80028c0 <_read>
 80064c4:	1c43      	adds	r3, r0, #1
 80064c6:	d102      	bne.n	80064ce <_read_r+0x1e>
 80064c8:	682b      	ldr	r3, [r5, #0]
 80064ca:	b103      	cbz	r3, 80064ce <_read_r+0x1e>
 80064cc:	6023      	str	r3, [r4, #0]
 80064ce:	bd38      	pop	{r3, r4, r5, pc}
 80064d0:	200003b8 	.word	0x200003b8

080064d4 <_raise_r>:
 80064d4:	291f      	cmp	r1, #31
 80064d6:	b538      	push	{r3, r4, r5, lr}
 80064d8:	4604      	mov	r4, r0
 80064da:	460d      	mov	r5, r1
 80064dc:	d904      	bls.n	80064e8 <_raise_r+0x14>
 80064de:	2316      	movs	r3, #22
 80064e0:	6003      	str	r3, [r0, #0]
 80064e2:	f04f 30ff 	mov.w	r0, #4294967295
 80064e6:	bd38      	pop	{r3, r4, r5, pc}
 80064e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80064ea:	b112      	cbz	r2, 80064f2 <_raise_r+0x1e>
 80064ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80064f0:	b94b      	cbnz	r3, 8006506 <_raise_r+0x32>
 80064f2:	4620      	mov	r0, r4
 80064f4:	f000 f830 	bl	8006558 <_getpid_r>
 80064f8:	462a      	mov	r2, r5
 80064fa:	4601      	mov	r1, r0
 80064fc:	4620      	mov	r0, r4
 80064fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006502:	f000 b817 	b.w	8006534 <_kill_r>
 8006506:	2b01      	cmp	r3, #1
 8006508:	d00a      	beq.n	8006520 <_raise_r+0x4c>
 800650a:	1c59      	adds	r1, r3, #1
 800650c:	d103      	bne.n	8006516 <_raise_r+0x42>
 800650e:	2316      	movs	r3, #22
 8006510:	6003      	str	r3, [r0, #0]
 8006512:	2001      	movs	r0, #1
 8006514:	e7e7      	b.n	80064e6 <_raise_r+0x12>
 8006516:	2400      	movs	r4, #0
 8006518:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800651c:	4628      	mov	r0, r5
 800651e:	4798      	blx	r3
 8006520:	2000      	movs	r0, #0
 8006522:	e7e0      	b.n	80064e6 <_raise_r+0x12>

08006524 <raise>:
 8006524:	4b02      	ldr	r3, [pc, #8]	; (8006530 <raise+0xc>)
 8006526:	4601      	mov	r1, r0
 8006528:	6818      	ldr	r0, [r3, #0]
 800652a:	f7ff bfd3 	b.w	80064d4 <_raise_r>
 800652e:	bf00      	nop
 8006530:	20000018 	.word	0x20000018

08006534 <_kill_r>:
 8006534:	b538      	push	{r3, r4, r5, lr}
 8006536:	4d07      	ldr	r5, [pc, #28]	; (8006554 <_kill_r+0x20>)
 8006538:	2300      	movs	r3, #0
 800653a:	4604      	mov	r4, r0
 800653c:	4608      	mov	r0, r1
 800653e:	4611      	mov	r1, r2
 8006540:	602b      	str	r3, [r5, #0]
 8006542:	f7fc f9a3 	bl	800288c <_kill>
 8006546:	1c43      	adds	r3, r0, #1
 8006548:	d102      	bne.n	8006550 <_kill_r+0x1c>
 800654a:	682b      	ldr	r3, [r5, #0]
 800654c:	b103      	cbz	r3, 8006550 <_kill_r+0x1c>
 800654e:	6023      	str	r3, [r4, #0]
 8006550:	bd38      	pop	{r3, r4, r5, pc}
 8006552:	bf00      	nop
 8006554:	200003b8 	.word	0x200003b8

08006558 <_getpid_r>:
 8006558:	f7fc b990 	b.w	800287c <_getpid>

0800655c <_fstat_r>:
 800655c:	b538      	push	{r3, r4, r5, lr}
 800655e:	4d07      	ldr	r5, [pc, #28]	; (800657c <_fstat_r+0x20>)
 8006560:	2300      	movs	r3, #0
 8006562:	4604      	mov	r4, r0
 8006564:	4608      	mov	r0, r1
 8006566:	4611      	mov	r1, r2
 8006568:	602b      	str	r3, [r5, #0]
 800656a:	f7fc f9ee 	bl	800294a <_fstat>
 800656e:	1c43      	adds	r3, r0, #1
 8006570:	d102      	bne.n	8006578 <_fstat_r+0x1c>
 8006572:	682b      	ldr	r3, [r5, #0]
 8006574:	b103      	cbz	r3, 8006578 <_fstat_r+0x1c>
 8006576:	6023      	str	r3, [r4, #0]
 8006578:	bd38      	pop	{r3, r4, r5, pc}
 800657a:	bf00      	nop
 800657c:	200003b8 	.word	0x200003b8

08006580 <_isatty_r>:
 8006580:	b538      	push	{r3, r4, r5, lr}
 8006582:	4d06      	ldr	r5, [pc, #24]	; (800659c <_isatty_r+0x1c>)
 8006584:	2300      	movs	r3, #0
 8006586:	4604      	mov	r4, r0
 8006588:	4608      	mov	r0, r1
 800658a:	602b      	str	r3, [r5, #0]
 800658c:	f7fc f9ed 	bl	800296a <_isatty>
 8006590:	1c43      	adds	r3, r0, #1
 8006592:	d102      	bne.n	800659a <_isatty_r+0x1a>
 8006594:	682b      	ldr	r3, [r5, #0]
 8006596:	b103      	cbz	r3, 800659a <_isatty_r+0x1a>
 8006598:	6023      	str	r3, [r4, #0]
 800659a:	bd38      	pop	{r3, r4, r5, pc}
 800659c:	200003b8 	.word	0x200003b8

080065a0 <_init>:
 80065a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a2:	bf00      	nop
 80065a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065a6:	bc08      	pop	{r3}
 80065a8:	469e      	mov	lr, r3
 80065aa:	4770      	bx	lr

080065ac <_fini>:
 80065ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ae:	bf00      	nop
 80065b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065b2:	bc08      	pop	{r3}
 80065b4:	469e      	mov	lr, r3
 80065b6:	4770      	bx	lr
