
Tetris_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  0800698c  0800698c  0001698c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006aec  08006aec  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08006aec  08006aec  00016aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006af4  08006af4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006af4  08006af4  00016af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006af8  08006af8  00016af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000394  2000007c  08006b78  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  08006b78  00020410  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011fcc  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a75  00000000  00000000  00032078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  00034af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc8  00000000  00000000  00035bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fb2  00000000  00000000  00036bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000154ed  00000000  00000000  00050b72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e53c  00000000  00000000  0006605f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010459b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005104  00000000  00000000  001045ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006974 	.word	0x08006974

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08006974 	.word	0x08006974

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800058a:	463b      	mov	r3, r7
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000596:	4b21      	ldr	r3, [pc, #132]	; (800061c <MX_ADC1_Init+0x98>)
 8000598:	4a21      	ldr	r2, [pc, #132]	; (8000620 <MX_ADC1_Init+0x9c>)
 800059a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800059c:	4b1f      	ldr	r3, [pc, #124]	; (800061c <MX_ADC1_Init+0x98>)
 800059e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005a4:	4b1d      	ldr	r3, [pc, #116]	; (800061c <MX_ADC1_Init+0x98>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005aa:	4b1c      	ldr	r3, [pc, #112]	; (800061c <MX_ADC1_Init+0x98>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005b0:	4b1a      	ldr	r3, [pc, #104]	; (800061c <MX_ADC1_Init+0x98>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005b6:	4b19      	ldr	r3, [pc, #100]	; (800061c <MX_ADC1_Init+0x98>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005be:	4b17      	ldr	r3, [pc, #92]	; (800061c <MX_ADC1_Init+0x98>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005c4:	4b15      	ldr	r3, [pc, #84]	; (800061c <MX_ADC1_Init+0x98>)
 80005c6:	4a17      	ldr	r2, [pc, #92]	; (8000624 <MX_ADC1_Init+0xa0>)
 80005c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ca:	4b14      	ldr	r3, [pc, #80]	; (800061c <MX_ADC1_Init+0x98>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <MX_ADC1_Init+0x98>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <MX_ADC1_Init+0x98>)
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005de:	4b0f      	ldr	r3, [pc, #60]	; (800061c <MX_ADC1_Init+0x98>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005e4:	480d      	ldr	r0, [pc, #52]	; (800061c <MX_ADC1_Init+0x98>)
 80005e6:	f002 fc03 	bl	8002df0 <HAL_ADC_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005f0:	f002 f87c 	bl	80026ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005f8:	2301      	movs	r3, #1
 80005fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000600:	463b      	mov	r3, r7
 8000602:	4619      	mov	r1, r3
 8000604:	4805      	ldr	r0, [pc, #20]	; (800061c <MX_ADC1_Init+0x98>)
 8000606:	f002 fd83 	bl	8003110 <HAL_ADC_ConfigChannel>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000610:	f002 f86c 	bl	80026ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000614:	bf00      	nop
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000098 	.word	0x20000098
 8000620:	40012000 	.word	0x40012000
 8000624:	0f000001 	.word	0x0f000001

08000628 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	; 0x28
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a17      	ldr	r2, [pc, #92]	; (80006a4 <HAL_ADC_MspInit+0x7c>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d127      	bne.n	800069a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	613b      	str	r3, [r7, #16]
 800064e:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <HAL_ADC_MspInit+0x80>)
 8000650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000652:	4a15      	ldr	r2, [pc, #84]	; (80006a8 <HAL_ADC_MspInit+0x80>)
 8000654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000658:	6453      	str	r3, [r2, #68]	; 0x44
 800065a:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <HAL_ADC_MspInit+0x80>)
 800065c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800065e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000662:	613b      	str	r3, [r7, #16]
 8000664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <HAL_ADC_MspInit+0x80>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <HAL_ADC_MspInit+0x80>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <HAL_ADC_MspInit+0x80>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000682:	2301      	movs	r3, #1
 8000684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000686:	2303      	movs	r3, #3
 8000688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	4619      	mov	r1, r3
 8000694:	4805      	ldr	r0, [pc, #20]	; (80006ac <HAL_ADC_MspInit+0x84>)
 8000696:	f003 f87b 	bl	8003790 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800069a:	bf00      	nop
 800069c:	3728      	adds	r7, #40	; 0x28
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40012000 	.word	0x40012000
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40020000 	.word	0x40020000

080006b0 <disp1color_FillScreenbuff>:

//==============================================================================
// Процедура заполняет буфер кадра значением FillValue
//==============================================================================
void disp1color_FillScreenbuff(uint8_t FillValue)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]
  memset(disp1color_buff, FillValue, sizeof(disp1color_buff));
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	2240      	movs	r2, #64	; 0x40
 80006be:	4619      	mov	r1, r3
 80006c0:	4803      	ldr	r0, [pc, #12]	; (80006d0 <disp1color_FillScreenbuff+0x20>)
 80006c2:	f005 f917 	bl	80058f4 <memset>
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000160 	.word	0x20000160

080006d4 <disp1color_UpdateFromBuff>:

//==============================================================================
// Процедура обновляет состояние индикаторов в соответствии с буфером кадра disp1color_buff
//==============================================================================
void disp1color_UpdateFromBuff(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  DMD_1COLOR_DisplayFullUpdate(disp1color_buff, sizeof(disp1color_buff));
 80006d8:	2140      	movs	r1, #64	; 0x40
 80006da:	4802      	ldr	r0, [pc, #8]	; (80006e4 <disp1color_UpdateFromBuff+0x10>)
 80006dc:	f000 f920 	bl	8000920 <DMD_1COLOR_DisplayFullUpdate>

  //printf("BUF horz:\n");
  //print_buf(DMD_1COLOR_Buff, sizeof(DMD_1COLOR_Buff));
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000160 	.word	0x20000160

080006e8 <disp1color_DrawPixel>:

//==============================================================================
// Процедура устанавливает состояние 1 пикселя дисплея
//==============================================================================
void disp1color_DrawPixel(int16_t X, int16_t Y, uint8_t State)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	80fb      	strh	r3, [r7, #6]
 80006f2:	460b      	mov	r3, r1
 80006f4:	80bb      	strh	r3, [r7, #4]
 80006f6:	4613      	mov	r3, r2
 80006f8:	70fb      	strb	r3, [r7, #3]
  //Х и У координаты пикселя, отсчитываются слева направо (Х) сверху вниз (У) с 0
  // Проверяем, находится ли точка в поле отрисовки дисплея
  if ((X >= DISP1COLOR_Width) || (Y >= DISP1COLOR_Height) || (X < 0) || (Y < 0))
 80006fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006fe:	2b1f      	cmp	r3, #31
 8000700:	dc48      	bgt.n	8000794 <disp1color_DrawPixel+0xac>
 8000702:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000706:	2b0f      	cmp	r3, #15
 8000708:	dc44      	bgt.n	8000794 <disp1color_DrawPixel+0xac>
 800070a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800070e:	2b00      	cmp	r3, #0
 8000710:	db40      	blt.n	8000794 <disp1color_DrawPixel+0xac>
 8000712:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000716:	2b00      	cmp	r3, #0
 8000718:	db3c      	blt.n	8000794 <disp1color_DrawPixel+0xac>
    return;
  
  //Байты относительно матрицы расположены вертикально, в 2 ряда
  uint16_t ByteIdx = Y >> 3;
 800071a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800071e:	10db      	asrs	r3, r3, #3
 8000720:	b21b      	sxth	r3, r3
 8000722:	81fb      	strh	r3, [r7, #14]
  uint8_t BitIdx = Y - (ByteIdx << 3); // Высота относительно строки байт (0<=Y<=7)
 8000724:	88bb      	ldrh	r3, [r7, #4]
 8000726:	b2da      	uxtb	r2, r3
 8000728:	89fb      	ldrh	r3, [r7, #14]
 800072a:	b2db      	uxtb	r3, r3
 800072c:	00db      	lsls	r3, r3, #3
 800072e:	b2db      	uxtb	r3, r3
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	737b      	strb	r3, [r7, #13]
  ByteIdx *= DISP1COLOR_Width;  
 8000734:	89fb      	ldrh	r3, [r7, #14]
 8000736:	015b      	lsls	r3, r3, #5
 8000738:	81fb      	strh	r3, [r7, #14]
  ByteIdx += X;
 800073a:	88fa      	ldrh	r2, [r7, #6]
 800073c:	89fb      	ldrh	r3, [r7, #14]
 800073e:	4413      	add	r3, r2
 8000740:	81fb      	strh	r3, [r7, #14]
  
  //Заполнение буфера данных для отрисовки
  if (State)
 8000742:	78fb      	ldrb	r3, [r7, #3]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d00f      	beq.n	8000768 <disp1color_DrawPixel+0x80>
    disp1color_buff[ByteIdx] |= (1 << BitIdx);
 8000748:	89fb      	ldrh	r3, [r7, #14]
 800074a:	4a15      	ldr	r2, [pc, #84]	; (80007a0 <disp1color_DrawPixel+0xb8>)
 800074c:	5cd3      	ldrb	r3, [r2, r3]
 800074e:	b25a      	sxtb	r2, r3
 8000750:	7b7b      	ldrb	r3, [r7, #13]
 8000752:	2101      	movs	r1, #1
 8000754:	fa01 f303 	lsl.w	r3, r1, r3
 8000758:	b25b      	sxtb	r3, r3
 800075a:	4313      	orrs	r3, r2
 800075c:	b25a      	sxtb	r2, r3
 800075e:	89fb      	ldrh	r3, [r7, #14]
 8000760:	b2d1      	uxtb	r1, r2
 8000762:	4a0f      	ldr	r2, [pc, #60]	; (80007a0 <disp1color_DrawPixel+0xb8>)
 8000764:	54d1      	strb	r1, [r2, r3]
 8000766:	e010      	b.n	800078a <disp1color_DrawPixel+0xa2>
  else
    disp1color_buff[ByteIdx] &= ~(1 << BitIdx);
 8000768:	89fb      	ldrh	r3, [r7, #14]
 800076a:	4a0d      	ldr	r2, [pc, #52]	; (80007a0 <disp1color_DrawPixel+0xb8>)
 800076c:	5cd3      	ldrb	r3, [r2, r3]
 800076e:	b25a      	sxtb	r2, r3
 8000770:	7b7b      	ldrb	r3, [r7, #13]
 8000772:	2101      	movs	r1, #1
 8000774:	fa01 f303 	lsl.w	r3, r1, r3
 8000778:	b25b      	sxtb	r3, r3
 800077a:	43db      	mvns	r3, r3
 800077c:	b25b      	sxtb	r3, r3
 800077e:	4013      	ands	r3, r2
 8000780:	b25a      	sxtb	r2, r3
 8000782:	89fb      	ldrh	r3, [r7, #14]
 8000784:	b2d1      	uxtb	r1, r2
 8000786:	4a06      	ldr	r2, [pc, #24]	; (80007a0 <disp1color_DrawPixel+0xb8>)
 8000788:	54d1      	strb	r1, [r2, r3]

 // printf("PIX:%d%s", disp1color_buff[ByteIdx], "\n");
  uint8_t buf = disp1color_buff[ByteIdx];
 800078a:	89fb      	ldrh	r3, [r7, #14]
 800078c:	4a04      	ldr	r2, [pc, #16]	; (80007a0 <disp1color_DrawPixel+0xb8>)
 800078e:	5cd3      	ldrb	r3, [r2, r3]
 8000790:	733b      	strb	r3, [r7, #12]
 8000792:	e000      	b.n	8000796 <disp1color_DrawPixel+0xae>
    return;
 8000794:	bf00      	nop
//  for (int i = 0; i < 8; i++) {
//	  printf("%c", (buf & 0x80) ? '1' : '0');
//	  buf <<= 1;
//  }
//  printf("\n");
}
 8000796:	3714      	adds	r7, #20
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	20000160 	.word	0x20000160

080007a4 <disp1color_DrawLine>:

//==============================================================================
// Процедура рисует прямую линию в буфере кадра дисплея
//==============================================================================
void disp1color_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2) 
{
 80007a4:	b590      	push	{r4, r7, lr}
 80007a6:	b087      	sub	sp, #28
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4604      	mov	r4, r0
 80007ac:	4608      	mov	r0, r1
 80007ae:	4611      	mov	r1, r2
 80007b0:	461a      	mov	r2, r3
 80007b2:	4623      	mov	r3, r4
 80007b4:	80fb      	strh	r3, [r7, #6]
 80007b6:	4603      	mov	r3, r0
 80007b8:	80bb      	strh	r3, [r7, #4]
 80007ba:	460b      	mov	r3, r1
 80007bc:	807b      	strh	r3, [r7, #2]
 80007be:	4613      	mov	r3, r2
 80007c0:	803b      	strh	r3, [r7, #0]
  const int16_t deltaX = abs(x2 - x1);
 80007c2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80007c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007ca:	1ad3      	subs	r3, r2, r3
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	bfb8      	it	lt
 80007d0:	425b      	neglt	r3, r3
 80007d2:	82bb      	strh	r3, [r7, #20]
  const int16_t deltaY = abs(y2 - y1);
 80007d4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80007d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	2b00      	cmp	r3, #0
 80007e0:	bfb8      	it	lt
 80007e2:	425b      	neglt	r3, r3
 80007e4:	827b      	strh	r3, [r7, #18]
  const int16_t signX = x1 < x2 ? 1 : -1;
 80007e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80007ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	da01      	bge.n	80007f6 <disp1color_DrawLine+0x52>
 80007f2:	2301      	movs	r3, #1
 80007f4:	e001      	b.n	80007fa <disp1color_DrawLine+0x56>
 80007f6:	f04f 33ff 	mov.w	r3, #4294967295
 80007fa:	823b      	strh	r3, [r7, #16]
  const int16_t signY = y1 < y2 ? 1 : -1;
 80007fc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000800:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000804:	429a      	cmp	r2, r3
 8000806:	da01      	bge.n	800080c <disp1color_DrawLine+0x68>
 8000808:	2301      	movs	r3, #1
 800080a:	e001      	b.n	8000810 <disp1color_DrawLine+0x6c>
 800080c:	f04f 33ff 	mov.w	r3, #4294967295
 8000810:	81fb      	strh	r3, [r7, #14]

  int16_t error = deltaX - deltaY;
 8000812:	8aba      	ldrh	r2, [r7, #20]
 8000814:	8a7b      	ldrh	r3, [r7, #18]
 8000816:	1ad3      	subs	r3, r2, r3
 8000818:	b29b      	uxth	r3, r3
 800081a:	82fb      	strh	r3, [r7, #22]

  disp1color_DrawPixel(x2, y2, 1);
 800081c:	f9b7 1000 	ldrsh.w	r1, [r7]
 8000820:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000824:	2201      	movs	r2, #1
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff ff5e 	bl	80006e8 <disp1color_DrawPixel>

  while (x1 != x2 || y1 != y2) 
 800082c:	e02c      	b.n	8000888 <disp1color_DrawLine+0xe4>
  {
    disp1color_DrawPixel(x1, y1, 1);
 800082e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000836:	2201      	movs	r2, #1
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ff55 	bl	80006e8 <disp1color_DrawPixel>
    const int16_t error2 = error * 2;
 800083e:	8afb      	ldrh	r3, [r7, #22]
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	b29b      	uxth	r3, r3
 8000844:	81bb      	strh	r3, [r7, #12]
 
    if (error2 > -deltaY) 
 8000846:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800084a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800084e:	425b      	negs	r3, r3
 8000850:	429a      	cmp	r2, r3
 8000852:	dd09      	ble.n	8000868 <disp1color_DrawLine+0xc4>
    {
      error -= deltaY;
 8000854:	8afa      	ldrh	r2, [r7, #22]
 8000856:	8a7b      	ldrh	r3, [r7, #18]
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	b29b      	uxth	r3, r3
 800085c:	82fb      	strh	r3, [r7, #22]
      x1 += signX;
 800085e:	88fa      	ldrh	r2, [r7, #6]
 8000860:	8a3b      	ldrh	r3, [r7, #16]
 8000862:	4413      	add	r3, r2
 8000864:	b29b      	uxth	r3, r3
 8000866:	80fb      	strh	r3, [r7, #6]
    }
    if (error2 < deltaX)
 8000868:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800086c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000870:	429a      	cmp	r2, r3
 8000872:	da09      	bge.n	8000888 <disp1color_DrawLine+0xe4>
    {
      error += deltaX;
 8000874:	8afa      	ldrh	r2, [r7, #22]
 8000876:	8abb      	ldrh	r3, [r7, #20]
 8000878:	4413      	add	r3, r2
 800087a:	b29b      	uxth	r3, r3
 800087c:	82fb      	strh	r3, [r7, #22]
      y1 += signY;
 800087e:	88ba      	ldrh	r2, [r7, #4]
 8000880:	89fb      	ldrh	r3, [r7, #14]
 8000882:	4413      	add	r3, r2
 8000884:	b29b      	uxth	r3, r3
 8000886:	80bb      	strh	r3, [r7, #4]
  while (x1 != x2 || y1 != y2) 
 8000888:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800088c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000890:	429a      	cmp	r2, r3
 8000892:	d1cc      	bne.n	800082e <disp1color_DrawLine+0x8a>
 8000894:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000898:	f9b7 3000 	ldrsh.w	r3, [r7]
 800089c:	429a      	cmp	r2, r3
 800089e:	d1c6      	bne.n	800082e <disp1color_DrawLine+0x8a>
    }
  }
}
 80008a0:	bf00      	nop
 80008a2:	bf00      	nop
 80008a4:	371c      	adds	r7, #28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd90      	pop	{r4, r7, pc}

080008aa <disp1color_DrawRectangle>:

//==============================================================================
// Процедура рисует прямоугольник в буфере кадра дисплея
//==============================================================================
void disp1color_DrawRectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2) 
{
 80008aa:	b590      	push	{r4, r7, lr}
 80008ac:	b083      	sub	sp, #12
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	4604      	mov	r4, r0
 80008b2:	4608      	mov	r0, r1
 80008b4:	4611      	mov	r1, r2
 80008b6:	461a      	mov	r2, r3
 80008b8:	4623      	mov	r3, r4
 80008ba:	80fb      	strh	r3, [r7, #6]
 80008bc:	4603      	mov	r3, r0
 80008be:	80bb      	strh	r3, [r7, #4]
 80008c0:	460b      	mov	r3, r1
 80008c2:	807b      	strh	r3, [r7, #2]
 80008c4:	4613      	mov	r3, r2
 80008c6:	803b      	strh	r3, [r7, #0]
  disp1color_DrawLine(x1, y1, x1, y2);
 80008c8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80008cc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80008d0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80008d4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80008d8:	f7ff ff64 	bl	80007a4 <disp1color_DrawLine>
  disp1color_DrawLine(x2, y1, x2, y2);
 80008dc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80008e0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80008e4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80008e8:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80008ec:	f7ff ff5a 	bl	80007a4 <disp1color_DrawLine>
  disp1color_DrawLine(x1, y1, x2, y1);
 80008f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008f4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80008f8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80008fc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000900:	f7ff ff50 	bl	80007a4 <disp1color_DrawLine>
  disp1color_DrawLine(x1, y2, x2, y2);
 8000904:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000908:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800090c:	f9b7 1000 	ldrsh.w	r1, [r7]
 8000910:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000914:	f7ff ff46 	bl	80007a4 <disp1color_DrawLine>
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	bd90      	pop	{r4, r7, pc}

08000920 <DMD_1COLOR_DisplayFullUpdate>:

//==============================================================================
// Процедура подготавливает буфер на передачу в экран в соответствии с буфером pBuff графической бибилиотеки
//==============================================================================
void DMD_1COLOR_DisplayFullUpdate(uint8_t *pBuff, uint16_t BuffLen)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	460b      	mov	r3, r1
 800092a:	807b      	strh	r3, [r7, #2]
	DMD_1COLOR_UpdateRow4(0, pBuff, BuffLen);
 800092c:	887b      	ldrh	r3, [r7, #2]
 800092e:	461a      	mov	r2, r3
 8000930:	6879      	ldr	r1, [r7, #4]
 8000932:	2000      	movs	r0, #0
 8000934:	f000 f816 	bl	8000964 <DMD_1COLOR_UpdateRow4>
	DMD_1COLOR_UpdateRow4(1, pBuff, BuffLen);
 8000938:	887b      	ldrh	r3, [r7, #2]
 800093a:	461a      	mov	r2, r3
 800093c:	6879      	ldr	r1, [r7, #4]
 800093e:	2001      	movs	r0, #1
 8000940:	f000 f810 	bl	8000964 <DMD_1COLOR_UpdateRow4>
	DMD_1COLOR_UpdateRow4(2, pBuff, BuffLen);
 8000944:	887b      	ldrh	r3, [r7, #2]
 8000946:	461a      	mov	r2, r3
 8000948:	6879      	ldr	r1, [r7, #4]
 800094a:	2002      	movs	r0, #2
 800094c:	f000 f80a 	bl	8000964 <DMD_1COLOR_UpdateRow4>
	DMD_1COLOR_UpdateRow4(3, pBuff, BuffLen);
 8000950:	887b      	ldrh	r3, [r7, #2]
 8000952:	461a      	mov	r2, r3
 8000954:	6879      	ldr	r1, [r7, #4]
 8000956:	2003      	movs	r0, #3
 8000958:	f000 f804 	bl	8000964 <DMD_1COLOR_UpdateRow4>
}
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <DMD_1COLOR_UpdateRow4>:

//==============================================================================
// Процедура обновляет поочерёдно все матрицы экрана
//==============================================================================
void DMD_1COLOR_UpdateRow4(uint8_t Row4, uint8_t *pBuff, uint16_t BuffLen)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	6039      	str	r1, [r7, #0]
 800096e:	71fb      	strb	r3, [r7, #7]
 8000970:	4613      	mov	r3, r2
 8000972:	80bb      	strh	r3, [r7, #4]
	// Подготавливаем данные для передачи
	uint16_t MatrixInRow = DMD_1COLOR_ScreenWidth / DMD_1COLOR_MatrixWidth;
 8000974:	4b2e      	ldr	r3, [pc, #184]	; (8000a30 <DMD_1COLOR_UpdateRow4+0xcc>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	095b      	lsrs	r3, r3, #5
 800097a:	b2db      	uxtb	r3, r3
 800097c:	81bb      	strh	r3, [r7, #12]
	uint16_t MatrixInCol = DMD_1COLOR_ScreenHeight / DMD_1COLOR_MatrixHeight;
 800097e:	4b2d      	ldr	r3, [pc, #180]	; (8000a34 <DMD_1COLOR_UpdateRow4+0xd0>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	091b      	lsrs	r3, r3, #4
 8000984:	b2db      	uxtb	r3, r3
 8000986:	817b      	strh	r3, [r7, #10]
	uint8_t MatrixLines8 = DMD_1COLOR_MatrixHeight >> 3;
 8000988:	2302      	movs	r3, #2
 800098a:	727b      	strb	r3, [r7, #9]
	uint16_t StartIdxRow = 0, StartIdxCol = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	83fb      	strh	r3, [r7, #30]
 8000990:	2300      	movs	r3, #0
 8000992:	83bb      	strh	r3, [r7, #28]

	for (uint8_t Row = 0; Row < MatrixInRow; Row++)
 8000994:	2300      	movs	r3, #0
 8000996:	76fb      	strb	r3, [r7, #27]
 8000998:	e040      	b.n	8000a1c <DMD_1COLOR_UpdateRow4+0xb8>
	{
		StartIdxCol = StartIdxRow;
 800099a:	8bfb      	ldrh	r3, [r7, #30]
 800099c:	83bb      	strh	r3, [r7, #28]

		for (uint8_t Col = 0; Col < MatrixInCol; Col++)
 800099e:	2300      	movs	r3, #0
 80009a0:	76bb      	strb	r3, [r7, #26]
 80009a2:	e028      	b.n	80009f6 <DMD_1COLOR_UpdateRow4+0x92>
		{
			// Копируем буфер кадра одной матрицы
			uint8_t *pDst = DMD_1COLOR_MatrixBuff;
 80009a4:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <DMD_1COLOR_UpdateRow4+0xd4>)
 80009a6:	617b      	str	r3, [r7, #20]
			uint8_t *pSrc = &pBuff[StartIdxCol];
 80009a8:	8bbb      	ldrh	r3, [r7, #28]
 80009aa:	683a      	ldr	r2, [r7, #0]
 80009ac:	4413      	add	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]

			for (uint8_t Line8 = 0; Line8 < MatrixLines8; Line8++)
 80009b0:	2300      	movs	r3, #0
 80009b2:	73fb      	strb	r3, [r7, #15]
 80009b4:	e015      	b.n	80009e2 <DMD_1COLOR_UpdateRow4+0x7e>
			{
				memcpy(pDst, pSrc, DMD_1COLOR_MatrixWidth);
 80009b6:	2220      	movs	r2, #32
 80009b8:	6939      	ldr	r1, [r7, #16]
 80009ba:	6978      	ldr	r0, [r7, #20]
 80009bc:	f004 ff8c 	bl	80058d8 <memcpy>
				DMD_1COLOR_SendFromMatrixBuff(Row4, DMD_1COLOR_MatrixBuff);
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	491d      	ldr	r1, [pc, #116]	; (8000a38 <DMD_1COLOR_UpdateRow4+0xd4>)
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 f839 	bl	8000a3c <DMD_1COLOR_SendFromMatrixBuff>
				pDst += DMD_1COLOR_MatrixWidth;
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	3320      	adds	r3, #32
 80009ce:	617b      	str	r3, [r7, #20]
				pSrc += DMD_1COLOR_ScreenWidth;
 80009d0:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <DMD_1COLOR_UpdateRow4+0xcc>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	461a      	mov	r2, r3
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	4413      	add	r3, r2
 80009da:	613b      	str	r3, [r7, #16]
			for (uint8_t Line8 = 0; Line8 < MatrixLines8; Line8++)
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	3301      	adds	r3, #1
 80009e0:	73fb      	strb	r3, [r7, #15]
 80009e2:	7bfa      	ldrb	r2, [r7, #15]
 80009e4:	7a7b      	ldrb	r3, [r7, #9]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d3e5      	bcc.n	80009b6 <DMD_1COLOR_UpdateRow4+0x52>
			}

			StartIdxCol += DMD_1COLOR_MatrixWidth;
 80009ea:	8bbb      	ldrh	r3, [r7, #28]
 80009ec:	3320      	adds	r3, #32
 80009ee:	83bb      	strh	r3, [r7, #28]
		for (uint8_t Col = 0; Col < MatrixInCol; Col++)
 80009f0:	7ebb      	ldrb	r3, [r7, #26]
 80009f2:	3301      	adds	r3, #1
 80009f4:	76bb      	strb	r3, [r7, #26]
 80009f6:	7ebb      	ldrb	r3, [r7, #26]
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	897a      	ldrh	r2, [r7, #10]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d8d1      	bhi.n	80009a4 <DMD_1COLOR_UpdateRow4+0x40>
		}
		StartIdxRow += MatrixLines8 * DMD_1COLOR_ScreenWidth;
 8000a00:	7a7b      	ldrb	r3, [r7, #9]
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <DMD_1COLOR_UpdateRow4+0xcc>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	fb12 f303 	smulbb	r3, r2, r3
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	8bfb      	ldrh	r3, [r7, #30]
 8000a12:	4413      	add	r3, r2
 8000a14:	83fb      	strh	r3, [r7, #30]
	for (uint8_t Row = 0; Row < MatrixInRow; Row++)
 8000a16:	7efb      	ldrb	r3, [r7, #27]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	76fb      	strb	r3, [r7, #27]
 8000a1c:	7efb      	ldrb	r3, [r7, #27]
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	89ba      	ldrh	r2, [r7, #12]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d8b9      	bhi.n	800099a <DMD_1COLOR_UpdateRow4+0x36>
	}
}
 8000a26:	bf00      	nop
 8000a28:	bf00      	nop
 8000a2a:	3720      	adds	r7, #32
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000001 	.word	0x20000001
 8000a34:	20000000 	.word	0x20000000
 8000a38:	200000e0 	.word	0x200000e0

08000a3c <DMD_1COLOR_SendFromMatrixBuff>:

//==============================================================================
// Процедура обновляет 1 матрицу
//==============================================================================
void DMD_1COLOR_SendFromMatrixBuff(uint8_t Row4, uint8_t *pBuff)
{
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b087      	sub	sp, #28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	6039      	str	r1, [r7, #0]
 8000a46:	71fb      	strb	r3, [r7, #7]
	uint8_t MatrixRows8bit = DMD_1COLOR_MatrixHeight >> 3;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	747b      	strb	r3, [r7, #17]
	uint8_t MatrixCols8bit = DMD_1COLOR_MatrixWidth >> 3;
 8000a4c:	2304      	movs	r3, #4
 8000a4e:	743b      	strb	r3, [r7, #16]
	uint8_t *pPart = (uint8_t *) &(DMD_1COLOR_Buff[Row4][0]);
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	011b      	lsls	r3, r3, #4
 8000a54:	4a22      	ldr	r2, [pc, #136]	; (8000ae0 <DMD_1COLOR_SendFromMatrixBuff+0xa4>)
 8000a56:	4413      	add	r3, r2
 8000a58:	617b      	str	r3, [r7, #20]

	for (uint8_t Col = 0; Col < MatrixCols8bit; Col++)
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	74fb      	strb	r3, [r7, #19]
 8000a5e:	e035      	b.n	8000acc <DMD_1COLOR_SendFromMatrixBuff+0x90>
	{
		for (uint8_t Row = MatrixRows8bit; Row; Row--)
 8000a60:	7c7b      	ldrb	r3, [r7, #17]
 8000a62:	74bb      	strb	r3, [r7, #18]
 8000a64:	e02c      	b.n	8000ac0 <DMD_1COLOR_SendFromMatrixBuff+0x84>
		{
			uint8_t *p8Bytes = pBuff + ((Row - 1) * DMD_1COLOR_MatrixWidth);
 8000a66:	7cbb      	ldrb	r3, [r7, #18]
 8000a68:	3b01      	subs	r3, #1
 8000a6a:	015b      	lsls	r3, r3, #5
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	4413      	add	r3, r2
 8000a72:	60fb      	str	r3, [r7, #12]
			p8Bytes += (Col << 3);
 8000a74:	7cfb      	ldrb	r3, [r7, #19]
 8000a76:	00db      	lsls	r3, r3, #3
 8000a78:	461a      	mov	r2, r3
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	60fb      	str	r3, [r7, #12]

			*(pPart++) = DMD_1COLOR_GetFrom8ScreenBytes(1 << (Row4 + 4), p8Bytes);
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	3304      	adds	r3, #4
 8000a84:	2201      	movs	r2, #1
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	697c      	ldr	r4, [r7, #20]
 8000a8e:	1c63      	adds	r3, r4, #1
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	68f9      	ldr	r1, [r7, #12]
 8000a94:	4610      	mov	r0, r2
 8000a96:	f000 f825 	bl	8000ae4 <DMD_1COLOR_GetFrom8ScreenBytes>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	7023      	strb	r3, [r4, #0]
			*(pPart++) = DMD_1COLOR_GetFrom8ScreenBytes(1 << Row4, p8Bytes);
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	697c      	ldr	r4, [r7, #20]
 8000aaa:	1c63      	adds	r3, r4, #1
 8000aac:	617b      	str	r3, [r7, #20]
 8000aae:	68f9      	ldr	r1, [r7, #12]
 8000ab0:	4610      	mov	r0, r2
 8000ab2:	f000 f817 	bl	8000ae4 <DMD_1COLOR_GetFrom8ScreenBytes>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	7023      	strb	r3, [r4, #0]
		for (uint8_t Row = MatrixRows8bit; Row; Row--)
 8000aba:	7cbb      	ldrb	r3, [r7, #18]
 8000abc:	3b01      	subs	r3, #1
 8000abe:	74bb      	strb	r3, [r7, #18]
 8000ac0:	7cbb      	ldrb	r3, [r7, #18]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d1cf      	bne.n	8000a66 <DMD_1COLOR_SendFromMatrixBuff+0x2a>
	for (uint8_t Col = 0; Col < MatrixCols8bit; Col++)
 8000ac6:	7cfb      	ldrb	r3, [r7, #19]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	74fb      	strb	r3, [r7, #19]
 8000acc:	7cfa      	ldrb	r2, [r7, #19]
 8000ace:	7c3b      	ldrb	r3, [r7, #16]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d3c5      	bcc.n	8000a60 <DMD_1COLOR_SendFromMatrixBuff+0x24>
		}
	}
}
 8000ad4:	bf00      	nop
 8000ad6:	bf00      	nop
 8000ad8:	371c      	adds	r7, #28
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd90      	pop	{r4, r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000120 	.word	0x20000120

08000ae4 <DMD_1COLOR_GetFrom8ScreenBytes>:
//==============================================================================
// Функция возвращает байт (строку из 8 светодиодов) по 8-байтному фрагменту буфера
// графической библиотеки и маске соответствующей строки светодиодов во фрагменте
//==============================================================================
uint8_t DMD_1COLOR_GetFrom8ScreenBytes(uint8_t Mask, uint8_t *pBuff)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	6039      	str	r1, [r7, #0]
 8000aee:	71fb      	strb	r3, [r7, #7]
	uint8_t Byte = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	73fb      	strb	r3, [r7, #15]
	//Переводим "вертикальные" байты из массива в горизонтальные
	//в соответствии с текущей строкой.
	//В итоге получается массив, где биты расположены горизонтально,
	//Первый бит слева внизу, счет увеличивается вверх и вправо.
	//Но строки в секторе расположены сверху вниз
	for (uint8_t BitMask = 0x80; BitMask; BitMask >>= 1, pBuff++)
 8000af4:	2380      	movs	r3, #128	; 0x80
 8000af6:	73bb      	strb	r3, [r7, #14]
 8000af8:	e010      	b.n	8000b1c <DMD_1COLOR_GetFrom8ScreenBytes+0x38>
	{
		if (*pBuff & Mask)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	781a      	ldrb	r2, [r3, #0]
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	4013      	ands	r3, r2
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d003      	beq.n	8000b10 <DMD_1COLOR_GetFrom8ScreenBytes+0x2c>
			Byte |= BitMask;
 8000b08:	7bfa      	ldrb	r2, [r7, #15]
 8000b0a:	7bbb      	ldrb	r3, [r7, #14]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	73fb      	strb	r3, [r7, #15]
	for (uint8_t BitMask = 0x80; BitMask; BitMask >>= 1, pBuff++)
 8000b10:	7bbb      	ldrb	r3, [r7, #14]
 8000b12:	085b      	lsrs	r3, r3, #1
 8000b14:	73bb      	strb	r3, [r7, #14]
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	7bbb      	ldrb	r3, [r7, #14]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d1eb      	bne.n	8000afa <DMD_1COLOR_GetFrom8ScreenBytes+0x16>
	}

//#if (DMD_1COLOR_Inverse == 1)
	//Инвертируем данные (так как LED панель горит при 0)
	Byte ^= 0xFF;
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
 8000b24:	43db      	mvns	r3, r3
 8000b26:	73fb      	strb	r3, [r7, #15]
//#endif

	return Byte;
 8000b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
	...

08000b38 <prepare_data>:
//==============================================================================


//Копирование из подготовленного буфера в массивиы для построчного вводы в матрицу
void prepare_data() {
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
	//Идем по строкам
	for (uint8_t i = 0; i < 4; i++) {
 8000b3e:	2300      	movs	r3, #0
 8000b40:	71fb      	strb	r3, [r7, #7]
 8000b42:	e042      	b.n	8000bca <prepare_data+0x92>
		//По столбцам
		for (uint8_t k = 0; k < 16; k++) {
 8000b44:	2300      	movs	r3, #0
 8000b46:	71bb      	strb	r3, [r7, #6]
 8000b48:	e039      	b.n	8000bbe <prepare_data+0x86>
			if (i == 0) {
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d10a      	bne.n	8000b66 <prepare_data+0x2e>
				data1[k] = DMD_1COLOR_Buff[i][k];
 8000b50:	79f9      	ldrb	r1, [r7, #7]
 8000b52:	79ba      	ldrb	r2, [r7, #6]
 8000b54:	79bb      	ldrb	r3, [r7, #6]
 8000b56:	4822      	ldr	r0, [pc, #136]	; (8000be0 <prepare_data+0xa8>)
 8000b58:	0109      	lsls	r1, r1, #4
 8000b5a:	4401      	add	r1, r0
 8000b5c:	440a      	add	r2, r1
 8000b5e:	7811      	ldrb	r1, [r2, #0]
 8000b60:	4a20      	ldr	r2, [pc, #128]	; (8000be4 <prepare_data+0xac>)
 8000b62:	54d1      	strb	r1, [r2, r3]
 8000b64:	e028      	b.n	8000bb8 <prepare_data+0x80>
			}
			else if (i == 1) {
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d10a      	bne.n	8000b82 <prepare_data+0x4a>
				data2[k] = DMD_1COLOR_Buff[i][k];
 8000b6c:	79f9      	ldrb	r1, [r7, #7]
 8000b6e:	79ba      	ldrb	r2, [r7, #6]
 8000b70:	79bb      	ldrb	r3, [r7, #6]
 8000b72:	481b      	ldr	r0, [pc, #108]	; (8000be0 <prepare_data+0xa8>)
 8000b74:	0109      	lsls	r1, r1, #4
 8000b76:	4401      	add	r1, r0
 8000b78:	440a      	add	r2, r1
 8000b7a:	7811      	ldrb	r1, [r2, #0]
 8000b7c:	4a1a      	ldr	r2, [pc, #104]	; (8000be8 <prepare_data+0xb0>)
 8000b7e:	54d1      	strb	r1, [r2, r3]
 8000b80:	e01a      	b.n	8000bb8 <prepare_data+0x80>
			}
			else if (i == 2) {
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d10a      	bne.n	8000b9e <prepare_data+0x66>
				data3[k] = DMD_1COLOR_Buff[i][k];
 8000b88:	79f9      	ldrb	r1, [r7, #7]
 8000b8a:	79ba      	ldrb	r2, [r7, #6]
 8000b8c:	79bb      	ldrb	r3, [r7, #6]
 8000b8e:	4814      	ldr	r0, [pc, #80]	; (8000be0 <prepare_data+0xa8>)
 8000b90:	0109      	lsls	r1, r1, #4
 8000b92:	4401      	add	r1, r0
 8000b94:	440a      	add	r2, r1
 8000b96:	7811      	ldrb	r1, [r2, #0]
 8000b98:	4a14      	ldr	r2, [pc, #80]	; (8000bec <prepare_data+0xb4>)
 8000b9a:	54d1      	strb	r1, [r2, r3]
 8000b9c:	e00c      	b.n	8000bb8 <prepare_data+0x80>
			}
			else if (i == 3) {
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	2b03      	cmp	r3, #3
 8000ba2:	d109      	bne.n	8000bb8 <prepare_data+0x80>
				data4[k] = DMD_1COLOR_Buff[i][k];
 8000ba4:	79f9      	ldrb	r1, [r7, #7]
 8000ba6:	79ba      	ldrb	r2, [r7, #6]
 8000ba8:	79bb      	ldrb	r3, [r7, #6]
 8000baa:	480d      	ldr	r0, [pc, #52]	; (8000be0 <prepare_data+0xa8>)
 8000bac:	0109      	lsls	r1, r1, #4
 8000bae:	4401      	add	r1, r0
 8000bb0:	440a      	add	r2, r1
 8000bb2:	7811      	ldrb	r1, [r2, #0]
 8000bb4:	4a0e      	ldr	r2, [pc, #56]	; (8000bf0 <prepare_data+0xb8>)
 8000bb6:	54d1      	strb	r1, [r2, r3]
		for (uint8_t k = 0; k < 16; k++) {
 8000bb8:	79bb      	ldrb	r3, [r7, #6]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	71bb      	strb	r3, [r7, #6]
 8000bbe:	79bb      	ldrb	r3, [r7, #6]
 8000bc0:	2b0f      	cmp	r3, #15
 8000bc2:	d9c2      	bls.n	8000b4a <prepare_data+0x12>
	for (uint8_t i = 0; i < 4; i++) {
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	71fb      	strb	r3, [r7, #7]
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	2b03      	cmp	r3, #3
 8000bce:	d9b9      	bls.n	8000b44 <prepare_data+0xc>
			}
		}
	}
}
 8000bd0:	bf00      	nop
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	20000120 	.word	0x20000120
 8000be4:	200001a0 	.word	0x200001a0
 8000be8:	200001b0 	.word	0x200001b0
 8000bec:	200001c0 	.word	0x200001c0
 8000bf0:	200001d0 	.word	0x200001d0

08000bf4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	; 0x28
 8000bf8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	4b46      	ldr	r3, [pc, #280]	; (8000d28 <MX_GPIO_Init+0x134>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a45      	ldr	r2, [pc, #276]	; (8000d28 <MX_GPIO_Init+0x134>)
 8000c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b43      	ldr	r3, [pc, #268]	; (8000d28 <MX_GPIO_Init+0x134>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	4b3f      	ldr	r3, [pc, #252]	; (8000d28 <MX_GPIO_Init+0x134>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a3e      	ldr	r2, [pc, #248]	; (8000d28 <MX_GPIO_Init+0x134>)
 8000c30:	f043 0304 	orr.w	r3, r3, #4
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b3c      	ldr	r3, [pc, #240]	; (8000d28 <MX_GPIO_Init+0x134>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0304 	and.w	r3, r3, #4
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	4b38      	ldr	r3, [pc, #224]	; (8000d28 <MX_GPIO_Init+0x134>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a37      	ldr	r2, [pc, #220]	; (8000d28 <MX_GPIO_Init+0x134>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b35      	ldr	r3, [pc, #212]	; (8000d28 <MX_GPIO_Init+0x134>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	4b31      	ldr	r3, [pc, #196]	; (8000d28 <MX_GPIO_Init+0x134>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a30      	ldr	r2, [pc, #192]	; (8000d28 <MX_GPIO_Init+0x134>)
 8000c68:	f043 0302 	orr.w	r3, r3, #2
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b2e      	ldr	r3, [pc, #184]	; (8000d28 <MX_GPIO_Init+0x134>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nOE_Pin|SCLK_Pin, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2150      	movs	r1, #80	; 0x50
 8000c7e:	482b      	ldr	r0, [pc, #172]	; (8000d2c <MX_GPIO_Init+0x138>)
 8000c80:	f002 ff0a 	bl	8003a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A_Pin|B_Pin, GPIO_PIN_RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2130      	movs	r1, #48	; 0x30
 8000c88:	4829      	ldr	r0, [pc, #164]	; (8000d30 <MX_GPIO_Init+0x13c>)
 8000c8a:	f002 ff05 	bl	8003a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin|ROTATE_Pin|DROP_Pin;
 8000c8e:	230f      	movs	r3, #15
 8000c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c92:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4823      	ldr	r0, [pc, #140]	; (8000d30 <MX_GPIO_Init+0x13c>)
 8000ca4:	f002 fd74 	bl	8003790 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = nOE_Pin|SCLK_Pin;
 8000ca8:	2350      	movs	r3, #80	; 0x50
 8000caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	481b      	ldr	r0, [pc, #108]	; (8000d2c <MX_GPIO_Init+0x138>)
 8000cc0:	f002 fd66 	bl	8003790 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin;
 8000cc4:	2330      	movs	r3, #48	; 0x30
 8000cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4815      	ldr	r0, [pc, #84]	; (8000d30 <MX_GPIO_Init+0x13c>)
 8000cdc:	f002 fd58 	bl	8003790 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	2006      	movs	r0, #6
 8000ce6:	f002 fd1c 	bl	8003722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000cea:	2006      	movs	r0, #6
 8000cec:	f002 fd35 	bl	800375a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	2007      	movs	r0, #7
 8000cf6:	f002 fd14 	bl	8003722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000cfa:	2007      	movs	r0, #7
 8000cfc:	f002 fd2d 	bl	800375a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2100      	movs	r1, #0
 8000d04:	2008      	movs	r0, #8
 8000d06:	f002 fd0c 	bl	8003722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000d0a:	2008      	movs	r0, #8
 8000d0c:	f002 fd25 	bl	800375a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2100      	movs	r1, #0
 8000d14:	2009      	movs	r0, #9
 8000d16:	f002 fd04 	bl	8003722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000d1a:	2009      	movs	r0, #9
 8000d1c:	f002 fd1d 	bl	800375a <HAL_NVIC_EnableIRQ>

}
 8000d20:	bf00      	nop
 8000d22:	3728      	adds	r7, #40	; 0x28
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020000 	.word	0x40020000
 8000d30:	40020800 	.word	0x40020800

08000d34 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <MX_I2C1_Init+0x50>)
 8000d3a:	4a13      	ldr	r2, [pc, #76]	; (8000d88 <MX_I2C1_Init+0x54>)
 8000d3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_I2C1_Init+0x50>)
 8000d40:	4a12      	ldr	r2, [pc, #72]	; (8000d8c <MX_I2C1_Init+0x58>)
 8000d42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <MX_I2C1_Init+0x50>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_I2C1_Init+0x50>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <MX_I2C1_Init+0x50>)
 8000d52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d58:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <MX_I2C1_Init+0x50>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <MX_I2C1_Init+0x50>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d64:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <MX_I2C1_Init+0x50>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <MX_I2C1_Init+0x50>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d70:	4804      	ldr	r0, [pc, #16]	; (8000d84 <MX_I2C1_Init+0x50>)
 8000d72:	f002 fecf 	bl	8003b14 <HAL_I2C_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d7c:	f001 fcb6 	bl	80026ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	200001e0 	.word	0x200001e0
 8000d88:	40005400 	.word	0x40005400
 8000d8c:	00061a80 	.word	0x00061a80

08000d90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	; 0x28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a19      	ldr	r2, [pc, #100]	; (8000e14 <HAL_I2C_MspInit+0x84>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d12b      	bne.n	8000e0a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <HAL_I2C_MspInit+0x88>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a17      	ldr	r2, [pc, #92]	; (8000e18 <HAL_I2C_MspInit+0x88>)
 8000dbc:	f043 0302 	orr.w	r3, r3, #2
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <HAL_I2C_MspInit+0x88>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dce:	23c0      	movs	r3, #192	; 0xc0
 8000dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd2:	2312      	movs	r3, #18
 8000dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dde:	2304      	movs	r3, #4
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	480c      	ldr	r0, [pc, #48]	; (8000e1c <HAL_I2C_MspInit+0x8c>)
 8000dea:	f002 fcd1 	bl	8003790 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <HAL_I2C_MspInit+0x88>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	4a08      	ldr	r2, [pc, #32]	; (8000e18 <HAL_I2C_MspInit+0x88>)
 8000df8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_I2C_MspInit+0x88>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	3728      	adds	r7, #40	; 0x28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40005400 	.word	0x40005400
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40020400 	.word	0x40020400

08000e20 <inside_play_field>:
volatile uint8_t rotated, hard_drop;
int8_t i,j;
uint8_t game_over = 0;
uint16_t adc_noise;

uint8_t inside_play_field(){
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
	return (gridX+i>=0)&&(gridX+i<8)&&(gridY+j<16)&&(gridY+j>=0);
 8000e24:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <inside_play_field+0x68>)
 8000e26:	881b      	ldrh	r3, [r3, #0]
 8000e28:	b21b      	sxth	r3, r3
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <inside_play_field+0x6c>)
 8000e2e:	f993 3000 	ldrsb.w	r3, [r3]
 8000e32:	4413      	add	r3, r2
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	db1f      	blt.n	8000e78 <inside_play_field+0x58>
 8000e38:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <inside_play_field+0x68>)
 8000e3a:	881b      	ldrh	r3, [r3, #0]
 8000e3c:	b21b      	sxth	r3, r3
 8000e3e:	461a      	mov	r2, r3
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <inside_play_field+0x6c>)
 8000e42:	f993 3000 	ldrsb.w	r3, [r3]
 8000e46:	4413      	add	r3, r2
 8000e48:	2b07      	cmp	r3, #7
 8000e4a:	dc15      	bgt.n	8000e78 <inside_play_field+0x58>
 8000e4c:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <inside_play_field+0x70>)
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	b21b      	sxth	r3, r3
 8000e52:	461a      	mov	r2, r3
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <inside_play_field+0x74>)
 8000e56:	f993 3000 	ldrsb.w	r3, [r3]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	2b0f      	cmp	r3, #15
 8000e5e:	dc0b      	bgt.n	8000e78 <inside_play_field+0x58>
 8000e60:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <inside_play_field+0x70>)
 8000e62:	881b      	ldrh	r3, [r3, #0]
 8000e64:	b21b      	sxth	r3, r3
 8000e66:	461a      	mov	r2, r3
 8000e68:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <inside_play_field+0x74>)
 8000e6a:	f993 3000 	ldrsb.w	r3, [r3]
 8000e6e:	4413      	add	r3, r2
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	db01      	blt.n	8000e78 <inside_play_field+0x58>
 8000e74:	2301      	movs	r3, #1
 8000e76:	e000      	b.n	8000e7a <inside_play_field+0x5a>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	b2db      	uxtb	r3, r3
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20000234 	.word	0x20000234
 8000e8c:	20000351 	.word	0x20000351
 8000e90:	20000236 	.word	0x20000236
 8000e94:	20000352 	.word	0x20000352

08000e98 <generate_piece>:


void generate_piece(char piece){
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
	for(i = 0; i < 4;i++){
 8000ea2:	4b60      	ldr	r3, [pc, #384]	; (8001024 <generate_piece+0x18c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
 8000ea8:	e028      	b.n	8000efc <generate_piece+0x64>
		for(j = 0; j < 4; j++){
 8000eaa:	4b5f      	ldr	r3, [pc, #380]	; (8001028 <generate_piece+0x190>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	701a      	strb	r2, [r3, #0]
 8000eb0:	e016      	b.n	8000ee0 <generate_piece+0x48>
			piece_matrix[i][j] = 0;
 8000eb2:	4b5c      	ldr	r3, [pc, #368]	; (8001024 <generate_piece+0x18c>)
 8000eb4:	f993 3000 	ldrsb.w	r3, [r3]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	4b5b      	ldr	r3, [pc, #364]	; (8001028 <generate_piece+0x190>)
 8000ebc:	f993 3000 	ldrsb.w	r3, [r3]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4a5a      	ldr	r2, [pc, #360]	; (800102c <generate_piece+0x194>)
 8000ec4:	0083      	lsls	r3, r0, #2
 8000ec6:	4413      	add	r3, r2
 8000ec8:	440b      	add	r3, r1
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 4; j++){
 8000ece:	4b56      	ldr	r3, [pc, #344]	; (8001028 <generate_piece+0x190>)
 8000ed0:	f993 3000 	ldrsb.w	r3, [r3]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	b25a      	sxtb	r2, r3
 8000edc:	4b52      	ldr	r3, [pc, #328]	; (8001028 <generate_piece+0x190>)
 8000ede:	701a      	strb	r2, [r3, #0]
 8000ee0:	4b51      	ldr	r3, [pc, #324]	; (8001028 <generate_piece+0x190>)
 8000ee2:	f993 3000 	ldrsb.w	r3, [r3]
 8000ee6:	2b03      	cmp	r3, #3
 8000ee8:	dde3      	ble.n	8000eb2 <generate_piece+0x1a>
	for(i = 0; i < 4;i++){
 8000eea:	4b4e      	ldr	r3, [pc, #312]	; (8001024 <generate_piece+0x18c>)
 8000eec:	f993 3000 	ldrsb.w	r3, [r3]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	b25a      	sxtb	r2, r3
 8000ef8:	4b4a      	ldr	r3, [pc, #296]	; (8001024 <generate_piece+0x18c>)
 8000efa:	701a      	strb	r2, [r3, #0]
 8000efc:	4b49      	ldr	r3, [pc, #292]	; (8001024 <generate_piece+0x18c>)
 8000efe:	f993 3000 	ldrsb.w	r3, [r3]
 8000f02:	2b03      	cmp	r3, #3
 8000f04:	ddd1      	ble.n	8000eaa <generate_piece+0x12>
		}
	}
	switch (piece){
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	3b49      	subs	r3, #73	; 0x49
 8000f0a:	2b11      	cmp	r3, #17
 8000f0c:	f200 8083 	bhi.w	8001016 <generate_piece+0x17e>
 8000f10:	a201      	add	r2, pc, #4	; (adr r2, 8000f18 <generate_piece+0x80>)
 8000f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f16:	bf00      	nop
 8000f18:	08000ffd 	.word	0x08000ffd
 8000f1c:	08000faf 	.word	0x08000faf
 8000f20:	08001017 	.word	0x08001017
 8000f24:	08000f95 	.word	0x08000f95
 8000f28:	08001017 	.word	0x08001017
 8000f2c:	08001017 	.word	0x08001017
 8000f30:	08000fc9 	.word	0x08000fc9
 8000f34:	08001017 	.word	0x08001017
 8000f38:	08001017 	.word	0x08001017
 8000f3c:	08001017 	.word	0x08001017
 8000f40:	08000f7b 	.word	0x08000f7b
 8000f44:	08000fe3 	.word	0x08000fe3
 8000f48:	08001017 	.word	0x08001017
 8000f4c:	08001017 	.word	0x08001017
 8000f50:	08001017 	.word	0x08001017
 8000f54:	08001017 	.word	0x08001017
 8000f58:	08001017 	.word	0x08001017
 8000f5c:	08000f61 	.word	0x08000f61
		case 'Z':{
			piece_matrix[0][1] = 1;
 8000f60:	4b32      	ldr	r3, [pc, #200]	; (800102c <generate_piece+0x194>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	705a      	strb	r2, [r3, #1]
			piece_matrix[1][1] = 1;
 8000f66:	4b31      	ldr	r3, [pc, #196]	; (800102c <generate_piece+0x194>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	715a      	strb	r2, [r3, #5]
			piece_matrix[1][2] = 1;
 8000f6c:	4b2f      	ldr	r3, [pc, #188]	; (800102c <generate_piece+0x194>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	719a      	strb	r2, [r3, #6]
			piece_matrix[2][2] = 1;
 8000f72:	4b2e      	ldr	r3, [pc, #184]	; (800102c <generate_piece+0x194>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	729a      	strb	r2, [r3, #10]
//			 {{0, 0, 0, 0},
//		  	  {1, 1, 0, 0},
//		 	  {0, 1, 1, 0},
//			  {0, 0, 0, 0}};
			break;
 8000f78:	e04d      	b.n	8001016 <generate_piece+0x17e>
		}
		case 'S':{
			piece_matrix[1][1] = 1;
 8000f7a:	4b2c      	ldr	r3, [pc, #176]	; (800102c <generate_piece+0x194>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	715a      	strb	r2, [r3, #5]
			piece_matrix[2][1] = 1;
 8000f80:	4b2a      	ldr	r3, [pc, #168]	; (800102c <generate_piece+0x194>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	725a      	strb	r2, [r3, #9]
			piece_matrix[0][2] = 1;
 8000f86:	4b29      	ldr	r3, [pc, #164]	; (800102c <generate_piece+0x194>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	709a      	strb	r2, [r3, #2]
			piece_matrix[1][2] = 1;
 8000f8c:	4b27      	ldr	r3, [pc, #156]	; (800102c <generate_piece+0x194>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	719a      	strb	r2, [r3, #6]
//			 {{0, 0, 0, 0},
//	  		  {0, 1, 1, 0},
//	 		  {1, 1, 0, 0},
// 			  {0, 0, 0, 0}};
		}
			break;
 8000f92:	e040      	b.n	8001016 <generate_piece+0x17e>
		case 'L':{
			piece_matrix[1][0] = 1;
 8000f94:	4b25      	ldr	r3, [pc, #148]	; (800102c <generate_piece+0x194>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	711a      	strb	r2, [r3, #4]
			piece_matrix[1][1] = 1;
 8000f9a:	4b24      	ldr	r3, [pc, #144]	; (800102c <generate_piece+0x194>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	715a      	strb	r2, [r3, #5]
			piece_matrix[1][2] = 1;
 8000fa0:	4b22      	ldr	r3, [pc, #136]	; (800102c <generate_piece+0x194>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	719a      	strb	r2, [r3, #6]
			piece_matrix[2][2] = 1;
 8000fa6:	4b21      	ldr	r3, [pc, #132]	; (800102c <generate_piece+0x194>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	729a      	strb	r2, [r3, #10]
//			 {{0, 1, 0, 0},
//	  		  {0, 1, 0, 0},
//	 		  {0, 1, 1, 0},
// 			  {0, 0, 0, 0}};
			break;
 8000fac:	e033      	b.n	8001016 <generate_piece+0x17e>
		}
		case 'J':{
			piece_matrix[2][0] = 1;
 8000fae:	4b1f      	ldr	r3, [pc, #124]	; (800102c <generate_piece+0x194>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	721a      	strb	r2, [r3, #8]
			piece_matrix[2][1] = 1;
 8000fb4:	4b1d      	ldr	r3, [pc, #116]	; (800102c <generate_piece+0x194>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	725a      	strb	r2, [r3, #9]
			piece_matrix[1][2] = 1;
 8000fba:	4b1c      	ldr	r3, [pc, #112]	; (800102c <generate_piece+0x194>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	719a      	strb	r2, [r3, #6]
			piece_matrix[2][2] = 1;
 8000fc0:	4b1a      	ldr	r3, [pc, #104]	; (800102c <generate_piece+0x194>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	729a      	strb	r2, [r3, #10]
//			 {{0, 0, 1, 0},
//	  		  {0, 0, 1, 0},
//	 		  {0, 1, 1, 0},
// 			  {0, 0, 0, 0}};
			break;
 8000fc6:	e026      	b.n	8001016 <generate_piece+0x17e>
		}
		case 'O':{
			piece_matrix[1][1] = 1;
 8000fc8:	4b18      	ldr	r3, [pc, #96]	; (800102c <generate_piece+0x194>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	715a      	strb	r2, [r3, #5]
			piece_matrix[2][1] = 1;
 8000fce:	4b17      	ldr	r3, [pc, #92]	; (800102c <generate_piece+0x194>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	725a      	strb	r2, [r3, #9]
			piece_matrix[1][2] = 1;
 8000fd4:	4b15      	ldr	r3, [pc, #84]	; (800102c <generate_piece+0x194>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	719a      	strb	r2, [r3, #6]
			piece_matrix[2][2] = 1;
 8000fda:	4b14      	ldr	r3, [pc, #80]	; (800102c <generate_piece+0x194>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	729a      	strb	r2, [r3, #10]
//			 {{0, 0, 0, 0},
//	  		  {0, 1, 1, 0},
//	 		  {0, 1, 1, 0},
// 			  {0, 0, 0, 0}};
			break;
 8000fe0:	e019      	b.n	8001016 <generate_piece+0x17e>
		}
		case 'T':{
			piece_matrix[0][1] = 1;
 8000fe2:	4b12      	ldr	r3, [pc, #72]	; (800102c <generate_piece+0x194>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	705a      	strb	r2, [r3, #1]
			piece_matrix[1][1] = 1;
 8000fe8:	4b10      	ldr	r3, [pc, #64]	; (800102c <generate_piece+0x194>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	715a      	strb	r2, [r3, #5]
			piece_matrix[2][1] = 1;
 8000fee:	4b0f      	ldr	r3, [pc, #60]	; (800102c <generate_piece+0x194>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	725a      	strb	r2, [r3, #9]
			piece_matrix[1][2] = 1;
 8000ff4:	4b0d      	ldr	r3, [pc, #52]	; (800102c <generate_piece+0x194>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	719a      	strb	r2, [r3, #6]
//			 {{0, 0, 0, 0},
//	  		  {1, 1, 1, 0},
//	 		  {0, 1, 0, 0},
// 			  {0, 0, 0, 0}};
			break;
 8000ffa:	e00c      	b.n	8001016 <generate_piece+0x17e>
		}
		case 'I':{
			piece_matrix[1][0] = 1;
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	; (800102c <generate_piece+0x194>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	711a      	strb	r2, [r3, #4]
			piece_matrix[1][1] = 1;
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <generate_piece+0x194>)
 8001004:	2201      	movs	r2, #1
 8001006:	715a      	strb	r2, [r3, #5]
			piece_matrix[1][2] = 1;
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <generate_piece+0x194>)
 800100a:	2201      	movs	r2, #1
 800100c:	719a      	strb	r2, [r3, #6]
			piece_matrix[1][3] = 1;
 800100e:	4b07      	ldr	r3, [pc, #28]	; (800102c <generate_piece+0x194>)
 8001010:	2201      	movs	r2, #1
 8001012:	71da      	strb	r2, [r3, #7]
//			 {{0, 1, 0, 0},
//	  		  {0, 1, 0, 0},
//	 		  {0, 1, 0, 0},
// 			  {0, 1, 0, 0}};
			break;
 8001014:	bf00      	nop
		}
	}
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000351 	.word	0x20000351
 8001028:	20000352 	.word	0x20000352
 800102c:	2000033c 	.word	0x2000033c

08001030 <rotate_clockwise>:

void rotate_clockwise(uint8_t matrix[4][4])
{
 8001030:	b480      	push	{r7}
 8001032:	b087      	sub	sp, #28
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
    int i, j, temp;

    // Transpose the matrix in place
    for (i = 0; i < 4; i++) {
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	e02d      	b.n	800109a <rotate_clockwise+0x6a>
        for (j = i + 1; j < 4; j++) {
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	3301      	adds	r3, #1
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	e023      	b.n	800108e <rotate_clockwise+0x5e>
            temp = matrix[i][j];
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	441a      	add	r2, r3
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	4413      	add	r3, r2
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	60fb      	str	r3, [r7, #12]
            matrix[i][j] = matrix[j][i];
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	18d1      	adds	r1, r2, r3
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	441a      	add	r2, r3
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	440b      	add	r3, r1
 800106a:	7819      	ldrb	r1, [r3, #0]
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	4413      	add	r3, r2
 8001070:	460a      	mov	r2, r1
 8001072:	701a      	strb	r2, [r3, #0]
            matrix[j][i] = temp;
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	441a      	add	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	b2d9      	uxtb	r1, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	4413      	add	r3, r2
 8001084:	460a      	mov	r2, r1
 8001086:	701a      	strb	r2, [r3, #0]
        for (j = i + 1; j < 4; j++) {
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	3301      	adds	r3, #1
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	2b03      	cmp	r3, #3
 8001092:	ddd8      	ble.n	8001046 <rotate_clockwise+0x16>
    for (i = 0; i < 4; i++) {
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	3301      	adds	r3, #1
 8001098:	617b      	str	r3, [r7, #20]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	2b03      	cmp	r3, #3
 800109e:	ddce      	ble.n	800103e <rotate_clockwise+0xe>
        }
    }

    // Reverse the rows of the transposed matrix
    for (i = 0; i < 2; i++) {
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	e030      	b.n	8001108 <rotate_clockwise+0xd8>
        for (j = 0; j < 4; j++) {
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	e027      	b.n	80010fc <rotate_clockwise+0xcc>
            temp = matrix[i][j];
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	441a      	add	r2, r3
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	4413      	add	r3, r2
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	60fb      	str	r3, [r7, #12]
            matrix[i][j] = matrix[3 - i][j];
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	f1c3 0303 	rsb	r3, r3, #3
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	18d1      	adds	r1, r2, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	441a      	add	r2, r3
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	440b      	add	r3, r1
 80010d4:	7819      	ldrb	r1, [r3, #0]
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	4413      	add	r3, r2
 80010da:	460a      	mov	r2, r1
 80010dc:	701a      	strb	r2, [r3, #0]
            matrix[3 - i][j] = temp;
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	f1c3 0303 	rsb	r3, r3, #3
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	441a      	add	r2, r3
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	b2d9      	uxtb	r1, r3
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	4413      	add	r3, r2
 80010f2:	460a      	mov	r2, r1
 80010f4:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < 4; j++) {
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	3301      	adds	r3, #1
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	2b03      	cmp	r3, #3
 8001100:	ddd4      	ble.n	80010ac <rotate_clockwise+0x7c>
    for (i = 0; i < 2; i++) {
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	3301      	adds	r3, #1
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	2b01      	cmp	r3, #1
 800110c:	ddcb      	ble.n	80010a6 <rotate_clockwise+0x76>
        }
    }
}
 800110e:	bf00      	nop
 8001110:	bf00      	nop
 8001112:	371c      	adds	r7, #28
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <rotate_counter_clockwise>:

void rotate_counter_clockwise(uint8_t matrix[4][4])
{
 800111c:	b480      	push	{r7}
 800111e:	b087      	sub	sp, #28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
    int i, j, temp;

    // Reverse the columns of the matrix
    for (i = 0; i < 4; i++) {
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	e02d      	b.n	8001186 <rotate_counter_clockwise+0x6a>
        for (j = 0; j < 2; j++) {
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	e024      	b.n	800117a <rotate_counter_clockwise+0x5e>
            temp = matrix[i][j];
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	441a      	add	r2, r3
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4413      	add	r3, r2
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	60fb      	str	r3, [r7, #12]
            matrix[i][j] = matrix[i][3 - j];
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	18d1      	adds	r1, r2, r3
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	f1c3 0303 	rsb	r3, r3, #3
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	0092      	lsls	r2, r2, #2
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	4402      	add	r2, r0
 8001156:	5cc9      	ldrb	r1, [r1, r3]
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4413      	add	r3, r2
 800115c:	460a      	mov	r2, r1
 800115e:	701a      	strb	r2, [r3, #0]
            matrix[i][3 - j] = temp;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	441a      	add	r2, r3
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	f1c3 0303 	rsb	r3, r3, #3
 800116e:	68f9      	ldr	r1, [r7, #12]
 8001170:	b2c9      	uxtb	r1, r1
 8001172:	54d1      	strb	r1, [r2, r3]
        for (j = 0; j < 2; j++) {
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	3301      	adds	r3, #1
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	2b01      	cmp	r3, #1
 800117e:	ddd7      	ble.n	8001130 <rotate_counter_clockwise+0x14>
    for (i = 0; i < 4; i++) {
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	3301      	adds	r3, #1
 8001184:	617b      	str	r3, [r7, #20]
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	2b03      	cmp	r3, #3
 800118a:	ddce      	ble.n	800112a <rotate_counter_clockwise+0xe>
        }
    }

    // Transpose the matrix in place
    for (i = 0; i < 4; i++) {
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	e02d      	b.n	80011ee <rotate_counter_clockwise+0xd2>
        for (j = i + 1; j < 4; j++) {
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	3301      	adds	r3, #1
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	e023      	b.n	80011e2 <rotate_counter_clockwise+0xc6>
            temp = matrix[i][j];
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	441a      	add	r2, r3
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4413      	add	r3, r2
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	60fb      	str	r3, [r7, #12]
            matrix[i][j] = matrix[j][i];
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	18d1      	adds	r1, r2, r3
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	441a      	add	r2, r3
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	440b      	add	r3, r1
 80011be:	7819      	ldrb	r1, [r3, #0]
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4413      	add	r3, r2
 80011c4:	460a      	mov	r2, r1
 80011c6:	701a      	strb	r2, [r3, #0]
            matrix[j][i] = temp;
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	441a      	add	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	b2d9      	uxtb	r1, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	4413      	add	r3, r2
 80011d8:	460a      	mov	r2, r1
 80011da:	701a      	strb	r2, [r3, #0]
        for (j = i + 1; j < 4; j++) {
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	3301      	adds	r3, #1
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	2b03      	cmp	r3, #3
 80011e6:	ddd8      	ble.n	800119a <rotate_counter_clockwise+0x7e>
    for (i = 0; i < 4; i++) {
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	3301      	adds	r3, #1
 80011ec:	617b      	str	r3, [r7, #20]
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	2b03      	cmp	r3, #3
 80011f2:	ddce      	ble.n	8001192 <rotate_counter_clockwise+0x76>
        }
    }
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	371c      	adds	r7, #28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <disp_row>:
			  grid[X+i][Y+j] = 0;
	  			  }
	  		  }
}

void disp_row(int row){
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

	  if (row == 0){
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d120      	bne.n	8001254 <disp_row+0x50>

		  		HAL_SPI_Transmit(&hspi1, data1, 16, 10);
 8001212:	230a      	movs	r3, #10
 8001214:	2210      	movs	r2, #16
 8001216:	4951      	ldr	r1, [pc, #324]	; (800135c <disp_row+0x158>)
 8001218:	4851      	ldr	r0, [pc, #324]	; (8001360 <disp_row+0x15c>)
 800121a:	f003 fa8c 	bl	8004736 <HAL_SPI_Transmit>
		  		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800121e:	bf00      	nop
 8001220:	484f      	ldr	r0, [pc, #316]	; (8001360 <disp_row+0x15c>)
 8001222:	f003 fbc4 	bl	80049ae <HAL_SPI_GetState>
 8001226:	4603      	mov	r3, r0
 8001228:	2b01      	cmp	r3, #1
 800122a:	d1f9      	bne.n	8001220 <disp_row+0x1c>

		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 800122c:	2200      	movs	r2, #0
 800122e:	2140      	movs	r1, #64	; 0x40
 8001230:	484c      	ldr	r0, [pc, #304]	; (8001364 <disp_row+0x160>)
 8001232:	f002 fc31 	bl	8003a98 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8001236:	2201      	movs	r2, #1
 8001238:	2140      	movs	r1, #64	; 0x40
 800123a:	484a      	ldr	r0, [pc, #296]	; (8001364 <disp_row+0x160>)
 800123c:	f002 fc2c 	bl	8003a98 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8001240:	2200      	movs	r2, #0
 8001242:	2110      	movs	r1, #16
 8001244:	4848      	ldr	r0, [pc, #288]	; (8001368 <disp_row+0x164>)
 8001246:	f002 fc27 	bl	8003a98 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	2120      	movs	r1, #32
 800124e:	4846      	ldr	r0, [pc, #280]	; (8001368 <disp_row+0x164>)
 8001250:	f002 fc22 	bl	8003a98 <HAL_GPIO_WritePin>
	  }
	  if (row == 1){
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d120      	bne.n	800129c <disp_row+0x98>

	  		HAL_SPI_Transmit(&hspi1, data2, 16, 10);
 800125a:	230a      	movs	r3, #10
 800125c:	2210      	movs	r2, #16
 800125e:	4943      	ldr	r1, [pc, #268]	; (800136c <disp_row+0x168>)
 8001260:	483f      	ldr	r0, [pc, #252]	; (8001360 <disp_row+0x15c>)
 8001262:	f003 fa68 	bl	8004736 <HAL_SPI_Transmit>
	  		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001266:	bf00      	nop
 8001268:	483d      	ldr	r0, [pc, #244]	; (8001360 <disp_row+0x15c>)
 800126a:	f003 fba0 	bl	80049ae <HAL_SPI_GetState>
 800126e:	4603      	mov	r3, r0
 8001270:	2b01      	cmp	r3, #1
 8001272:	d1f9      	bne.n	8001268 <disp_row+0x64>

		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	2140      	movs	r1, #64	; 0x40
 8001278:	483a      	ldr	r0, [pc, #232]	; (8001364 <disp_row+0x160>)
 800127a:	f002 fc0d 	bl	8003a98 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 800127e:	2201      	movs	r2, #1
 8001280:	2140      	movs	r1, #64	; 0x40
 8001282:	4838      	ldr	r0, [pc, #224]	; (8001364 <disp_row+0x160>)
 8001284:	f002 fc08 	bl	8003a98 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8001288:	2201      	movs	r2, #1
 800128a:	2110      	movs	r1, #16
 800128c:	4836      	ldr	r0, [pc, #216]	; (8001368 <disp_row+0x164>)
 800128e:	f002 fc03 	bl	8003a98 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	2120      	movs	r1, #32
 8001296:	4834      	ldr	r0, [pc, #208]	; (8001368 <disp_row+0x164>)
 8001298:	f002 fbfe 	bl	8003a98 <HAL_GPIO_WritePin>

	  }

	  if (row == 2){
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d120      	bne.n	80012e4 <disp_row+0xe0>

	  		HAL_SPI_Transmit(&hspi1, data3, 16, 10);
 80012a2:	230a      	movs	r3, #10
 80012a4:	2210      	movs	r2, #16
 80012a6:	4932      	ldr	r1, [pc, #200]	; (8001370 <disp_row+0x16c>)
 80012a8:	482d      	ldr	r0, [pc, #180]	; (8001360 <disp_row+0x15c>)
 80012aa:	f003 fa44 	bl	8004736 <HAL_SPI_Transmit>
	  		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80012ae:	bf00      	nop
 80012b0:	482b      	ldr	r0, [pc, #172]	; (8001360 <disp_row+0x15c>)
 80012b2:	f003 fb7c 	bl	80049ae <HAL_SPI_GetState>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d1f9      	bne.n	80012b0 <disp_row+0xac>

		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 80012bc:	2200      	movs	r2, #0
 80012be:	2140      	movs	r1, #64	; 0x40
 80012c0:	4828      	ldr	r0, [pc, #160]	; (8001364 <disp_row+0x160>)
 80012c2:	f002 fbe9 	bl	8003a98 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 80012c6:	2201      	movs	r2, #1
 80012c8:	2140      	movs	r1, #64	; 0x40
 80012ca:	4826      	ldr	r0, [pc, #152]	; (8001364 <disp_row+0x160>)
 80012cc:	f002 fbe4 	bl	8003a98 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2110      	movs	r1, #16
 80012d4:	4824      	ldr	r0, [pc, #144]	; (8001368 <disp_row+0x164>)
 80012d6:	f002 fbdf 	bl	8003a98 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 80012da:	2201      	movs	r2, #1
 80012dc:	2120      	movs	r1, #32
 80012de:	4822      	ldr	r0, [pc, #136]	; (8001368 <disp_row+0x164>)
 80012e0:	f002 fbda 	bl	8003a98 <HAL_GPIO_WritePin>

	  }

	  if (row == 3){
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b03      	cmp	r3, #3
 80012e8:	d120      	bne.n	800132c <disp_row+0x128>

	  		HAL_SPI_Transmit(&hspi1, data4, 16, 10);
 80012ea:	230a      	movs	r3, #10
 80012ec:	2210      	movs	r2, #16
 80012ee:	4921      	ldr	r1, [pc, #132]	; (8001374 <disp_row+0x170>)
 80012f0:	481b      	ldr	r0, [pc, #108]	; (8001360 <disp_row+0x15c>)
 80012f2:	f003 fa20 	bl	8004736 <HAL_SPI_Transmit>
	  		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80012f6:	bf00      	nop
 80012f8:	4819      	ldr	r0, [pc, #100]	; (8001360 <disp_row+0x15c>)
 80012fa:	f003 fb58 	bl	80049ae <HAL_SPI_GetState>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b01      	cmp	r3, #1
 8001302:	d1f9      	bne.n	80012f8 <disp_row+0xf4>

		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	2140      	movs	r1, #64	; 0x40
 8001308:	4816      	ldr	r0, [pc, #88]	; (8001364 <disp_row+0x160>)
 800130a:	f002 fbc5 	bl	8003a98 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 800130e:	2201      	movs	r2, #1
 8001310:	2140      	movs	r1, #64	; 0x40
 8001312:	4814      	ldr	r0, [pc, #80]	; (8001364 <disp_row+0x160>)
 8001314:	f002 fbc0 	bl	8003a98 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8001318:	2201      	movs	r2, #1
 800131a:	2110      	movs	r1, #16
 800131c:	4812      	ldr	r0, [pc, #72]	; (8001368 <disp_row+0x164>)
 800131e:	f002 fbbb 	bl	8003a98 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8001322:	2201      	movs	r2, #1
 8001324:	2120      	movs	r1, #32
 8001326:	4810      	ldr	r0, [pc, #64]	; (8001368 <disp_row+0x164>)
 8001328:	f002 fbb6 	bl	8003a98 <HAL_GPIO_WritePin>

	  }


	  HAL_GPIO_WritePin(nOE_GPIO_Port, nOE_Pin, GPIO_PIN_SET);
 800132c:	2201      	movs	r2, #1
 800132e:	2110      	movs	r1, #16
 8001330:	480c      	ldr	r0, [pc, #48]	; (8001364 <disp_row+0x160>)
 8001332:	f002 fbb1 	bl	8003a98 <HAL_GPIO_WritePin>
		  for(uint32_t x=0; x<=500; x++) {};
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	e002      	b.n	8001342 <disp_row+0x13e>
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	3301      	adds	r3, #1
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001348:	d9f8      	bls.n	800133c <disp_row+0x138>
	 HAL_GPIO_WritePin(nOE_GPIO_Port, nOE_Pin, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2110      	movs	r1, #16
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <disp_row+0x160>)
 8001350:	f002 fba2 	bl	8003a98 <HAL_GPIO_WritePin>
  }
 8001354:	bf00      	nop
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	200001a0 	.word	0x200001a0
 8001360:	20000358 	.word	0x20000358
 8001364:	40020000 	.word	0x40020000
 8001368:	40020800 	.word	0x40020800
 800136c:	200001b0 	.word	0x200001b0
 8001370:	200001c0 	.word	0x200001c0
 8001374:	200001d0 	.word	0x200001d0

08001378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001378:	b5b0      	push	{r4, r5, r7, lr}
 800137a:	b0ac      	sub	sp, #176	; 0xb0
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800137e:	f001 fca1 	bl	8002cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001382:	f001 f94b 	bl	800261c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001386:	f7ff fc35 	bl	8000bf4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800138a:	f001 f9b5 	bl	80026f8 <MX_SPI1_Init>
  MX_TIM3_Init();
 800138e:	f001 fbd3 	bl	8002b38 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001392:	f7ff f8f7 	bl	8000584 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001396:	f7ff fccd 	bl	8000d34 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
 HAL_GPIO_WritePin(nOE_GPIO_Port, nOE_Pin, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	2110      	movs	r1, #16
 800139e:	4881      	ldr	r0, [pc, #516]	; (80015a4 <main+0x22c>)
 80013a0:	f002 fb7a 	bl	8003a98 <HAL_GPIO_WritePin>
 HAL_TIM_Base_Start_IT(&htim3);
 80013a4:	4880      	ldr	r0, [pc, #512]	; (80015a8 <main+0x230>)
 80013a6:	f003 fc2b 	bl	8004c00 <HAL_TIM_Base_Start_IT>
 //initialize grid
 for (i = 0; i < 8; i++){
 80013aa:	4b80      	ldr	r3, [pc, #512]	; (80015ac <main+0x234>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
 80013b0:	e028      	b.n	8001404 <main+0x8c>
	 for(j = 0; j < 16; j++){
 80013b2:	4b7f      	ldr	r3, [pc, #508]	; (80015b0 <main+0x238>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]
 80013b8:	e016      	b.n	80013e8 <main+0x70>
		 grid[i][j] = 0;
 80013ba:	4b7c      	ldr	r3, [pc, #496]	; (80015ac <main+0x234>)
 80013bc:	f993 3000 	ldrsb.w	r3, [r3]
 80013c0:	4618      	mov	r0, r3
 80013c2:	4b7b      	ldr	r3, [pc, #492]	; (80015b0 <main+0x238>)
 80013c4:	f993 3000 	ldrsb.w	r3, [r3]
 80013c8:	4619      	mov	r1, r3
 80013ca:	4a7a      	ldr	r2, [pc, #488]	; (80015b4 <main+0x23c>)
 80013cc:	0103      	lsls	r3, r0, #4
 80013ce:	4413      	add	r3, r2
 80013d0:	440b      	add	r3, r1
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
	 for(j = 0; j < 16; j++){
 80013d6:	4b76      	ldr	r3, [pc, #472]	; (80015b0 <main+0x238>)
 80013d8:	f993 3000 	ldrsb.w	r3, [r3]
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	3301      	adds	r3, #1
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	b25a      	sxtb	r2, r3
 80013e4:	4b72      	ldr	r3, [pc, #456]	; (80015b0 <main+0x238>)
 80013e6:	701a      	strb	r2, [r3, #0]
 80013e8:	4b71      	ldr	r3, [pc, #452]	; (80015b0 <main+0x238>)
 80013ea:	f993 3000 	ldrsb.w	r3, [r3]
 80013ee:	2b0f      	cmp	r3, #15
 80013f0:	dde3      	ble.n	80013ba <main+0x42>
 for (i = 0; i < 8; i++){
 80013f2:	4b6e      	ldr	r3, [pc, #440]	; (80015ac <main+0x234>)
 80013f4:	f993 3000 	ldrsb.w	r3, [r3]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	3301      	adds	r3, #1
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	b25a      	sxtb	r2, r3
 8001400:	4b6a      	ldr	r3, [pc, #424]	; (80015ac <main+0x234>)
 8001402:	701a      	strb	r2, [r3, #0]
 8001404:	4b69      	ldr	r3, [pc, #420]	; (80015ac <main+0x234>)
 8001406:	f993 3000 	ldrsb.w	r3, [r3]
 800140a:	2b07      	cmp	r3, #7
 800140c:	ddd1      	ble.n	80013b2 <main+0x3a>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  while(!game_over){
 800140e:	f001 b8b6 	b.w	800257e <main+0x1206>
		  if(new_turn){
 8001412:	4b69      	ldr	r3, [pc, #420]	; (80015b8 <main+0x240>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	f000 8141 	beq.w	800169e <main+0x326>
			  //clear lines
			  //-----------

			  //check for lines to clear
			  uint8_t line_to_clear[16];
			  uint8_t temp_line = 1;
 800141c:	2301      	movs	r3, #1
 800141e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
			  for(j = 0; j < 16; j++){
 8001422:	4b63      	ldr	r3, [pc, #396]	; (80015b0 <main+0x238>)
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
 8001428:	e045      	b.n	80014b6 <main+0x13e>
				  for(i = 0; i < 8; i++){
 800142a:	4b60      	ldr	r3, [pc, #384]	; (80015ac <main+0x234>)
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]
 8001430:	e01b      	b.n	800146a <main+0xf2>
					  temp_line = temp_line*grid[i][j];
 8001432:	4b5e      	ldr	r3, [pc, #376]	; (80015ac <main+0x234>)
 8001434:	f993 3000 	ldrsb.w	r3, [r3]
 8001438:	4618      	mov	r0, r3
 800143a:	4b5d      	ldr	r3, [pc, #372]	; (80015b0 <main+0x238>)
 800143c:	f993 3000 	ldrsb.w	r3, [r3]
 8001440:	4619      	mov	r1, r3
 8001442:	4a5c      	ldr	r2, [pc, #368]	; (80015b4 <main+0x23c>)
 8001444:	0103      	lsls	r3, r0, #4
 8001446:	4413      	add	r3, r2
 8001448:	440b      	add	r3, r1
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 8001450:	fb12 f303 	smulbb	r3, r2, r3
 8001454:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
				  for(i = 0; i < 8; i++){
 8001458:	4b54      	ldr	r3, [pc, #336]	; (80015ac <main+0x234>)
 800145a:	f993 3000 	ldrsb.w	r3, [r3]
 800145e:	b2db      	uxtb	r3, r3
 8001460:	3301      	adds	r3, #1
 8001462:	b2db      	uxtb	r3, r3
 8001464:	b25a      	sxtb	r2, r3
 8001466:	4b51      	ldr	r3, [pc, #324]	; (80015ac <main+0x234>)
 8001468:	701a      	strb	r2, [r3, #0]
 800146a:	4b50      	ldr	r3, [pc, #320]	; (80015ac <main+0x234>)
 800146c:	f993 3000 	ldrsb.w	r3, [r3]
 8001470:	2b07      	cmp	r3, #7
 8001472:	ddde      	ble.n	8001432 <main+0xba>
				  }
				  if (temp_line) line_to_clear[j] = 1;
 8001474:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001478:	2b00      	cmp	r3, #0
 800147a:	d008      	beq.n	800148e <main+0x116>
 800147c:	4b4c      	ldr	r3, [pc, #304]	; (80015b0 <main+0x238>)
 800147e:	f993 3000 	ldrsb.w	r3, [r3]
 8001482:	33b0      	adds	r3, #176	; 0xb0
 8001484:	443b      	add	r3, r7
 8001486:	2201      	movs	r2, #1
 8001488:	f803 2c20 	strb.w	r2, [r3, #-32]
 800148c:	e007      	b.n	800149e <main+0x126>
				  else line_to_clear[j] = 0;
 800148e:	4b48      	ldr	r3, [pc, #288]	; (80015b0 <main+0x238>)
 8001490:	f993 3000 	ldrsb.w	r3, [r3]
 8001494:	33b0      	adds	r3, #176	; 0xb0
 8001496:	443b      	add	r3, r7
 8001498:	2200      	movs	r2, #0
 800149a:	f803 2c20 	strb.w	r2, [r3, #-32]
				  temp_line = 1;
 800149e:	2301      	movs	r3, #1
 80014a0:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
			  for(j = 0; j < 16; j++){
 80014a4:	4b42      	ldr	r3, [pc, #264]	; (80015b0 <main+0x238>)
 80014a6:	f993 3000 	ldrsb.w	r3, [r3]
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	3301      	adds	r3, #1
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	b25a      	sxtb	r2, r3
 80014b2:	4b3f      	ldr	r3, [pc, #252]	; (80015b0 <main+0x238>)
 80014b4:	701a      	strb	r2, [r3, #0]
 80014b6:	4b3e      	ldr	r3, [pc, #248]	; (80015b0 <main+0x238>)
 80014b8:	f993 3000 	ldrsb.w	r3, [r3]
 80014bc:	2b0f      	cmp	r3, #15
 80014be:	ddb4      	ble.n	800142a <main+0xb2>
			  }

			  //delete lines on grid
			  for (int8_t line = 15; line >= 0; line--){
 80014c0:	230f      	movs	r3, #15
 80014c2:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 80014c6:	e0a7      	b.n	8001618 <main+0x2a0>
				  if(line_to_clear[line]){
 80014c8:	f997 30ae 	ldrsb.w	r3, [r7, #174]	; 0xae
 80014cc:	33b0      	adds	r3, #176	; 0xb0
 80014ce:	443b      	add	r3, r7
 80014d0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f000 8098 	beq.w	800160a <main+0x292>
					for(j = line; j >= 0; j--){
 80014da:	4a35      	ldr	r2, [pc, #212]	; (80015b0 <main+0x238>)
 80014dc:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80014e0:	7013      	strb	r3, [r2, #0]
 80014e2:	e049      	b.n	8001578 <main+0x200>
					  for(i = 0; i < 8; i++){
 80014e4:	4b31      	ldr	r3, [pc, #196]	; (80015ac <main+0x234>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]
 80014ea:	e037      	b.n	800155c <main+0x1e4>
						  if (j == 0) grid[i][j] = 0;
 80014ec:	4b30      	ldr	r3, [pc, #192]	; (80015b0 <main+0x238>)
 80014ee:	f993 3000 	ldrsb.w	r3, [r3]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d10e      	bne.n	8001514 <main+0x19c>
 80014f6:	4b2d      	ldr	r3, [pc, #180]	; (80015ac <main+0x234>)
 80014f8:	f993 3000 	ldrsb.w	r3, [r3]
 80014fc:	4618      	mov	r0, r3
 80014fe:	4b2c      	ldr	r3, [pc, #176]	; (80015b0 <main+0x238>)
 8001500:	f993 3000 	ldrsb.w	r3, [r3]
 8001504:	4619      	mov	r1, r3
 8001506:	4a2b      	ldr	r2, [pc, #172]	; (80015b4 <main+0x23c>)
 8001508:	0103      	lsls	r3, r0, #4
 800150a:	4413      	add	r3, r2
 800150c:	440b      	add	r3, r1
 800150e:	2200      	movs	r2, #0
 8001510:	701a      	strb	r2, [r3, #0]
 8001512:	e01a      	b.n	800154a <main+0x1d2>
						  else grid[i][j] = grid[i][j-1];
 8001514:	4b25      	ldr	r3, [pc, #148]	; (80015ac <main+0x234>)
 8001516:	f993 3000 	ldrsb.w	r3, [r3]
 800151a:	461d      	mov	r5, r3
 800151c:	4b24      	ldr	r3, [pc, #144]	; (80015b0 <main+0x238>)
 800151e:	f993 3000 	ldrsb.w	r3, [r3]
 8001522:	3b01      	subs	r3, #1
 8001524:	4a21      	ldr	r2, [pc, #132]	; (80015ac <main+0x234>)
 8001526:	f992 2000 	ldrsb.w	r2, [r2]
 800152a:	4614      	mov	r4, r2
 800152c:	4a20      	ldr	r2, [pc, #128]	; (80015b0 <main+0x238>)
 800152e:	f992 2000 	ldrsb.w	r2, [r2]
 8001532:	4610      	mov	r0, r2
 8001534:	491f      	ldr	r1, [pc, #124]	; (80015b4 <main+0x23c>)
 8001536:	012a      	lsls	r2, r5, #4
 8001538:	440a      	add	r2, r1
 800153a:	4413      	add	r3, r2
 800153c:	7819      	ldrb	r1, [r3, #0]
 800153e:	4a1d      	ldr	r2, [pc, #116]	; (80015b4 <main+0x23c>)
 8001540:	0123      	lsls	r3, r4, #4
 8001542:	4413      	add	r3, r2
 8001544:	4403      	add	r3, r0
 8001546:	460a      	mov	r2, r1
 8001548:	701a      	strb	r2, [r3, #0]
					  for(i = 0; i < 8; i++){
 800154a:	4b18      	ldr	r3, [pc, #96]	; (80015ac <main+0x234>)
 800154c:	f993 3000 	ldrsb.w	r3, [r3]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	3301      	adds	r3, #1
 8001554:	b2db      	uxtb	r3, r3
 8001556:	b25a      	sxtb	r2, r3
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <main+0x234>)
 800155a:	701a      	strb	r2, [r3, #0]
 800155c:	4b13      	ldr	r3, [pc, #76]	; (80015ac <main+0x234>)
 800155e:	f993 3000 	ldrsb.w	r3, [r3]
 8001562:	2b07      	cmp	r3, #7
 8001564:	ddc2      	ble.n	80014ec <main+0x174>
					for(j = line; j >= 0; j--){
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <main+0x238>)
 8001568:	f993 3000 	ldrsb.w	r3, [r3]
 800156c:	b2db      	uxtb	r3, r3
 800156e:	3b01      	subs	r3, #1
 8001570:	b2db      	uxtb	r3, r3
 8001572:	b25a      	sxtb	r2, r3
 8001574:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <main+0x238>)
 8001576:	701a      	strb	r2, [r3, #0]
 8001578:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <main+0x238>)
 800157a:	f993 3000 	ldrsb.w	r3, [r3]
 800157e:	2b00      	cmp	r3, #0
 8001580:	dab0      	bge.n	80014e4 <main+0x16c>
					  }
					}

					//move everything down
					for(int8_t line_fix = 15; line_fix >= 0; line_fix--){
 8001582:	230f      	movs	r3, #15
 8001584:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
 8001588:	e02c      	b.n	80015e4 <main+0x26c>
						if (line_fix == 0) line_to_clear[line_fix] = 0;
 800158a:	f997 30ad 	ldrsb.w	r3, [r7, #173]	; 0xad
 800158e:	2b00      	cmp	r3, #0
 8001590:	d114      	bne.n	80015bc <main+0x244>
 8001592:	f997 30ad 	ldrsb.w	r3, [r7, #173]	; 0xad
 8001596:	33b0      	adds	r3, #176	; 0xb0
 8001598:	443b      	add	r3, r7
 800159a:	2200      	movs	r2, #0
 800159c:	f803 2c20 	strb.w	r2, [r3, #-32]
 80015a0:	e019      	b.n	80015d6 <main+0x25e>
 80015a2:	bf00      	nop
 80015a4:	40020000 	.word	0x40020000
 80015a8:	200003b4 	.word	0x200003b4
 80015ac:	20000351 	.word	0x20000351
 80015b0:	20000352 	.word	0x20000352
 80015b4:	20000238 	.word	0x20000238
 80015b8:	2000000b 	.word	0x2000000b
						else line_to_clear[line_fix] = line_to_clear[line_fix-1];
 80015bc:	f997 30ad 	ldrsb.w	r3, [r7, #173]	; 0xad
 80015c0:	1e5a      	subs	r2, r3, #1
 80015c2:	f997 30ad 	ldrsb.w	r3, [r7, #173]	; 0xad
 80015c6:	32b0      	adds	r2, #176	; 0xb0
 80015c8:	443a      	add	r2, r7
 80015ca:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 80015ce:	33b0      	adds	r3, #176	; 0xb0
 80015d0:	443b      	add	r3, r7
 80015d2:	f803 2c20 	strb.w	r2, [r3, #-32]
					for(int8_t line_fix = 15; line_fix >= 0; line_fix--){
 80015d6:	f997 30ad 	ldrsb.w	r3, [r7, #173]	; 0xad
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	3b01      	subs	r3, #1
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
 80015e4:	f997 30ad 	ldrsb.w	r3, [r7, #173]	; 0xad
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	dace      	bge.n	800158a <main+0x212>
					}

					if(line_to_clear[line]) line++;
 80015ec:	f997 30ae 	ldrsb.w	r3, [r7, #174]	; 0xae
 80015f0:	33b0      	adds	r3, #176	; 0xb0
 80015f2:	443b      	add	r3, r7
 80015f4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d006      	beq.n	800160a <main+0x292>
 80015fc:	f997 30ae 	ldrsb.w	r3, [r7, #174]	; 0xae
 8001600:	b2db      	uxtb	r3, r3
 8001602:	3301      	adds	r3, #1
 8001604:	b2db      	uxtb	r3, r3
 8001606:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
			  for (int8_t line = 15; line >= 0; line--){
 800160a:	f997 30ae 	ldrsb.w	r3, [r7, #174]	; 0xae
 800160e:	b2db      	uxtb	r3, r3
 8001610:	3b01      	subs	r3, #1
 8001612:	b2db      	uxtb	r3, r3
 8001614:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 8001618:	f997 30ae 	ldrsb.w	r3, [r7, #174]	; 0xae
 800161c:	2b00      	cmp	r3, #0
 800161e:	f6bf af53 	bge.w	80014c8 <main+0x150>
				  }
			  }

			  HAL_ADC_Start(&hadc1);
 8001622:	4899      	ldr	r0, [pc, #612]	; (8001888 <main+0x510>)
 8001624:	f001 fc28 	bl	8002e78 <HAL_ADC_Start>
			  HAL_ADC_PollForConversion(&hadc1, 1);
 8001628:	2101      	movs	r1, #1
 800162a:	4897      	ldr	r0, [pc, #604]	; (8001888 <main+0x510>)
 800162c:	f001 fcd8 	bl	8002fe0 <HAL_ADC_PollForConversion>
			  adc_noise = HAL_ADC_GetValue(&hadc1);
 8001630:	4895      	ldr	r0, [pc, #596]	; (8001888 <main+0x510>)
 8001632:	f001 fd60 	bl	80030f6 <HAL_ADC_GetValue>
 8001636:	4603      	mov	r3, r0
 8001638:	b29a      	uxth	r2, r3
 800163a:	4b94      	ldr	r3, [pc, #592]	; (800188c <main+0x514>)
 800163c:	801a      	strh	r2, [r3, #0]
			  piece = piece_pool[(rand()+adc_noise)%7];
 800163e:	f004 f961 	bl	8005904 <rand>
 8001642:	4603      	mov	r3, r0
 8001644:	4a91      	ldr	r2, [pc, #580]	; (800188c <main+0x514>)
 8001646:	8812      	ldrh	r2, [r2, #0]
 8001648:	441a      	add	r2, r3
 800164a:	4b91      	ldr	r3, [pc, #580]	; (8001890 <main+0x518>)
 800164c:	fb83 1302 	smull	r1, r3, r3, r2
 8001650:	4413      	add	r3, r2
 8001652:	1099      	asrs	r1, r3, #2
 8001654:	17d3      	asrs	r3, r2, #31
 8001656:	1ac9      	subs	r1, r1, r3
 8001658:	460b      	mov	r3, r1
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	1a5b      	subs	r3, r3, r1
 800165e:	1ad1      	subs	r1, r2, r3
 8001660:	4b8c      	ldr	r3, [pc, #560]	; (8001894 <main+0x51c>)
 8001662:	5c5a      	ldrb	r2, [r3, r1]
 8001664:	4b8c      	ldr	r3, [pc, #560]	; (8001898 <main+0x520>)
 8001666:	701a      	strb	r2, [r3, #0]
			  generate_piece(piece);
 8001668:	4b8b      	ldr	r3, [pc, #556]	; (8001898 <main+0x520>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fc13 	bl	8000e98 <generate_piece>
			  gridX = 2;
 8001672:	4b8a      	ldr	r3, [pc, #552]	; (800189c <main+0x524>)
 8001674:	2202      	movs	r2, #2
 8001676:	801a      	strh	r2, [r3, #0]
			  gridY = -3;
 8001678:	4b89      	ldr	r3, [pc, #548]	; (80018a0 <main+0x528>)
 800167a:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800167e:	801a      	strh	r2, [r3, #0]
			  new_turn = 0;
 8001680:	4b88      	ldr	r3, [pc, #544]	; (80018a4 <main+0x52c>)
 8001682:	2200      	movs	r2, #0
 8001684:	701a      	strb	r2, [r3, #0]
			  moved_down = 0;
 8001686:	4b88      	ldr	r3, [pc, #544]	; (80018a8 <main+0x530>)
 8001688:	2200      	movs	r2, #0
 800168a:	701a      	strb	r2, [r3, #0]
			  moved_left = 0;
 800168c:	4b87      	ldr	r3, [pc, #540]	; (80018ac <main+0x534>)
 800168e:	2200      	movs	r2, #0
 8001690:	701a      	strb	r2, [r3, #0]
			  moved_right = 0;
 8001692:	4b87      	ldr	r3, [pc, #540]	; (80018b0 <main+0x538>)
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]
			  hard_drop = 0;
 8001698:	4b86      	ldr	r3, [pc, #536]	; (80018b4 <main+0x53c>)
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
		  }

		  //check for every event
		  if(moved_down){
 800169e:	4b82      	ldr	r3, [pc, #520]	; (80018a8 <main+0x530>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f000 8149 	beq.w	800193c <main+0x5c4>
			  //check for collision with grid
						uint8_t floor_collided = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
						for(i = 0; i < 4; i++){
 80016b0:	4b81      	ldr	r3, [pc, #516]	; (80018b8 <main+0x540>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]
 80016b6:	e09b      	b.n	80017f0 <main+0x478>
							for(j= 0; j < 4; j++){
 80016b8:	4b80      	ldr	r3, [pc, #512]	; (80018bc <main+0x544>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]
 80016be:	e088      	b.n	80017d2 <main+0x45a>
								if (gridY + j >= 16) floor_collided += piece_matrix[i][j]*1;
 80016c0:	4b77      	ldr	r3, [pc, #476]	; (80018a0 <main+0x528>)
 80016c2:	881b      	ldrh	r3, [r3, #0]
 80016c4:	b21b      	sxth	r3, r3
 80016c6:	461a      	mov	r2, r3
 80016c8:	4b7c      	ldr	r3, [pc, #496]	; (80018bc <main+0x544>)
 80016ca:	f993 3000 	ldrsb.w	r3, [r3]
 80016ce:	4413      	add	r3, r2
 80016d0:	2b0f      	cmp	r3, #15
 80016d2:	dd12      	ble.n	80016fa <main+0x382>
 80016d4:	4b78      	ldr	r3, [pc, #480]	; (80018b8 <main+0x540>)
 80016d6:	f993 3000 	ldrsb.w	r3, [r3]
 80016da:	4618      	mov	r0, r3
 80016dc:	4b77      	ldr	r3, [pc, #476]	; (80018bc <main+0x544>)
 80016de:	f993 3000 	ldrsb.w	r3, [r3]
 80016e2:	4619      	mov	r1, r3
 80016e4:	4a76      	ldr	r2, [pc, #472]	; (80018c0 <main+0x548>)
 80016e6:	0083      	lsls	r3, r0, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	440b      	add	r3, r1
 80016ec:	781a      	ldrb	r2, [r3, #0]
 80016ee:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 80016f2:	4413      	add	r3, r2
 80016f4:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
 80016f8:	e02f      	b.n	800175a <main+0x3e2>
								else if (inside_play_field())
 80016fa:	f7ff fb91 	bl	8000e20 <inside_play_field>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d02a      	beq.n	800175a <main+0x3e2>
									floor_collided += piece_matrix[i][j]*grid[gridX+i][gridY+j];
 8001704:	4b6c      	ldr	r3, [pc, #432]	; (80018b8 <main+0x540>)
 8001706:	f993 3000 	ldrsb.w	r3, [r3]
 800170a:	4618      	mov	r0, r3
 800170c:	4b6b      	ldr	r3, [pc, #428]	; (80018bc <main+0x544>)
 800170e:	f993 3000 	ldrsb.w	r3, [r3]
 8001712:	4619      	mov	r1, r3
 8001714:	4a6a      	ldr	r2, [pc, #424]	; (80018c0 <main+0x548>)
 8001716:	0083      	lsls	r3, r0, #2
 8001718:	4413      	add	r3, r2
 800171a:	440b      	add	r3, r1
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	4b5e      	ldr	r3, [pc, #376]	; (800189c <main+0x524>)
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	b21b      	sxth	r3, r3
 8001726:	461a      	mov	r2, r3
 8001728:	4b63      	ldr	r3, [pc, #396]	; (80018b8 <main+0x540>)
 800172a:	f993 3000 	ldrsb.w	r3, [r3]
 800172e:	441a      	add	r2, r3
 8001730:	4b5b      	ldr	r3, [pc, #364]	; (80018a0 <main+0x528>)
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	b21b      	sxth	r3, r3
 8001736:	4619      	mov	r1, r3
 8001738:	4b60      	ldr	r3, [pc, #384]	; (80018bc <main+0x544>)
 800173a:	f993 3000 	ldrsb.w	r3, [r3]
 800173e:	440b      	add	r3, r1
 8001740:	4960      	ldr	r1, [pc, #384]	; (80018c4 <main+0x54c>)
 8001742:	0112      	lsls	r2, r2, #4
 8001744:	440a      	add	r2, r1
 8001746:	4413      	add	r3, r2
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	fb00 f303 	mul.w	r3, r0, r3
 800174e:	b2da      	uxtb	r2, r3
 8001750:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8001754:	4413      	add	r3, r2
 8001756:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
								if((piece_matrix[i][j] && grid[gridX+i][gridY+j]) && (gridY+j == 0))
 800175a:	4b57      	ldr	r3, [pc, #348]	; (80018b8 <main+0x540>)
 800175c:	f993 3000 	ldrsb.w	r3, [r3]
 8001760:	4618      	mov	r0, r3
 8001762:	4b56      	ldr	r3, [pc, #344]	; (80018bc <main+0x544>)
 8001764:	f993 3000 	ldrsb.w	r3, [r3]
 8001768:	4619      	mov	r1, r3
 800176a:	4a55      	ldr	r2, [pc, #340]	; (80018c0 <main+0x548>)
 800176c:	0083      	lsls	r3, r0, #2
 800176e:	4413      	add	r3, r2
 8001770:	440b      	add	r3, r1
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d023      	beq.n	80017c0 <main+0x448>
 8001778:	4b48      	ldr	r3, [pc, #288]	; (800189c <main+0x524>)
 800177a:	881b      	ldrh	r3, [r3, #0]
 800177c:	b21b      	sxth	r3, r3
 800177e:	461a      	mov	r2, r3
 8001780:	4b4d      	ldr	r3, [pc, #308]	; (80018b8 <main+0x540>)
 8001782:	f993 3000 	ldrsb.w	r3, [r3]
 8001786:	441a      	add	r2, r3
 8001788:	4b45      	ldr	r3, [pc, #276]	; (80018a0 <main+0x528>)
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	b21b      	sxth	r3, r3
 800178e:	4619      	mov	r1, r3
 8001790:	4b4a      	ldr	r3, [pc, #296]	; (80018bc <main+0x544>)
 8001792:	f993 3000 	ldrsb.w	r3, [r3]
 8001796:	440b      	add	r3, r1
 8001798:	494a      	ldr	r1, [pc, #296]	; (80018c4 <main+0x54c>)
 800179a:	0112      	lsls	r2, r2, #4
 800179c:	440a      	add	r2, r1
 800179e:	4413      	add	r3, r2
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d00c      	beq.n	80017c0 <main+0x448>
 80017a6:	4b3e      	ldr	r3, [pc, #248]	; (80018a0 <main+0x528>)
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	b21b      	sxth	r3, r3
 80017ac:	461a      	mov	r2, r3
 80017ae:	4b43      	ldr	r3, [pc, #268]	; (80018bc <main+0x544>)
 80017b0:	f993 3000 	ldrsb.w	r3, [r3]
 80017b4:	4413      	add	r3, r2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d102      	bne.n	80017c0 <main+0x448>
									game_over = 1;
 80017ba:	4b43      	ldr	r3, [pc, #268]	; (80018c8 <main+0x550>)
 80017bc:	2201      	movs	r2, #1
 80017be:	701a      	strb	r2, [r3, #0]
							for(j= 0; j < 4; j++){
 80017c0:	4b3e      	ldr	r3, [pc, #248]	; (80018bc <main+0x544>)
 80017c2:	f993 3000 	ldrsb.w	r3, [r3]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	3301      	adds	r3, #1
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	b25a      	sxtb	r2, r3
 80017ce:	4b3b      	ldr	r3, [pc, #236]	; (80018bc <main+0x544>)
 80017d0:	701a      	strb	r2, [r3, #0]
 80017d2:	4b3a      	ldr	r3, [pc, #232]	; (80018bc <main+0x544>)
 80017d4:	f993 3000 	ldrsb.w	r3, [r3]
 80017d8:	2b03      	cmp	r3, #3
 80017da:	f77f af71 	ble.w	80016c0 <main+0x348>
						for(i = 0; i < 4; i++){
 80017de:	4b36      	ldr	r3, [pc, #216]	; (80018b8 <main+0x540>)
 80017e0:	f993 3000 	ldrsb.w	r3, [r3]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	3301      	adds	r3, #1
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	b25a      	sxtb	r2, r3
 80017ec:	4b32      	ldr	r3, [pc, #200]	; (80018b8 <main+0x540>)
 80017ee:	701a      	strb	r2, [r3, #0]
 80017f0:	4b31      	ldr	r3, [pc, #196]	; (80018b8 <main+0x540>)
 80017f2:	f993 3000 	ldrsb.w	r3, [r3]
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	f77f af5e 	ble.w	80016b8 <main+0x340>
							}
						}
						if (floor_collided) {
 80017fc:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 8098 	beq.w	8001936 <main+0x5be>
							new_turn = 1;
 8001806:	4b27      	ldr	r3, [pc, #156]	; (80018a4 <main+0x52c>)
 8001808:	2201      	movs	r2, #1
 800180a:	701a      	strb	r2, [r3, #0]
							gridY--;
 800180c:	4b24      	ldr	r3, [pc, #144]	; (80018a0 <main+0x528>)
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	b21b      	sxth	r3, r3
 8001812:	b29b      	uxth	r3, r3
 8001814:	3b01      	subs	r3, #1
 8001816:	b29b      	uxth	r3, r3
 8001818:	b21a      	sxth	r2, r3
 800181a:	4b21      	ldr	r3, [pc, #132]	; (80018a0 <main+0x528>)
 800181c:	801a      	strh	r2, [r3, #0]
							//save grid
							  for(i = 0; i<4; i++){
 800181e:	4b26      	ldr	r3, [pc, #152]	; (80018b8 <main+0x540>)
 8001820:	2200      	movs	r2, #0
 8001822:	701a      	strb	r2, [r3, #0]
 8001824:	e081      	b.n	800192a <main+0x5b2>
								  for(j = 0; j<4; j++){
 8001826:	4b25      	ldr	r3, [pc, #148]	; (80018bc <main+0x544>)
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]
 800182c:	e06f      	b.n	800190e <main+0x596>
									  if(inside_play_field())
 800182e:	f7ff faf7 	bl	8000e20 <inside_play_field>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d061      	beq.n	80018fc <main+0x584>
										  grid[gridX+i][gridY+j] = grid[gridX+i][gridY+j]||piece_matrix[i][j];
 8001838:	4b18      	ldr	r3, [pc, #96]	; (800189c <main+0x524>)
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	b21b      	sxth	r3, r3
 800183e:	461a      	mov	r2, r3
 8001840:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <main+0x540>)
 8001842:	f993 3000 	ldrsb.w	r3, [r3]
 8001846:	441a      	add	r2, r3
 8001848:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <main+0x528>)
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	b21b      	sxth	r3, r3
 800184e:	4619      	mov	r1, r3
 8001850:	4b1a      	ldr	r3, [pc, #104]	; (80018bc <main+0x544>)
 8001852:	f993 3000 	ldrsb.w	r3, [r3]
 8001856:	440b      	add	r3, r1
 8001858:	491a      	ldr	r1, [pc, #104]	; (80018c4 <main+0x54c>)
 800185a:	0112      	lsls	r2, r2, #4
 800185c:	440a      	add	r2, r1
 800185e:	4413      	add	r3, r2
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10e      	bne.n	8001884 <main+0x50c>
 8001866:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <main+0x540>)
 8001868:	f993 3000 	ldrsb.w	r3, [r3]
 800186c:	4618      	mov	r0, r3
 800186e:	4b13      	ldr	r3, [pc, #76]	; (80018bc <main+0x544>)
 8001870:	f993 3000 	ldrsb.w	r3, [r3]
 8001874:	4619      	mov	r1, r3
 8001876:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <main+0x548>)
 8001878:	0083      	lsls	r3, r0, #2
 800187a:	4413      	add	r3, r2
 800187c:	440b      	add	r3, r1
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d023      	beq.n	80018cc <main+0x554>
 8001884:	2101      	movs	r1, #1
 8001886:	e022      	b.n	80018ce <main+0x556>
 8001888:	20000098 	.word	0x20000098
 800188c:	20000354 	.word	0x20000354
 8001890:	92492493 	.word	0x92492493
 8001894:	20000004 	.word	0x20000004
 8001898:	20000338 	.word	0x20000338
 800189c:	20000234 	.word	0x20000234
 80018a0:	20000236 	.word	0x20000236
 80018a4:	2000000b 	.word	0x2000000b
 80018a8:	2000034c 	.word	0x2000034c
 80018ac:	2000034d 	.word	0x2000034d
 80018b0:	2000034e 	.word	0x2000034e
 80018b4:	20000350 	.word	0x20000350
 80018b8:	20000351 	.word	0x20000351
 80018bc:	20000352 	.word	0x20000352
 80018c0:	2000033c 	.word	0x2000033c
 80018c4:	20000238 	.word	0x20000238
 80018c8:	20000353 	.word	0x20000353
 80018cc:	2100      	movs	r1, #0
 80018ce:	4b9b      	ldr	r3, [pc, #620]	; (8001b3c <main+0x7c4>)
 80018d0:	881b      	ldrh	r3, [r3, #0]
 80018d2:	b21b      	sxth	r3, r3
 80018d4:	461a      	mov	r2, r3
 80018d6:	4b9a      	ldr	r3, [pc, #616]	; (8001b40 <main+0x7c8>)
 80018d8:	f993 3000 	ldrsb.w	r3, [r3]
 80018dc:	441a      	add	r2, r3
 80018de:	4b99      	ldr	r3, [pc, #612]	; (8001b44 <main+0x7cc>)
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	b21b      	sxth	r3, r3
 80018e4:	4618      	mov	r0, r3
 80018e6:	4b98      	ldr	r3, [pc, #608]	; (8001b48 <main+0x7d0>)
 80018e8:	f993 3000 	ldrsb.w	r3, [r3]
 80018ec:	4403      	add	r3, r0
 80018ee:	b2c8      	uxtb	r0, r1
 80018f0:	4996      	ldr	r1, [pc, #600]	; (8001b4c <main+0x7d4>)
 80018f2:	0112      	lsls	r2, r2, #4
 80018f4:	440a      	add	r2, r1
 80018f6:	4413      	add	r3, r2
 80018f8:	4602      	mov	r2, r0
 80018fa:	701a      	strb	r2, [r3, #0]
								  for(j = 0; j<4; j++){
 80018fc:	4b92      	ldr	r3, [pc, #584]	; (8001b48 <main+0x7d0>)
 80018fe:	f993 3000 	ldrsb.w	r3, [r3]
 8001902:	b2db      	uxtb	r3, r3
 8001904:	3301      	adds	r3, #1
 8001906:	b2db      	uxtb	r3, r3
 8001908:	b25a      	sxtb	r2, r3
 800190a:	4b8f      	ldr	r3, [pc, #572]	; (8001b48 <main+0x7d0>)
 800190c:	701a      	strb	r2, [r3, #0]
 800190e:	4b8e      	ldr	r3, [pc, #568]	; (8001b48 <main+0x7d0>)
 8001910:	f993 3000 	ldrsb.w	r3, [r3]
 8001914:	2b03      	cmp	r3, #3
 8001916:	dd8a      	ble.n	800182e <main+0x4b6>
							  for(i = 0; i<4; i++){
 8001918:	4b89      	ldr	r3, [pc, #548]	; (8001b40 <main+0x7c8>)
 800191a:	f993 3000 	ldrsb.w	r3, [r3]
 800191e:	b2db      	uxtb	r3, r3
 8001920:	3301      	adds	r3, #1
 8001922:	b2db      	uxtb	r3, r3
 8001924:	b25a      	sxtb	r2, r3
 8001926:	4b86      	ldr	r3, [pc, #536]	; (8001b40 <main+0x7c8>)
 8001928:	701a      	strb	r2, [r3, #0]
 800192a:	4b85      	ldr	r3, [pc, #532]	; (8001b40 <main+0x7c8>)
 800192c:	f993 3000 	ldrsb.w	r3, [r3]
 8001930:	2b03      	cmp	r3, #3
 8001932:	f77f af78 	ble.w	8001826 <main+0x4ae>
								  }
							  }
						}
			  moved_down = 0;
 8001936:	4b86      	ldr	r3, [pc, #536]	; (8001b50 <main+0x7d8>)
 8001938:	2200      	movs	r2, #0
 800193a:	701a      	strb	r2, [r3, #0]
		  }

		  if(hard_drop){
 800193c:	4b85      	ldr	r3, [pc, #532]	; (8001b54 <main+0x7dc>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 8145 	beq.w	8001bd2 <main+0x85a>
			  //move piece down until collided
			  	uint8_t floor_collided = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
			  	while(!floor_collided){
 800194e:	e0ae      	b.n	8001aae <main+0x736>
				  gridY++;
 8001950:	4b7c      	ldr	r3, [pc, #496]	; (8001b44 <main+0x7cc>)
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	b21b      	sxth	r3, r3
 8001956:	b29b      	uxth	r3, r3
 8001958:	3301      	adds	r3, #1
 800195a:	b29b      	uxth	r3, r3
 800195c:	b21a      	sxth	r2, r3
 800195e:	4b79      	ldr	r3, [pc, #484]	; (8001b44 <main+0x7cc>)
 8001960:	801a      	strh	r2, [r3, #0]
				  for(i = 0; i < 4; i++){
 8001962:	4b77      	ldr	r3, [pc, #476]	; (8001b40 <main+0x7c8>)
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
 8001968:	e09b      	b.n	8001aa2 <main+0x72a>
					  for(j= 0; j < 4; j++){
 800196a:	4b77      	ldr	r3, [pc, #476]	; (8001b48 <main+0x7d0>)
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
 8001970:	e088      	b.n	8001a84 <main+0x70c>
							if (gridY + j >= 16) floor_collided += piece_matrix[i][j]*1;
 8001972:	4b74      	ldr	r3, [pc, #464]	; (8001b44 <main+0x7cc>)
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	b21b      	sxth	r3, r3
 8001978:	461a      	mov	r2, r3
 800197a:	4b73      	ldr	r3, [pc, #460]	; (8001b48 <main+0x7d0>)
 800197c:	f993 3000 	ldrsb.w	r3, [r3]
 8001980:	4413      	add	r3, r2
 8001982:	2b0f      	cmp	r3, #15
 8001984:	dd12      	ble.n	80019ac <main+0x634>
 8001986:	4b6e      	ldr	r3, [pc, #440]	; (8001b40 <main+0x7c8>)
 8001988:	f993 3000 	ldrsb.w	r3, [r3]
 800198c:	4618      	mov	r0, r3
 800198e:	4b6e      	ldr	r3, [pc, #440]	; (8001b48 <main+0x7d0>)
 8001990:	f993 3000 	ldrsb.w	r3, [r3]
 8001994:	4619      	mov	r1, r3
 8001996:	4a70      	ldr	r2, [pc, #448]	; (8001b58 <main+0x7e0>)
 8001998:	0083      	lsls	r3, r0, #2
 800199a:	4413      	add	r3, r2
 800199c:	440b      	add	r3, r1
 800199e:	781a      	ldrb	r2, [r3, #0]
 80019a0:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 80019a4:	4413      	add	r3, r2
 80019a6:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 80019aa:	e02f      	b.n	8001a0c <main+0x694>
							else if (inside_play_field())
 80019ac:	f7ff fa38 	bl	8000e20 <inside_play_field>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d02a      	beq.n	8001a0c <main+0x694>
								floor_collided += piece_matrix[i][j]*grid[gridX+i][gridY+j];
 80019b6:	4b62      	ldr	r3, [pc, #392]	; (8001b40 <main+0x7c8>)
 80019b8:	f993 3000 	ldrsb.w	r3, [r3]
 80019bc:	4618      	mov	r0, r3
 80019be:	4b62      	ldr	r3, [pc, #392]	; (8001b48 <main+0x7d0>)
 80019c0:	f993 3000 	ldrsb.w	r3, [r3]
 80019c4:	4619      	mov	r1, r3
 80019c6:	4a64      	ldr	r2, [pc, #400]	; (8001b58 <main+0x7e0>)
 80019c8:	0083      	lsls	r3, r0, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	440b      	add	r3, r1
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	4b5a      	ldr	r3, [pc, #360]	; (8001b3c <main+0x7c4>)
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	b21b      	sxth	r3, r3
 80019d8:	461a      	mov	r2, r3
 80019da:	4b59      	ldr	r3, [pc, #356]	; (8001b40 <main+0x7c8>)
 80019dc:	f993 3000 	ldrsb.w	r3, [r3]
 80019e0:	441a      	add	r2, r3
 80019e2:	4b58      	ldr	r3, [pc, #352]	; (8001b44 <main+0x7cc>)
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	b21b      	sxth	r3, r3
 80019e8:	4619      	mov	r1, r3
 80019ea:	4b57      	ldr	r3, [pc, #348]	; (8001b48 <main+0x7d0>)
 80019ec:	f993 3000 	ldrsb.w	r3, [r3]
 80019f0:	440b      	add	r3, r1
 80019f2:	4956      	ldr	r1, [pc, #344]	; (8001b4c <main+0x7d4>)
 80019f4:	0112      	lsls	r2, r2, #4
 80019f6:	440a      	add	r2, r1
 80019f8:	4413      	add	r3, r2
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	fb00 f303 	mul.w	r3, r0, r3
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8001a06:	4413      	add	r3, r2
 8001a08:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
							if((piece_matrix[i][j] && grid[gridX+i][gridY+j]) && (gridY+j == 0))
 8001a0c:	4b4c      	ldr	r3, [pc, #304]	; (8001b40 <main+0x7c8>)
 8001a0e:	f993 3000 	ldrsb.w	r3, [r3]
 8001a12:	4618      	mov	r0, r3
 8001a14:	4b4c      	ldr	r3, [pc, #304]	; (8001b48 <main+0x7d0>)
 8001a16:	f993 3000 	ldrsb.w	r3, [r3]
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4a4e      	ldr	r2, [pc, #312]	; (8001b58 <main+0x7e0>)
 8001a1e:	0083      	lsls	r3, r0, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	440b      	add	r3, r1
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d023      	beq.n	8001a72 <main+0x6fa>
 8001a2a:	4b44      	ldr	r3, [pc, #272]	; (8001b3c <main+0x7c4>)
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	b21b      	sxth	r3, r3
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b43      	ldr	r3, [pc, #268]	; (8001b40 <main+0x7c8>)
 8001a34:	f993 3000 	ldrsb.w	r3, [r3]
 8001a38:	441a      	add	r2, r3
 8001a3a:	4b42      	ldr	r3, [pc, #264]	; (8001b44 <main+0x7cc>)
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	b21b      	sxth	r3, r3
 8001a40:	4619      	mov	r1, r3
 8001a42:	4b41      	ldr	r3, [pc, #260]	; (8001b48 <main+0x7d0>)
 8001a44:	f993 3000 	ldrsb.w	r3, [r3]
 8001a48:	440b      	add	r3, r1
 8001a4a:	4940      	ldr	r1, [pc, #256]	; (8001b4c <main+0x7d4>)
 8001a4c:	0112      	lsls	r2, r2, #4
 8001a4e:	440a      	add	r2, r1
 8001a50:	4413      	add	r3, r2
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00c      	beq.n	8001a72 <main+0x6fa>
 8001a58:	4b3a      	ldr	r3, [pc, #232]	; (8001b44 <main+0x7cc>)
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	b21b      	sxth	r3, r3
 8001a5e:	461a      	mov	r2, r3
 8001a60:	4b39      	ldr	r3, [pc, #228]	; (8001b48 <main+0x7d0>)
 8001a62:	f993 3000 	ldrsb.w	r3, [r3]
 8001a66:	4413      	add	r3, r2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d102      	bne.n	8001a72 <main+0x6fa>
								game_over = 1;
 8001a6c:	4b3b      	ldr	r3, [pc, #236]	; (8001b5c <main+0x7e4>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	701a      	strb	r2, [r3, #0]
					  for(j= 0; j < 4; j++){
 8001a72:	4b35      	ldr	r3, [pc, #212]	; (8001b48 <main+0x7d0>)
 8001a74:	f993 3000 	ldrsb.w	r3, [r3]
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	b25a      	sxtb	r2, r3
 8001a80:	4b31      	ldr	r3, [pc, #196]	; (8001b48 <main+0x7d0>)
 8001a82:	701a      	strb	r2, [r3, #0]
 8001a84:	4b30      	ldr	r3, [pc, #192]	; (8001b48 <main+0x7d0>)
 8001a86:	f993 3000 	ldrsb.w	r3, [r3]
 8001a8a:	2b03      	cmp	r3, #3
 8001a8c:	f77f af71 	ble.w	8001972 <main+0x5fa>
				  for(i = 0; i < 4; i++){
 8001a90:	4b2b      	ldr	r3, [pc, #172]	; (8001b40 <main+0x7c8>)
 8001a92:	f993 3000 	ldrsb.w	r3, [r3]
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	3301      	adds	r3, #1
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	b25a      	sxtb	r2, r3
 8001a9e:	4b28      	ldr	r3, [pc, #160]	; (8001b40 <main+0x7c8>)
 8001aa0:	701a      	strb	r2, [r3, #0]
 8001aa2:	4b27      	ldr	r3, [pc, #156]	; (8001b40 <main+0x7c8>)
 8001aa4:	f993 3000 	ldrsb.w	r3, [r3]
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	f77f af5e 	ble.w	800196a <main+0x5f2>
			  	while(!floor_collided){
 8001aae:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f43f af4c 	beq.w	8001950 <main+0x5d8>
					  }
				  }
			  	}
			  	new_turn = 1;
 8001ab8:	4b29      	ldr	r3, [pc, #164]	; (8001b60 <main+0x7e8>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	701a      	strb	r2, [r3, #0]
				gridY--;
 8001abe:	4b21      	ldr	r3, [pc, #132]	; (8001b44 <main+0x7cc>)
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	b21b      	sxth	r3, r3
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	b21a      	sxth	r2, r3
 8001acc:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <main+0x7cc>)
 8001ace:	801a      	strh	r2, [r3, #0]
				//save grid
				  for(i = 0; i<4; i++){
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <main+0x7c8>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	701a      	strb	r2, [r3, #0]
 8001ad6:	e074      	b.n	8001bc2 <main+0x84a>
					  for(j = 0; j<4; j++){
 8001ad8:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <main+0x7d0>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
 8001ade:	e062      	b.n	8001ba6 <main+0x82e>
						  if(inside_play_field())
 8001ae0:	f7ff f99e 	bl	8000e20 <inside_play_field>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d054      	beq.n	8001b94 <main+0x81c>
						  grid[gridX+i][gridY+j] = grid[gridX+i][gridY+j]||piece_matrix[i][j];
 8001aea:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <main+0x7c4>)
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	b21b      	sxth	r3, r3
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <main+0x7c8>)
 8001af4:	f993 3000 	ldrsb.w	r3, [r3]
 8001af8:	441a      	add	r2, r3
 8001afa:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <main+0x7cc>)
 8001afc:	881b      	ldrh	r3, [r3, #0]
 8001afe:	b21b      	sxth	r3, r3
 8001b00:	4619      	mov	r1, r3
 8001b02:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <main+0x7d0>)
 8001b04:	f993 3000 	ldrsb.w	r3, [r3]
 8001b08:	440b      	add	r3, r1
 8001b0a:	4910      	ldr	r1, [pc, #64]	; (8001b4c <main+0x7d4>)
 8001b0c:	0112      	lsls	r2, r2, #4
 8001b0e:	440a      	add	r2, r1
 8001b10:	4413      	add	r3, r2
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d10e      	bne.n	8001b36 <main+0x7be>
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <main+0x7c8>)
 8001b1a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <main+0x7d0>)
 8001b22:	f993 3000 	ldrsb.w	r3, [r3]
 8001b26:	4619      	mov	r1, r3
 8001b28:	4a0b      	ldr	r2, [pc, #44]	; (8001b58 <main+0x7e0>)
 8001b2a:	0083      	lsls	r3, r0, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	440b      	add	r3, r1
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d016      	beq.n	8001b64 <main+0x7ec>
 8001b36:	2101      	movs	r1, #1
 8001b38:	e015      	b.n	8001b66 <main+0x7ee>
 8001b3a:	bf00      	nop
 8001b3c:	20000234 	.word	0x20000234
 8001b40:	20000351 	.word	0x20000351
 8001b44:	20000236 	.word	0x20000236
 8001b48:	20000352 	.word	0x20000352
 8001b4c:	20000238 	.word	0x20000238
 8001b50:	2000034c 	.word	0x2000034c
 8001b54:	20000350 	.word	0x20000350
 8001b58:	2000033c 	.word	0x2000033c
 8001b5c:	20000353 	.word	0x20000353
 8001b60:	2000000b 	.word	0x2000000b
 8001b64:	2100      	movs	r1, #0
 8001b66:	4bac      	ldr	r3, [pc, #688]	; (8001e18 <main+0xaa0>)
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	b21b      	sxth	r3, r3
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4bab      	ldr	r3, [pc, #684]	; (8001e1c <main+0xaa4>)
 8001b70:	f993 3000 	ldrsb.w	r3, [r3]
 8001b74:	441a      	add	r2, r3
 8001b76:	4baa      	ldr	r3, [pc, #680]	; (8001e20 <main+0xaa8>)
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	b21b      	sxth	r3, r3
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	4ba9      	ldr	r3, [pc, #676]	; (8001e24 <main+0xaac>)
 8001b80:	f993 3000 	ldrsb.w	r3, [r3]
 8001b84:	4403      	add	r3, r0
 8001b86:	b2c8      	uxtb	r0, r1
 8001b88:	49a7      	ldr	r1, [pc, #668]	; (8001e28 <main+0xab0>)
 8001b8a:	0112      	lsls	r2, r2, #4
 8001b8c:	440a      	add	r2, r1
 8001b8e:	4413      	add	r3, r2
 8001b90:	4602      	mov	r2, r0
 8001b92:	701a      	strb	r2, [r3, #0]
					  for(j = 0; j<4; j++){
 8001b94:	4ba3      	ldr	r3, [pc, #652]	; (8001e24 <main+0xaac>)
 8001b96:	f993 3000 	ldrsb.w	r3, [r3]
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	b25a      	sxtb	r2, r3
 8001ba2:	4ba0      	ldr	r3, [pc, #640]	; (8001e24 <main+0xaac>)
 8001ba4:	701a      	strb	r2, [r3, #0]
 8001ba6:	4b9f      	ldr	r3, [pc, #636]	; (8001e24 <main+0xaac>)
 8001ba8:	f993 3000 	ldrsb.w	r3, [r3]
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	dd97      	ble.n	8001ae0 <main+0x768>
				  for(i = 0; i<4; i++){
 8001bb0:	4b9a      	ldr	r3, [pc, #616]	; (8001e1c <main+0xaa4>)
 8001bb2:	f993 3000 	ldrsb.w	r3, [r3]
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	3301      	adds	r3, #1
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	b25a      	sxtb	r2, r3
 8001bbe:	4b97      	ldr	r3, [pc, #604]	; (8001e1c <main+0xaa4>)
 8001bc0:	701a      	strb	r2, [r3, #0]
 8001bc2:	4b96      	ldr	r3, [pc, #600]	; (8001e1c <main+0xaa4>)
 8001bc4:	f993 3000 	ldrsb.w	r3, [r3]
 8001bc8:	2b03      	cmp	r3, #3
 8001bca:	dd85      	ble.n	8001ad8 <main+0x760>
					  }
				  }
				hard_drop = 0;
 8001bcc:	4b97      	ldr	r3, [pc, #604]	; (8001e2c <main+0xab4>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
		  }

		  if(moved_left){
 8001bd2:	4b97      	ldr	r3, [pc, #604]	; (8001e30 <main+0xab8>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 8084 	beq.w	8001ce6 <main+0x96e>
			  //check for collision with anything on the left
				uint8_t left_wall_collided = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
				for(i = 0; i < 4; i++){
 8001be4:	4b8d      	ldr	r3, [pc, #564]	; (8001e1c <main+0xaa4>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
 8001bea:	e067      	b.n	8001cbc <main+0x944>
					for(j= 0; j < 4; j++){
 8001bec:	4b8d      	ldr	r3, [pc, #564]	; (8001e24 <main+0xaac>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	701a      	strb	r2, [r3, #0]
 8001bf2:	e055      	b.n	8001ca0 <main+0x928>
						if (gridX + i < 0)
 8001bf4:	4b88      	ldr	r3, [pc, #544]	; (8001e18 <main+0xaa0>)
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	b21b      	sxth	r3, r3
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4b87      	ldr	r3, [pc, #540]	; (8001e1c <main+0xaa4>)
 8001bfe:	f993 3000 	ldrsb.w	r3, [r3]
 8001c02:	4413      	add	r3, r2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	da12      	bge.n	8001c2e <main+0x8b6>
							left_wall_collided += piece_matrix[i][j]*1;
 8001c08:	4b84      	ldr	r3, [pc, #528]	; (8001e1c <main+0xaa4>)
 8001c0a:	f993 3000 	ldrsb.w	r3, [r3]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	4b84      	ldr	r3, [pc, #528]	; (8001e24 <main+0xaac>)
 8001c12:	f993 3000 	ldrsb.w	r3, [r3]
 8001c16:	4619      	mov	r1, r3
 8001c18:	4a86      	ldr	r2, [pc, #536]	; (8001e34 <main+0xabc>)
 8001c1a:	0083      	lsls	r3, r0, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	440b      	add	r3, r1
 8001c20:	781a      	ldrb	r2, [r3, #0]
 8001c22:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 8001c26:	4413      	add	r3, r2
 8001c28:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
 8001c2c:	e02f      	b.n	8001c8e <main+0x916>
						else if (inside_play_field())
 8001c2e:	f7ff f8f7 	bl	8000e20 <inside_play_field>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d02a      	beq.n	8001c8e <main+0x916>
							left_wall_collided += piece_matrix[i][j]*grid[gridX+i][gridY+j];
 8001c38:	4b78      	ldr	r3, [pc, #480]	; (8001e1c <main+0xaa4>)
 8001c3a:	f993 3000 	ldrsb.w	r3, [r3]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	4b78      	ldr	r3, [pc, #480]	; (8001e24 <main+0xaac>)
 8001c42:	f993 3000 	ldrsb.w	r3, [r3]
 8001c46:	4619      	mov	r1, r3
 8001c48:	4a7a      	ldr	r2, [pc, #488]	; (8001e34 <main+0xabc>)
 8001c4a:	0083      	lsls	r3, r0, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	440b      	add	r3, r1
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	4b70      	ldr	r3, [pc, #448]	; (8001e18 <main+0xaa0>)
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	b21b      	sxth	r3, r3
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	4b6f      	ldr	r3, [pc, #444]	; (8001e1c <main+0xaa4>)
 8001c5e:	f993 3000 	ldrsb.w	r3, [r3]
 8001c62:	441a      	add	r2, r3
 8001c64:	4b6e      	ldr	r3, [pc, #440]	; (8001e20 <main+0xaa8>)
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	b21b      	sxth	r3, r3
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4b6d      	ldr	r3, [pc, #436]	; (8001e24 <main+0xaac>)
 8001c6e:	f993 3000 	ldrsb.w	r3, [r3]
 8001c72:	440b      	add	r3, r1
 8001c74:	496c      	ldr	r1, [pc, #432]	; (8001e28 <main+0xab0>)
 8001c76:	0112      	lsls	r2, r2, #4
 8001c78:	440a      	add	r2, r1
 8001c7a:	4413      	add	r3, r2
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	fb00 f303 	mul.w	r3, r0, r3
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 8001c88:	4413      	add	r3, r2
 8001c8a:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
					for(j= 0; j < 4; j++){
 8001c8e:	4b65      	ldr	r3, [pc, #404]	; (8001e24 <main+0xaac>)
 8001c90:	f993 3000 	ldrsb.w	r3, [r3]
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	3301      	adds	r3, #1
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	b25a      	sxtb	r2, r3
 8001c9c:	4b61      	ldr	r3, [pc, #388]	; (8001e24 <main+0xaac>)
 8001c9e:	701a      	strb	r2, [r3, #0]
 8001ca0:	4b60      	ldr	r3, [pc, #384]	; (8001e24 <main+0xaac>)
 8001ca2:	f993 3000 	ldrsb.w	r3, [r3]
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	dda4      	ble.n	8001bf4 <main+0x87c>
				for(i = 0; i < 4; i++){
 8001caa:	4b5c      	ldr	r3, [pc, #368]	; (8001e1c <main+0xaa4>)
 8001cac:	f993 3000 	ldrsb.w	r3, [r3]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	b25a      	sxtb	r2, r3
 8001cb8:	4b58      	ldr	r3, [pc, #352]	; (8001e1c <main+0xaa4>)
 8001cba:	701a      	strb	r2, [r3, #0]
 8001cbc:	4b57      	ldr	r3, [pc, #348]	; (8001e1c <main+0xaa4>)
 8001cbe:	f993 3000 	ldrsb.w	r3, [r3]
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	dd92      	ble.n	8001bec <main+0x874>
					}
				}
				if (left_wall_collided) {
 8001cc6:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d008      	beq.n	8001ce0 <main+0x968>
					gridX++;
 8001cce:	4b52      	ldr	r3, [pc, #328]	; (8001e18 <main+0xaa0>)
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	b21b      	sxth	r3, r3
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	b21a      	sxth	r2, r3
 8001cdc:	4b4e      	ldr	r3, [pc, #312]	; (8001e18 <main+0xaa0>)
 8001cde:	801a      	strh	r2, [r3, #0]
				}
			  moved_left = 0;
 8001ce0:	4b53      	ldr	r3, [pc, #332]	; (8001e30 <main+0xab8>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	701a      	strb	r2, [r3, #0]
		  }

		  if(moved_right){
 8001ce6:	4b54      	ldr	r3, [pc, #336]	; (8001e38 <main+0xac0>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 8084 	beq.w	8001dfa <main+0xa82>
			  //check for collision with right wall
				uint8_t right_wall_collided = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
				for(i = 0; i < 4; i++){
 8001cf8:	4b48      	ldr	r3, [pc, #288]	; (8001e1c <main+0xaa4>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	701a      	strb	r2, [r3, #0]
 8001cfe:	e067      	b.n	8001dd0 <main+0xa58>
					for(j= 0; j < 4; j++){
 8001d00:	4b48      	ldr	r3, [pc, #288]	; (8001e24 <main+0xaac>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	701a      	strb	r2, [r3, #0]
 8001d06:	e055      	b.n	8001db4 <main+0xa3c>
						if (gridX + i >= 8)
 8001d08:	4b43      	ldr	r3, [pc, #268]	; (8001e18 <main+0xaa0>)
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	b21b      	sxth	r3, r3
 8001d0e:	461a      	mov	r2, r3
 8001d10:	4b42      	ldr	r3, [pc, #264]	; (8001e1c <main+0xaa4>)
 8001d12:	f993 3000 	ldrsb.w	r3, [r3]
 8001d16:	4413      	add	r3, r2
 8001d18:	2b07      	cmp	r3, #7
 8001d1a:	dd12      	ble.n	8001d42 <main+0x9ca>
							right_wall_collided += piece_matrix[i][j]*1;
 8001d1c:	4b3f      	ldr	r3, [pc, #252]	; (8001e1c <main+0xaa4>)
 8001d1e:	f993 3000 	ldrsb.w	r3, [r3]
 8001d22:	4618      	mov	r0, r3
 8001d24:	4b3f      	ldr	r3, [pc, #252]	; (8001e24 <main+0xaac>)
 8001d26:	f993 3000 	ldrsb.w	r3, [r3]
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4a41      	ldr	r2, [pc, #260]	; (8001e34 <main+0xabc>)
 8001d2e:	0083      	lsls	r3, r0, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	440b      	add	r3, r1
 8001d34:	781a      	ldrb	r2, [r3, #0]
 8001d36:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
 8001d40:	e02f      	b.n	8001da2 <main+0xa2a>
						else if (inside_play_field())
 8001d42:	f7ff f86d 	bl	8000e20 <inside_play_field>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d02a      	beq.n	8001da2 <main+0xa2a>
							right_wall_collided += piece_matrix[i][j]*grid[gridX+i][gridY+j];
 8001d4c:	4b33      	ldr	r3, [pc, #204]	; (8001e1c <main+0xaa4>)
 8001d4e:	f993 3000 	ldrsb.w	r3, [r3]
 8001d52:	4618      	mov	r0, r3
 8001d54:	4b33      	ldr	r3, [pc, #204]	; (8001e24 <main+0xaac>)
 8001d56:	f993 3000 	ldrsb.w	r3, [r3]
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4a35      	ldr	r2, [pc, #212]	; (8001e34 <main+0xabc>)
 8001d5e:	0083      	lsls	r3, r0, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	440b      	add	r3, r1
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	4b2b      	ldr	r3, [pc, #172]	; (8001e18 <main+0xaa0>)
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	b21b      	sxth	r3, r3
 8001d6e:	461a      	mov	r2, r3
 8001d70:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <main+0xaa4>)
 8001d72:	f993 3000 	ldrsb.w	r3, [r3]
 8001d76:	441a      	add	r2, r3
 8001d78:	4b29      	ldr	r3, [pc, #164]	; (8001e20 <main+0xaa8>)
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	b21b      	sxth	r3, r3
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4b28      	ldr	r3, [pc, #160]	; (8001e24 <main+0xaac>)
 8001d82:	f993 3000 	ldrsb.w	r3, [r3]
 8001d86:	440b      	add	r3, r1
 8001d88:	4927      	ldr	r1, [pc, #156]	; (8001e28 <main+0xab0>)
 8001d8a:	0112      	lsls	r2, r2, #4
 8001d8c:	440a      	add	r2, r1
 8001d8e:	4413      	add	r3, r2
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	fb00 f303 	mul.w	r3, r0, r3
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
					for(j= 0; j < 4; j++){
 8001da2:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <main+0xaac>)
 8001da4:	f993 3000 	ldrsb.w	r3, [r3]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	3301      	adds	r3, #1
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	b25a      	sxtb	r2, r3
 8001db0:	4b1c      	ldr	r3, [pc, #112]	; (8001e24 <main+0xaac>)
 8001db2:	701a      	strb	r2, [r3, #0]
 8001db4:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <main+0xaac>)
 8001db6:	f993 3000 	ldrsb.w	r3, [r3]
 8001dba:	2b03      	cmp	r3, #3
 8001dbc:	dda4      	ble.n	8001d08 <main+0x990>
				for(i = 0; i < 4; i++){
 8001dbe:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <main+0xaa4>)
 8001dc0:	f993 3000 	ldrsb.w	r3, [r3]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	b25a      	sxtb	r2, r3
 8001dcc:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <main+0xaa4>)
 8001dce:	701a      	strb	r2, [r3, #0]
 8001dd0:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <main+0xaa4>)
 8001dd2:	f993 3000 	ldrsb.w	r3, [r3]
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	dd92      	ble.n	8001d00 <main+0x988>
					}
				}
				if (right_wall_collided) {
 8001dda:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d008      	beq.n	8001df4 <main+0xa7c>
					gridX--;
 8001de2:	4b0d      	ldr	r3, [pc, #52]	; (8001e18 <main+0xaa0>)
 8001de4:	881b      	ldrh	r3, [r3, #0]
 8001de6:	b21b      	sxth	r3, r3
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	3b01      	subs	r3, #1
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	b21a      	sxth	r2, r3
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <main+0xaa0>)
 8001df2:	801a      	strh	r2, [r3, #0]
				}
			  moved_right = 0;
 8001df4:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <main+0xac0>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
		  }

		  if(rotated){
 8001dfa:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <main+0xac4>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 820f 	beq.w	8002224 <main+0xeac>
			  //create a temporary copy
			  uint8_t temp[4][4];
			  for(i = 0; i < 4; i++){
 8001e06:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <main+0xaa4>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]
 8001e0c:	e04a      	b.n	8001ea4 <main+0xb2c>
				  for(j = 0; j < 4; j++){
 8001e0e:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <main+0xaac>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
 8001e14:	e038      	b.n	8001e88 <main+0xb10>
 8001e16:	bf00      	nop
 8001e18:	20000234 	.word	0x20000234
 8001e1c:	20000351 	.word	0x20000351
 8001e20:	20000236 	.word	0x20000236
 8001e24:	20000352 	.word	0x20000352
 8001e28:	20000238 	.word	0x20000238
 8001e2c:	20000350 	.word	0x20000350
 8001e30:	2000034d 	.word	0x2000034d
 8001e34:	2000033c 	.word	0x2000033c
 8001e38:	2000034e 	.word	0x2000034e
 8001e3c:	2000034f 	.word	0x2000034f
					  temp[i][j] = piece_matrix[i][j];
 8001e40:	4ba8      	ldr	r3, [pc, #672]	; (80020e4 <main+0xd6c>)
 8001e42:	f993 3000 	ldrsb.w	r3, [r3]
 8001e46:	461d      	mov	r5, r3
 8001e48:	4ba7      	ldr	r3, [pc, #668]	; (80020e8 <main+0xd70>)
 8001e4a:	f993 3000 	ldrsb.w	r3, [r3]
 8001e4e:	461c      	mov	r4, r3
 8001e50:	4ba4      	ldr	r3, [pc, #656]	; (80020e4 <main+0xd6c>)
 8001e52:	f993 3000 	ldrsb.w	r3, [r3]
 8001e56:	4618      	mov	r0, r3
 8001e58:	4ba3      	ldr	r3, [pc, #652]	; (80020e8 <main+0xd70>)
 8001e5a:	f993 3000 	ldrsb.w	r3, [r3]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4aa2      	ldr	r2, [pc, #648]	; (80020ec <main+0xd74>)
 8001e62:	00ab      	lsls	r3, r5, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	4423      	add	r3, r4
 8001e68:	781a      	ldrb	r2, [r3, #0]
 8001e6a:	0083      	lsls	r3, r0, #2
 8001e6c:	33b0      	adds	r3, #176	; 0xb0
 8001e6e:	443b      	add	r3, r7
 8001e70:	440b      	add	r3, r1
 8001e72:	3b30      	subs	r3, #48	; 0x30
 8001e74:	701a      	strb	r2, [r3, #0]
				  for(j = 0; j < 4; j++){
 8001e76:	4b9c      	ldr	r3, [pc, #624]	; (80020e8 <main+0xd70>)
 8001e78:	f993 3000 	ldrsb.w	r3, [r3]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	3301      	adds	r3, #1
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	b25a      	sxtb	r2, r3
 8001e84:	4b98      	ldr	r3, [pc, #608]	; (80020e8 <main+0xd70>)
 8001e86:	701a      	strb	r2, [r3, #0]
 8001e88:	4b97      	ldr	r3, [pc, #604]	; (80020e8 <main+0xd70>)
 8001e8a:	f993 3000 	ldrsb.w	r3, [r3]
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	ddd6      	ble.n	8001e40 <main+0xac8>
			  for(i = 0; i < 4; i++){
 8001e92:	4b94      	ldr	r3, [pc, #592]	; (80020e4 <main+0xd6c>)
 8001e94:	f993 3000 	ldrsb.w	r3, [r3]
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	b25a      	sxtb	r2, r3
 8001ea0:	4b90      	ldr	r3, [pc, #576]	; (80020e4 <main+0xd6c>)
 8001ea2:	701a      	strb	r2, [r3, #0]
 8001ea4:	4b8f      	ldr	r3, [pc, #572]	; (80020e4 <main+0xd6c>)
 8001ea6:	f993 3000 	ldrsb.w	r3, [r3]
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	ddaf      	ble.n	8001e0e <main+0xa96>
				  }
			  }
			  rotate_clockwise(piece_matrix);
 8001eae:	488f      	ldr	r0, [pc, #572]	; (80020ec <main+0xd74>)
 8001eb0:	f7ff f8be 	bl	8001030 <rotate_clockwise>
			  //check for all collisions
				uint8_t collided = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
				for(i = 0; i < 4; i++){
 8001eba:	4b8a      	ldr	r3, [pc, #552]	; (80020e4 <main+0xd6c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
 8001ec0:	e085      	b.n	8001fce <main+0xc56>
					for(j= 0; j < 4; j++){
 8001ec2:	4b89      	ldr	r3, [pc, #548]	; (80020e8 <main+0xd70>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	701a      	strb	r2, [r3, #0]
 8001ec8:	e073      	b.n	8001fb2 <main+0xc3a>
						if ((gridX + i >= 8) || (gridX + i < 0) || (gridY + j < 0) || (gridY + j >= 16))
 8001eca:	4b89      	ldr	r3, [pc, #548]	; (80020f0 <main+0xd78>)
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	b21b      	sxth	r3, r3
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4b84      	ldr	r3, [pc, #528]	; (80020e4 <main+0xd6c>)
 8001ed4:	f993 3000 	ldrsb.w	r3, [r3]
 8001ed8:	4413      	add	r3, r2
 8001eda:	2b07      	cmp	r3, #7
 8001edc:	dc1d      	bgt.n	8001f1a <main+0xba2>
 8001ede:	4b84      	ldr	r3, [pc, #528]	; (80020f0 <main+0xd78>)
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	b21b      	sxth	r3, r3
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4b7f      	ldr	r3, [pc, #508]	; (80020e4 <main+0xd6c>)
 8001ee8:	f993 3000 	ldrsb.w	r3, [r3]
 8001eec:	4413      	add	r3, r2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	db13      	blt.n	8001f1a <main+0xba2>
 8001ef2:	4b80      	ldr	r3, [pc, #512]	; (80020f4 <main+0xd7c>)
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	b21b      	sxth	r3, r3
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4b7b      	ldr	r3, [pc, #492]	; (80020e8 <main+0xd70>)
 8001efc:	f993 3000 	ldrsb.w	r3, [r3]
 8001f00:	4413      	add	r3, r2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	db09      	blt.n	8001f1a <main+0xba2>
 8001f06:	4b7b      	ldr	r3, [pc, #492]	; (80020f4 <main+0xd7c>)
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	b21b      	sxth	r3, r3
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4b76      	ldr	r3, [pc, #472]	; (80020e8 <main+0xd70>)
 8001f10:	f993 3000 	ldrsb.w	r3, [r3]
 8001f14:	4413      	add	r3, r2
 8001f16:	2b0f      	cmp	r3, #15
 8001f18:	dd12      	ble.n	8001f40 <main+0xbc8>
							collided += piece_matrix[i][j]*1;
 8001f1a:	4b72      	ldr	r3, [pc, #456]	; (80020e4 <main+0xd6c>)
 8001f1c:	f993 3000 	ldrsb.w	r3, [r3]
 8001f20:	4618      	mov	r0, r3
 8001f22:	4b71      	ldr	r3, [pc, #452]	; (80020e8 <main+0xd70>)
 8001f24:	f993 3000 	ldrsb.w	r3, [r3]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4a70      	ldr	r2, [pc, #448]	; (80020ec <main+0xd74>)
 8001f2c:	0083      	lsls	r3, r0, #2
 8001f2e:	4413      	add	r3, r2
 8001f30:	440b      	add	r3, r1
 8001f32:	781a      	ldrb	r2, [r3, #0]
 8001f34:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8001f38:	4413      	add	r3, r2
 8001f3a:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
 8001f3e:	e02f      	b.n	8001fa0 <main+0xc28>
						else if (inside_play_field())
 8001f40:	f7fe ff6e 	bl	8000e20 <inside_play_field>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d02a      	beq.n	8001fa0 <main+0xc28>
							collided += piece_matrix[i][j]*grid[gridX+i][gridY+j];
 8001f4a:	4b66      	ldr	r3, [pc, #408]	; (80020e4 <main+0xd6c>)
 8001f4c:	f993 3000 	ldrsb.w	r3, [r3]
 8001f50:	4618      	mov	r0, r3
 8001f52:	4b65      	ldr	r3, [pc, #404]	; (80020e8 <main+0xd70>)
 8001f54:	f993 3000 	ldrsb.w	r3, [r3]
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4a64      	ldr	r2, [pc, #400]	; (80020ec <main+0xd74>)
 8001f5c:	0083      	lsls	r3, r0, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	440b      	add	r3, r1
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	4b62      	ldr	r3, [pc, #392]	; (80020f0 <main+0xd78>)
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	b21b      	sxth	r3, r3
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4b5d      	ldr	r3, [pc, #372]	; (80020e4 <main+0xd6c>)
 8001f70:	f993 3000 	ldrsb.w	r3, [r3]
 8001f74:	441a      	add	r2, r3
 8001f76:	4b5f      	ldr	r3, [pc, #380]	; (80020f4 <main+0xd7c>)
 8001f78:	881b      	ldrh	r3, [r3, #0]
 8001f7a:	b21b      	sxth	r3, r3
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4b5a      	ldr	r3, [pc, #360]	; (80020e8 <main+0xd70>)
 8001f80:	f993 3000 	ldrsb.w	r3, [r3]
 8001f84:	440b      	add	r3, r1
 8001f86:	495c      	ldr	r1, [pc, #368]	; (80020f8 <main+0xd80>)
 8001f88:	0112      	lsls	r2, r2, #4
 8001f8a:	440a      	add	r2, r1
 8001f8c:	4413      	add	r3, r2
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	fb00 f303 	mul.w	r3, r0, r3
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
					for(j= 0; j < 4; j++){
 8001fa0:	4b51      	ldr	r3, [pc, #324]	; (80020e8 <main+0xd70>)
 8001fa2:	f993 3000 	ldrsb.w	r3, [r3]
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	3301      	adds	r3, #1
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	b25a      	sxtb	r2, r3
 8001fae:	4b4e      	ldr	r3, [pc, #312]	; (80020e8 <main+0xd70>)
 8001fb0:	701a      	strb	r2, [r3, #0]
 8001fb2:	4b4d      	ldr	r3, [pc, #308]	; (80020e8 <main+0xd70>)
 8001fb4:	f993 3000 	ldrsb.w	r3, [r3]
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	dd86      	ble.n	8001eca <main+0xb52>
				for(i = 0; i < 4; i++){
 8001fbc:	4b49      	ldr	r3, [pc, #292]	; (80020e4 <main+0xd6c>)
 8001fbe:	f993 3000 	ldrsb.w	r3, [r3]
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	b25a      	sxtb	r2, r3
 8001fca:	4b46      	ldr	r3, [pc, #280]	; (80020e4 <main+0xd6c>)
 8001fcc:	701a      	strb	r2, [r3, #0]
 8001fce:	4b45      	ldr	r3, [pc, #276]	; (80020e4 <main+0xd6c>)
 8001fd0:	f993 3000 	ldrsb.w	r3, [r3]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	f77f af74 	ble.w	8001ec2 <main+0xb4a>
					}
				}
				if (collided) {
 8001fda:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 811d 	beq.w	800221e <main+0xea6>
					//roll back piece matrix
					for(i = 0; i < 4; i++){
 8001fe4:	4b3f      	ldr	r3, [pc, #252]	; (80020e4 <main+0xd6c>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
 8001fea:	e036      	b.n	800205a <main+0xce2>
						  for(j = 0; j < 4; j++){
 8001fec:	4b3e      	ldr	r3, [pc, #248]	; (80020e8 <main+0xd70>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	701a      	strb	r2, [r3, #0]
 8001ff2:	e024      	b.n	800203e <main+0xcc6>
							  piece_matrix[i][j] = temp[i][j];
 8001ff4:	4b3b      	ldr	r3, [pc, #236]	; (80020e4 <main+0xd6c>)
 8001ff6:	f993 3000 	ldrsb.w	r3, [r3]
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4b3a      	ldr	r3, [pc, #232]	; (80020e8 <main+0xd70>)
 8001ffe:	f993 3000 	ldrsb.w	r3, [r3]
 8002002:	461a      	mov	r2, r3
 8002004:	4b37      	ldr	r3, [pc, #220]	; (80020e4 <main+0xd6c>)
 8002006:	f993 3000 	ldrsb.w	r3, [r3]
 800200a:	461c      	mov	r4, r3
 800200c:	4b36      	ldr	r3, [pc, #216]	; (80020e8 <main+0xd70>)
 800200e:	f993 3000 	ldrsb.w	r3, [r3]
 8002012:	4618      	mov	r0, r3
 8002014:	008b      	lsls	r3, r1, #2
 8002016:	33b0      	adds	r3, #176	; 0xb0
 8002018:	443b      	add	r3, r7
 800201a:	4413      	add	r3, r2
 800201c:	3b30      	subs	r3, #48	; 0x30
 800201e:	7819      	ldrb	r1, [r3, #0]
 8002020:	4a32      	ldr	r2, [pc, #200]	; (80020ec <main+0xd74>)
 8002022:	00a3      	lsls	r3, r4, #2
 8002024:	4413      	add	r3, r2
 8002026:	4403      	add	r3, r0
 8002028:	460a      	mov	r2, r1
 800202a:	701a      	strb	r2, [r3, #0]
						  for(j = 0; j < 4; j++){
 800202c:	4b2e      	ldr	r3, [pc, #184]	; (80020e8 <main+0xd70>)
 800202e:	f993 3000 	ldrsb.w	r3, [r3]
 8002032:	b2db      	uxtb	r3, r3
 8002034:	3301      	adds	r3, #1
 8002036:	b2db      	uxtb	r3, r3
 8002038:	b25a      	sxtb	r2, r3
 800203a:	4b2b      	ldr	r3, [pc, #172]	; (80020e8 <main+0xd70>)
 800203c:	701a      	strb	r2, [r3, #0]
 800203e:	4b2a      	ldr	r3, [pc, #168]	; (80020e8 <main+0xd70>)
 8002040:	f993 3000 	ldrsb.w	r3, [r3]
 8002044:	2b03      	cmp	r3, #3
 8002046:	ddd5      	ble.n	8001ff4 <main+0xc7c>
					for(i = 0; i < 4; i++){
 8002048:	4b26      	ldr	r3, [pc, #152]	; (80020e4 <main+0xd6c>)
 800204a:	f993 3000 	ldrsb.w	r3, [r3]
 800204e:	b2db      	uxtb	r3, r3
 8002050:	3301      	adds	r3, #1
 8002052:	b2db      	uxtb	r3, r3
 8002054:	b25a      	sxtb	r2, r3
 8002056:	4b23      	ldr	r3, [pc, #140]	; (80020e4 <main+0xd6c>)
 8002058:	701a      	strb	r2, [r3, #0]
 800205a:	4b22      	ldr	r3, [pc, #136]	; (80020e4 <main+0xd6c>)
 800205c:	f993 3000 	ldrsb.w	r3, [r3]
 8002060:	2b03      	cmp	r3, #3
 8002062:	ddc3      	ble.n	8001fec <main+0xc74>
						  }
					}
					rotate_counter_clockwise(piece_matrix);
 8002064:	4821      	ldr	r0, [pc, #132]	; (80020ec <main+0xd74>)
 8002066:	f7ff f859 	bl	800111c <rotate_counter_clockwise>
					//check for all collisions again
						uint8_t collided = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						for(i = 0; i < 4; i++){
 8002070:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <main+0xd6c>)
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]
 8002076:	e088      	b.n	800218a <main+0xe12>
							for(j= 0; j < 4; j++){
 8002078:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <main+0xd70>)
 800207a:	2200      	movs	r2, #0
 800207c:	701a      	strb	r2, [r3, #0]
 800207e:	e076      	b.n	800216e <main+0xdf6>
								if ((gridX + i >= 8) || (gridX + i < 0) || (gridY + j >= 16))
 8002080:	4b1b      	ldr	r3, [pc, #108]	; (80020f0 <main+0xd78>)
 8002082:	881b      	ldrh	r3, [r3, #0]
 8002084:	b21b      	sxth	r3, r3
 8002086:	461a      	mov	r2, r3
 8002088:	4b16      	ldr	r3, [pc, #88]	; (80020e4 <main+0xd6c>)
 800208a:	f993 3000 	ldrsb.w	r3, [r3]
 800208e:	4413      	add	r3, r2
 8002090:	2b07      	cmp	r3, #7
 8002092:	dc13      	bgt.n	80020bc <main+0xd44>
 8002094:	4b16      	ldr	r3, [pc, #88]	; (80020f0 <main+0xd78>)
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	b21b      	sxth	r3, r3
 800209a:	461a      	mov	r2, r3
 800209c:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <main+0xd6c>)
 800209e:	f993 3000 	ldrsb.w	r3, [r3]
 80020a2:	4413      	add	r3, r2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	db09      	blt.n	80020bc <main+0xd44>
 80020a8:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <main+0xd7c>)
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	b21b      	sxth	r3, r3
 80020ae:	461a      	mov	r2, r3
 80020b0:	4b0d      	ldr	r3, [pc, #52]	; (80020e8 <main+0xd70>)
 80020b2:	f993 3000 	ldrsb.w	r3, [r3]
 80020b6:	4413      	add	r3, r2
 80020b8:	2b0f      	cmp	r3, #15
 80020ba:	dd1f      	ble.n	80020fc <main+0xd84>
									collided += piece_matrix[i][j]*1;
 80020bc:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <main+0xd6c>)
 80020be:	f993 3000 	ldrsb.w	r3, [r3]
 80020c2:	4618      	mov	r0, r3
 80020c4:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <main+0xd70>)
 80020c6:	f993 3000 	ldrsb.w	r3, [r3]
 80020ca:	4619      	mov	r1, r3
 80020cc:	4a07      	ldr	r2, [pc, #28]	; (80020ec <main+0xd74>)
 80020ce:	0083      	lsls	r3, r0, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	440b      	add	r3, r1
 80020d4:	781a      	ldrb	r2, [r3, #0]
 80020d6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80020da:	4413      	add	r3, r2
 80020dc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80020e0:	e03c      	b.n	800215c <main+0xde4>
 80020e2:	bf00      	nop
 80020e4:	20000351 	.word	0x20000351
 80020e8:	20000352 	.word	0x20000352
 80020ec:	2000033c 	.word	0x2000033c
 80020f0:	20000234 	.word	0x20000234
 80020f4:	20000236 	.word	0x20000236
 80020f8:	20000238 	.word	0x20000238
								else if (inside_play_field())
 80020fc:	f7fe fe90 	bl	8000e20 <inside_play_field>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d02a      	beq.n	800215c <main+0xde4>
									collided += piece_matrix[i][j]*grid[gridX+i][gridY+j];
 8002106:	4ba0      	ldr	r3, [pc, #640]	; (8002388 <main+0x1010>)
 8002108:	f993 3000 	ldrsb.w	r3, [r3]
 800210c:	4618      	mov	r0, r3
 800210e:	4b9f      	ldr	r3, [pc, #636]	; (800238c <main+0x1014>)
 8002110:	f993 3000 	ldrsb.w	r3, [r3]
 8002114:	4619      	mov	r1, r3
 8002116:	4a9e      	ldr	r2, [pc, #632]	; (8002390 <main+0x1018>)
 8002118:	0083      	lsls	r3, r0, #2
 800211a:	4413      	add	r3, r2
 800211c:	440b      	add	r3, r1
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	4b9c      	ldr	r3, [pc, #624]	; (8002394 <main+0x101c>)
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	b21b      	sxth	r3, r3
 8002128:	461a      	mov	r2, r3
 800212a:	4b97      	ldr	r3, [pc, #604]	; (8002388 <main+0x1010>)
 800212c:	f993 3000 	ldrsb.w	r3, [r3]
 8002130:	441a      	add	r2, r3
 8002132:	4b99      	ldr	r3, [pc, #612]	; (8002398 <main+0x1020>)
 8002134:	881b      	ldrh	r3, [r3, #0]
 8002136:	b21b      	sxth	r3, r3
 8002138:	4619      	mov	r1, r3
 800213a:	4b94      	ldr	r3, [pc, #592]	; (800238c <main+0x1014>)
 800213c:	f993 3000 	ldrsb.w	r3, [r3]
 8002140:	440b      	add	r3, r1
 8002142:	4996      	ldr	r1, [pc, #600]	; (800239c <main+0x1024>)
 8002144:	0112      	lsls	r2, r2, #4
 8002146:	440a      	add	r2, r1
 8002148:	4413      	add	r3, r2
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	fb00 f303 	mul.w	r3, r0, r3
 8002150:	b2da      	uxtb	r2, r3
 8002152:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002156:	4413      	add	r3, r2
 8002158:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
							for(j= 0; j < 4; j++){
 800215c:	4b8b      	ldr	r3, [pc, #556]	; (800238c <main+0x1014>)
 800215e:	f993 3000 	ldrsb.w	r3, [r3]
 8002162:	b2db      	uxtb	r3, r3
 8002164:	3301      	adds	r3, #1
 8002166:	b2db      	uxtb	r3, r3
 8002168:	b25a      	sxtb	r2, r3
 800216a:	4b88      	ldr	r3, [pc, #544]	; (800238c <main+0x1014>)
 800216c:	701a      	strb	r2, [r3, #0]
 800216e:	4b87      	ldr	r3, [pc, #540]	; (800238c <main+0x1014>)
 8002170:	f993 3000 	ldrsb.w	r3, [r3]
 8002174:	2b03      	cmp	r3, #3
 8002176:	dd83      	ble.n	8002080 <main+0xd08>
						for(i = 0; i < 4; i++){
 8002178:	4b83      	ldr	r3, [pc, #524]	; (8002388 <main+0x1010>)
 800217a:	f993 3000 	ldrsb.w	r3, [r3]
 800217e:	b2db      	uxtb	r3, r3
 8002180:	3301      	adds	r3, #1
 8002182:	b2db      	uxtb	r3, r3
 8002184:	b25a      	sxtb	r2, r3
 8002186:	4b80      	ldr	r3, [pc, #512]	; (8002388 <main+0x1010>)
 8002188:	701a      	strb	r2, [r3, #0]
 800218a:	4b7f      	ldr	r3, [pc, #508]	; (8002388 <main+0x1010>)
 800218c:	f993 3000 	ldrsb.w	r3, [r3]
 8002190:	2b03      	cmp	r3, #3
 8002192:	f77f af71 	ble.w	8002078 <main+0xd00>
							}
						}
						if (collided){
 8002196:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800219a:	2b00      	cmp	r3, #0
 800219c:	d03f      	beq.n	800221e <main+0xea6>
							//roll back piece matrix
							for(i = 0; i < 4; i++){
 800219e:	4b7a      	ldr	r3, [pc, #488]	; (8002388 <main+0x1010>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	701a      	strb	r2, [r3, #0]
 80021a4:	e036      	b.n	8002214 <main+0xe9c>
								  for(j = 0; j < 4; j++){
 80021a6:	4b79      	ldr	r3, [pc, #484]	; (800238c <main+0x1014>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	701a      	strb	r2, [r3, #0]
 80021ac:	e024      	b.n	80021f8 <main+0xe80>
									  piece_matrix[i][j] = temp[i][j];
 80021ae:	4b76      	ldr	r3, [pc, #472]	; (8002388 <main+0x1010>)
 80021b0:	f993 3000 	ldrsb.w	r3, [r3]
 80021b4:	4619      	mov	r1, r3
 80021b6:	4b75      	ldr	r3, [pc, #468]	; (800238c <main+0x1014>)
 80021b8:	f993 3000 	ldrsb.w	r3, [r3]
 80021bc:	461a      	mov	r2, r3
 80021be:	4b72      	ldr	r3, [pc, #456]	; (8002388 <main+0x1010>)
 80021c0:	f993 3000 	ldrsb.w	r3, [r3]
 80021c4:	461c      	mov	r4, r3
 80021c6:	4b71      	ldr	r3, [pc, #452]	; (800238c <main+0x1014>)
 80021c8:	f993 3000 	ldrsb.w	r3, [r3]
 80021cc:	4618      	mov	r0, r3
 80021ce:	008b      	lsls	r3, r1, #2
 80021d0:	33b0      	adds	r3, #176	; 0xb0
 80021d2:	443b      	add	r3, r7
 80021d4:	4413      	add	r3, r2
 80021d6:	3b30      	subs	r3, #48	; 0x30
 80021d8:	7819      	ldrb	r1, [r3, #0]
 80021da:	4a6d      	ldr	r2, [pc, #436]	; (8002390 <main+0x1018>)
 80021dc:	00a3      	lsls	r3, r4, #2
 80021de:	4413      	add	r3, r2
 80021e0:	4403      	add	r3, r0
 80021e2:	460a      	mov	r2, r1
 80021e4:	701a      	strb	r2, [r3, #0]
								  for(j = 0; j < 4; j++){
 80021e6:	4b69      	ldr	r3, [pc, #420]	; (800238c <main+0x1014>)
 80021e8:	f993 3000 	ldrsb.w	r3, [r3]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	3301      	adds	r3, #1
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	b25a      	sxtb	r2, r3
 80021f4:	4b65      	ldr	r3, [pc, #404]	; (800238c <main+0x1014>)
 80021f6:	701a      	strb	r2, [r3, #0]
 80021f8:	4b64      	ldr	r3, [pc, #400]	; (800238c <main+0x1014>)
 80021fa:	f993 3000 	ldrsb.w	r3, [r3]
 80021fe:	2b03      	cmp	r3, #3
 8002200:	ddd5      	ble.n	80021ae <main+0xe36>
							for(i = 0; i < 4; i++){
 8002202:	4b61      	ldr	r3, [pc, #388]	; (8002388 <main+0x1010>)
 8002204:	f993 3000 	ldrsb.w	r3, [r3]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	3301      	adds	r3, #1
 800220c:	b2db      	uxtb	r3, r3
 800220e:	b25a      	sxtb	r2, r3
 8002210:	4b5d      	ldr	r3, [pc, #372]	; (8002388 <main+0x1010>)
 8002212:	701a      	strb	r2, [r3, #0]
 8002214:	4b5c      	ldr	r3, [pc, #368]	; (8002388 <main+0x1010>)
 8002216:	f993 3000 	ldrsb.w	r3, [r3]
 800221a:	2b03      	cmp	r3, #3
 800221c:	ddc3      	ble.n	80021a6 <main+0xe2e>
								  }
							}
						}
				}
			  rotated = 0;
 800221e:	4b60      	ldr	r3, [pc, #384]	; (80023a0 <main+0x1028>)
 8002220:	2200      	movs	r2, #0
 8002222:	701a      	strb	r2, [r3, #0]

		  }

		  //create temporary grid for buffering
		  uint8_t temp_grid[8][16];
		  for(i = 0; i < 8; i++){
 8002224:	4b58      	ldr	r3, [pc, #352]	; (8002388 <main+0x1010>)
 8002226:	2200      	movs	r2, #0
 8002228:	701a      	strb	r2, [r3, #0]
 800222a:	e035      	b.n	8002298 <main+0xf20>
			  for(j = 0; j < 16; j++){
 800222c:	4b57      	ldr	r3, [pc, #348]	; (800238c <main+0x1014>)
 800222e:	2200      	movs	r2, #0
 8002230:	701a      	strb	r2, [r3, #0]
 8002232:	e023      	b.n	800227c <main+0xf04>
				  temp_grid[i][j] = grid[i][j];
 8002234:	4b54      	ldr	r3, [pc, #336]	; (8002388 <main+0x1010>)
 8002236:	f993 3000 	ldrsb.w	r3, [r3]
 800223a:	461d      	mov	r5, r3
 800223c:	4b53      	ldr	r3, [pc, #332]	; (800238c <main+0x1014>)
 800223e:	f993 3000 	ldrsb.w	r3, [r3]
 8002242:	461c      	mov	r4, r3
 8002244:	4b50      	ldr	r3, [pc, #320]	; (8002388 <main+0x1010>)
 8002246:	f993 3000 	ldrsb.w	r3, [r3]
 800224a:	4618      	mov	r0, r3
 800224c:	4b4f      	ldr	r3, [pc, #316]	; (800238c <main+0x1014>)
 800224e:	f993 3000 	ldrsb.w	r3, [r3]
 8002252:	4619      	mov	r1, r3
 8002254:	4a51      	ldr	r2, [pc, #324]	; (800239c <main+0x1024>)
 8002256:	012b      	lsls	r3, r5, #4
 8002258:	4413      	add	r3, r2
 800225a:	4423      	add	r3, r4
 800225c:	781a      	ldrb	r2, [r3, #0]
 800225e:	0103      	lsls	r3, r0, #4
 8002260:	33b0      	adds	r3, #176	; 0xb0
 8002262:	443b      	add	r3, r7
 8002264:	440b      	add	r3, r1
 8002266:	3bb0      	subs	r3, #176	; 0xb0
 8002268:	701a      	strb	r2, [r3, #0]
			  for(j = 0; j < 16; j++){
 800226a:	4b48      	ldr	r3, [pc, #288]	; (800238c <main+0x1014>)
 800226c:	f993 3000 	ldrsb.w	r3, [r3]
 8002270:	b2db      	uxtb	r3, r3
 8002272:	3301      	adds	r3, #1
 8002274:	b2db      	uxtb	r3, r3
 8002276:	b25a      	sxtb	r2, r3
 8002278:	4b44      	ldr	r3, [pc, #272]	; (800238c <main+0x1014>)
 800227a:	701a      	strb	r2, [r3, #0]
 800227c:	4b43      	ldr	r3, [pc, #268]	; (800238c <main+0x1014>)
 800227e:	f993 3000 	ldrsb.w	r3, [r3]
 8002282:	2b0f      	cmp	r3, #15
 8002284:	ddd6      	ble.n	8002234 <main+0xebc>
		  for(i = 0; i < 8; i++){
 8002286:	4b40      	ldr	r3, [pc, #256]	; (8002388 <main+0x1010>)
 8002288:	f993 3000 	ldrsb.w	r3, [r3]
 800228c:	b2db      	uxtb	r3, r3
 800228e:	3301      	adds	r3, #1
 8002290:	b2db      	uxtb	r3, r3
 8002292:	b25a      	sxtb	r2, r3
 8002294:	4b3c      	ldr	r3, [pc, #240]	; (8002388 <main+0x1010>)
 8002296:	701a      	strb	r2, [r3, #0]
 8002298:	4b3b      	ldr	r3, [pc, #236]	; (8002388 <main+0x1010>)
 800229a:	f993 3000 	ldrsb.w	r3, [r3]
 800229e:	2b07      	cmp	r3, #7
 80022a0:	ddc4      	ble.n	800222c <main+0xeb4>
			  }
		  }
		  //setting current piece's place on temp grid
		  for(i = 0; i<4; i++){
 80022a2:	4b39      	ldr	r3, [pc, #228]	; (8002388 <main+0x1010>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	701a      	strb	r2, [r3, #0]
 80022a8:	e061      	b.n	800236e <main+0xff6>
			  for(j = 0; j<4; j++){
 80022aa:	4b38      	ldr	r3, [pc, #224]	; (800238c <main+0x1014>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]
 80022b0:	e04f      	b.n	8002352 <main+0xfda>
				  if(inside_play_field())
 80022b2:	f7fe fdb5 	bl	8000e20 <inside_play_field>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d041      	beq.n	8002340 <main+0xfc8>
				  temp_grid[gridX+i][gridY+j] = temp_grid[gridX+i][gridY+j]||piece_matrix[i][j];
 80022bc:	4b35      	ldr	r3, [pc, #212]	; (8002394 <main+0x101c>)
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	b21b      	sxth	r3, r3
 80022c2:	461a      	mov	r2, r3
 80022c4:	4b30      	ldr	r3, [pc, #192]	; (8002388 <main+0x1010>)
 80022c6:	f993 3000 	ldrsb.w	r3, [r3]
 80022ca:	441a      	add	r2, r3
 80022cc:	4b32      	ldr	r3, [pc, #200]	; (8002398 <main+0x1020>)
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	b21b      	sxth	r3, r3
 80022d2:	4619      	mov	r1, r3
 80022d4:	4b2d      	ldr	r3, [pc, #180]	; (800238c <main+0x1014>)
 80022d6:	f993 3000 	ldrsb.w	r3, [r3]
 80022da:	440b      	add	r3, r1
 80022dc:	0112      	lsls	r2, r2, #4
 80022de:	32b0      	adds	r2, #176	; 0xb0
 80022e0:	443a      	add	r2, r7
 80022e2:	4413      	add	r3, r2
 80022e4:	3bb0      	subs	r3, #176	; 0xb0
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10e      	bne.n	800230a <main+0xf92>
 80022ec:	4b26      	ldr	r3, [pc, #152]	; (8002388 <main+0x1010>)
 80022ee:	f993 3000 	ldrsb.w	r3, [r3]
 80022f2:	4618      	mov	r0, r3
 80022f4:	4b25      	ldr	r3, [pc, #148]	; (800238c <main+0x1014>)
 80022f6:	f993 3000 	ldrsb.w	r3, [r3]
 80022fa:	4619      	mov	r1, r3
 80022fc:	4a24      	ldr	r2, [pc, #144]	; (8002390 <main+0x1018>)
 80022fe:	0083      	lsls	r3, r0, #2
 8002300:	4413      	add	r3, r2
 8002302:	440b      	add	r3, r1
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <main+0xf96>
 800230a:	2101      	movs	r1, #1
 800230c:	e000      	b.n	8002310 <main+0xf98>
 800230e:	2100      	movs	r1, #0
 8002310:	4b20      	ldr	r3, [pc, #128]	; (8002394 <main+0x101c>)
 8002312:	881b      	ldrh	r3, [r3, #0]
 8002314:	b21b      	sxth	r3, r3
 8002316:	461a      	mov	r2, r3
 8002318:	4b1b      	ldr	r3, [pc, #108]	; (8002388 <main+0x1010>)
 800231a:	f993 3000 	ldrsb.w	r3, [r3]
 800231e:	441a      	add	r2, r3
 8002320:	4b1d      	ldr	r3, [pc, #116]	; (8002398 <main+0x1020>)
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	b21b      	sxth	r3, r3
 8002326:	4618      	mov	r0, r3
 8002328:	4b18      	ldr	r3, [pc, #96]	; (800238c <main+0x1014>)
 800232a:	f993 3000 	ldrsb.w	r3, [r3]
 800232e:	4403      	add	r3, r0
 8002330:	b2c9      	uxtb	r1, r1
 8002332:	0112      	lsls	r2, r2, #4
 8002334:	32b0      	adds	r2, #176	; 0xb0
 8002336:	443a      	add	r2, r7
 8002338:	4413      	add	r3, r2
 800233a:	3bb0      	subs	r3, #176	; 0xb0
 800233c:	460a      	mov	r2, r1
 800233e:	701a      	strb	r2, [r3, #0]
			  for(j = 0; j<4; j++){
 8002340:	4b12      	ldr	r3, [pc, #72]	; (800238c <main+0x1014>)
 8002342:	f993 3000 	ldrsb.w	r3, [r3]
 8002346:	b2db      	uxtb	r3, r3
 8002348:	3301      	adds	r3, #1
 800234a:	b2db      	uxtb	r3, r3
 800234c:	b25a      	sxtb	r2, r3
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <main+0x1014>)
 8002350:	701a      	strb	r2, [r3, #0]
 8002352:	4b0e      	ldr	r3, [pc, #56]	; (800238c <main+0x1014>)
 8002354:	f993 3000 	ldrsb.w	r3, [r3]
 8002358:	2b03      	cmp	r3, #3
 800235a:	ddaa      	ble.n	80022b2 <main+0xf3a>
		  for(i = 0; i<4; i++){
 800235c:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <main+0x1010>)
 800235e:	f993 3000 	ldrsb.w	r3, [r3]
 8002362:	b2db      	uxtb	r3, r3
 8002364:	3301      	adds	r3, #1
 8002366:	b2db      	uxtb	r3, r3
 8002368:	b25a      	sxtb	r2, r3
 800236a:	4b07      	ldr	r3, [pc, #28]	; (8002388 <main+0x1010>)
 800236c:	701a      	strb	r2, [r3, #0]
 800236e:	4b06      	ldr	r3, [pc, #24]	; (8002388 <main+0x1010>)
 8002370:	f993 3000 	ldrsb.w	r3, [r3]
 8002374:	2b03      	cmp	r3, #3
 8002376:	dd98      	ble.n	80022aa <main+0xf32>
			  }
		  }
		  //transpose the temp grid matrix for buffering
		  for(i = 0; i < 8; i++){
 8002378:	4b03      	ldr	r3, [pc, #12]	; (8002388 <main+0x1010>)
 800237a:	2200      	movs	r2, #0
 800237c:	701a      	strb	r2, [r3, #0]
 800237e:	e044      	b.n	800240a <main+0x1092>
			  for(j = 0; j < 16; j++){
 8002380:	4b02      	ldr	r3, [pc, #8]	; (800238c <main+0x1014>)
 8002382:	2200      	movs	r2, #0
 8002384:	701a      	strb	r2, [r3, #0]
 8002386:	e032      	b.n	80023ee <main+0x1076>
 8002388:	20000351 	.word	0x20000351
 800238c:	20000352 	.word	0x20000352
 8002390:	2000033c 	.word	0x2000033c
 8002394:	20000234 	.word	0x20000234
 8002398:	20000236 	.word	0x20000236
 800239c:	20000238 	.word	0x20000238
 80023a0:	2000034f 	.word	0x2000034f
				  grid_buff[j][i] = temp_grid[i][j];
 80023a4:	4b97      	ldr	r3, [pc, #604]	; (8002604 <main+0x128c>)
 80023a6:	f993 3000 	ldrsb.w	r3, [r3]
 80023aa:	4619      	mov	r1, r3
 80023ac:	4b96      	ldr	r3, [pc, #600]	; (8002608 <main+0x1290>)
 80023ae:	f993 3000 	ldrsb.w	r3, [r3]
 80023b2:	461a      	mov	r2, r3
 80023b4:	4b94      	ldr	r3, [pc, #592]	; (8002608 <main+0x1290>)
 80023b6:	f993 3000 	ldrsb.w	r3, [r3]
 80023ba:	461c      	mov	r4, r3
 80023bc:	4b91      	ldr	r3, [pc, #580]	; (8002604 <main+0x128c>)
 80023be:	f993 3000 	ldrsb.w	r3, [r3]
 80023c2:	4618      	mov	r0, r3
 80023c4:	010b      	lsls	r3, r1, #4
 80023c6:	33b0      	adds	r3, #176	; 0xb0
 80023c8:	443b      	add	r3, r7
 80023ca:	4413      	add	r3, r2
 80023cc:	3bb0      	subs	r3, #176	; 0xb0
 80023ce:	7819      	ldrb	r1, [r3, #0]
 80023d0:	4a8e      	ldr	r2, [pc, #568]	; (800260c <main+0x1294>)
 80023d2:	00e3      	lsls	r3, r4, #3
 80023d4:	4413      	add	r3, r2
 80023d6:	4403      	add	r3, r0
 80023d8:	460a      	mov	r2, r1
 80023da:	701a      	strb	r2, [r3, #0]
			  for(j = 0; j < 16; j++){
 80023dc:	4b8a      	ldr	r3, [pc, #552]	; (8002608 <main+0x1290>)
 80023de:	f993 3000 	ldrsb.w	r3, [r3]
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	3301      	adds	r3, #1
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	b25a      	sxtb	r2, r3
 80023ea:	4b87      	ldr	r3, [pc, #540]	; (8002608 <main+0x1290>)
 80023ec:	701a      	strb	r2, [r3, #0]
 80023ee:	4b86      	ldr	r3, [pc, #536]	; (8002608 <main+0x1290>)
 80023f0:	f993 3000 	ldrsb.w	r3, [r3]
 80023f4:	2b0f      	cmp	r3, #15
 80023f6:	ddd5      	ble.n	80023a4 <main+0x102c>
		  for(i = 0; i < 8; i++){
 80023f8:	4b82      	ldr	r3, [pc, #520]	; (8002604 <main+0x128c>)
 80023fa:	f993 3000 	ldrsb.w	r3, [r3]
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	3301      	adds	r3, #1
 8002402:	b2db      	uxtb	r3, r3
 8002404:	b25a      	sxtb	r2, r3
 8002406:	4b7f      	ldr	r3, [pc, #508]	; (8002604 <main+0x128c>)
 8002408:	701a      	strb	r2, [r3, #0]
 800240a:	4b7e      	ldr	r3, [pc, #504]	; (8002604 <main+0x128c>)
 800240c:	f993 3000 	ldrsb.w	r3, [r3]
 8002410:	2b07      	cmp	r3, #7
 8002412:	ddb5      	ble.n	8002380 <main+0x1008>
			  }
		  }
		  //reverse the y axis of transposed matrix
		  for(i = 0; i < 16; i++){
 8002414:	4b7b      	ldr	r3, [pc, #492]	; (8002604 <main+0x128c>)
 8002416:	2200      	movs	r2, #0
 8002418:	701a      	strb	r2, [r3, #0]
 800241a:	e055      	b.n	80024c8 <main+0x1150>
			  for(j = 0; j < 4; j++){
 800241c:	4b7a      	ldr	r3, [pc, #488]	; (8002608 <main+0x1290>)
 800241e:	2200      	movs	r2, #0
 8002420:	701a      	strb	r2, [r3, #0]
 8002422:	e043      	b.n	80024ac <main+0x1134>
				  uint8_t temp = grid_buff[i][j];
 8002424:	4b77      	ldr	r3, [pc, #476]	; (8002604 <main+0x128c>)
 8002426:	f993 3000 	ldrsb.w	r3, [r3]
 800242a:	4618      	mov	r0, r3
 800242c:	4b76      	ldr	r3, [pc, #472]	; (8002608 <main+0x1290>)
 800242e:	f993 3000 	ldrsb.w	r3, [r3]
 8002432:	4619      	mov	r1, r3
 8002434:	4a75      	ldr	r2, [pc, #468]	; (800260c <main+0x1294>)
 8002436:	00c3      	lsls	r3, r0, #3
 8002438:	4413      	add	r3, r2
 800243a:	440b      	add	r3, r1
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
				  grid_buff[i][j] = grid_buff[i][7-j];
 8002442:	4b70      	ldr	r3, [pc, #448]	; (8002604 <main+0x128c>)
 8002444:	f993 3000 	ldrsb.w	r3, [r3]
 8002448:	461d      	mov	r5, r3
 800244a:	4b6f      	ldr	r3, [pc, #444]	; (8002608 <main+0x1290>)
 800244c:	f993 3000 	ldrsb.w	r3, [r3]
 8002450:	f1c3 0307 	rsb	r3, r3, #7
 8002454:	4a6b      	ldr	r2, [pc, #428]	; (8002604 <main+0x128c>)
 8002456:	f992 2000 	ldrsb.w	r2, [r2]
 800245a:	4614      	mov	r4, r2
 800245c:	4a6a      	ldr	r2, [pc, #424]	; (8002608 <main+0x1290>)
 800245e:	f992 2000 	ldrsb.w	r2, [r2]
 8002462:	4610      	mov	r0, r2
 8002464:	4969      	ldr	r1, [pc, #420]	; (800260c <main+0x1294>)
 8002466:	00ea      	lsls	r2, r5, #3
 8002468:	440a      	add	r2, r1
 800246a:	4413      	add	r3, r2
 800246c:	7819      	ldrb	r1, [r3, #0]
 800246e:	4a67      	ldr	r2, [pc, #412]	; (800260c <main+0x1294>)
 8002470:	00e3      	lsls	r3, r4, #3
 8002472:	4413      	add	r3, r2
 8002474:	4403      	add	r3, r0
 8002476:	460a      	mov	r2, r1
 8002478:	701a      	strb	r2, [r3, #0]
				  grid_buff[i][7-j] = temp;
 800247a:	4b62      	ldr	r3, [pc, #392]	; (8002604 <main+0x128c>)
 800247c:	f993 3000 	ldrsb.w	r3, [r3]
 8002480:	461a      	mov	r2, r3
 8002482:	4b61      	ldr	r3, [pc, #388]	; (8002608 <main+0x1290>)
 8002484:	f993 3000 	ldrsb.w	r3, [r3]
 8002488:	f1c3 0307 	rsb	r3, r3, #7
 800248c:	495f      	ldr	r1, [pc, #380]	; (800260c <main+0x1294>)
 800248e:	00d2      	lsls	r2, r2, #3
 8002490:	440a      	add	r2, r1
 8002492:	4413      	add	r3, r2
 8002494:	f897 20a1 	ldrb.w	r2, [r7, #161]	; 0xa1
 8002498:	701a      	strb	r2, [r3, #0]
			  for(j = 0; j < 4; j++){
 800249a:	4b5b      	ldr	r3, [pc, #364]	; (8002608 <main+0x1290>)
 800249c:	f993 3000 	ldrsb.w	r3, [r3]
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	3301      	adds	r3, #1
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	b25a      	sxtb	r2, r3
 80024a8:	4b57      	ldr	r3, [pc, #348]	; (8002608 <main+0x1290>)
 80024aa:	701a      	strb	r2, [r3, #0]
 80024ac:	4b56      	ldr	r3, [pc, #344]	; (8002608 <main+0x1290>)
 80024ae:	f993 3000 	ldrsb.w	r3, [r3]
 80024b2:	2b03      	cmp	r3, #3
 80024b4:	ddb6      	ble.n	8002424 <main+0x10ac>
		  for(i = 0; i < 16; i++){
 80024b6:	4b53      	ldr	r3, [pc, #332]	; (8002604 <main+0x128c>)
 80024b8:	f993 3000 	ldrsb.w	r3, [r3]
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	3301      	adds	r3, #1
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	b25a      	sxtb	r2, r3
 80024c4:	4b4f      	ldr	r3, [pc, #316]	; (8002604 <main+0x128c>)
 80024c6:	701a      	strb	r2, [r3, #0]
 80024c8:	4b4e      	ldr	r3, [pc, #312]	; (8002604 <main+0x128c>)
 80024ca:	f993 3000 	ldrsb.w	r3, [r3]
 80024ce:	2b0f      	cmp	r3, #15
 80024d0:	dda4      	ble.n	800241c <main+0x10a4>
			  }
		  }

		//  draw pixels on the display buffer
		  disp1color_FillScreenbuff(0);
 80024d2:	2000      	movs	r0, #0
 80024d4:	f7fe f8ec 	bl	80006b0 <disp1color_FillScreenbuff>
		  for(int16_t dot_x = 0; dot_x < 16; dot_x++){
 80024d8:	2300      	movs	r3, #0
 80024da:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80024de:	e03a      	b.n	8002556 <main+0x11de>
			  for(int16_t dot_y = 0; dot_y < 8; dot_y++){
 80024e0:	2300      	movs	r3, #0
 80024e2:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 80024e6:	e02b      	b.n	8002540 <main+0x11c8>
				  if (grid_buff[dot_x][dot_y])
 80024e8:	f9b7 20a4 	ldrsh.w	r2, [r7, #164]	; 0xa4
 80024ec:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 80024f0:	4946      	ldr	r1, [pc, #280]	; (800260c <main+0x1294>)
 80024f2:	00d2      	lsls	r2, r2, #3
 80024f4:	440a      	add	r2, r1
 80024f6:	4413      	add	r3, r2
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d019      	beq.n	8002532 <main+0x11ba>
				  disp1color_DrawRectangle(2*dot_x, 2*dot_y, 2*dot_x + 1, 2*dot_y + 1);
 80024fe:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	b29b      	uxth	r3, r3
 8002506:	b218      	sxth	r0, r3
 8002508:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	b29b      	uxth	r3, r3
 8002510:	b219      	sxth	r1, r3
 8002512:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	b29b      	uxth	r3, r3
 800251a:	3301      	adds	r3, #1
 800251c:	b29b      	uxth	r3, r3
 800251e:	b21a      	sxth	r2, r3
 8002520:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	b29b      	uxth	r3, r3
 8002528:	3301      	adds	r3, #1
 800252a:	b29b      	uxth	r3, r3
 800252c:	b21b      	sxth	r3, r3
 800252e:	f7fe f9bc 	bl	80008aa <disp1color_DrawRectangle>
			  for(int16_t dot_y = 0; dot_y < 8; dot_y++){
 8002532:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 8002536:	b29b      	uxth	r3, r3
 8002538:	3301      	adds	r3, #1
 800253a:	b29b      	uxth	r3, r3
 800253c:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 8002540:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 8002544:	2b07      	cmp	r3, #7
 8002546:	ddcf      	ble.n	80024e8 <main+0x1170>
		  for(int16_t dot_x = 0; dot_x < 16; dot_x++){
 8002548:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 800254c:	b29b      	uxth	r3, r3
 800254e:	3301      	adds	r3, #1
 8002550:	b29b      	uxth	r3, r3
 8002552:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8002556:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 800255a:	2b0f      	cmp	r3, #15
 800255c:	ddc0      	ble.n	80024e0 <main+0x1168>
			  }
		  }

	//	  	  disp1color_DrawRectangle(5,5,10,10);
			  disp1color_UpdateFromBuff();
 800255e:	f7fe f8b9 	bl	80006d4 <disp1color_UpdateFromBuff>
			  prepare_data();
 8002562:	f7fe fae9 	bl	8000b38 <prepare_data>

			  disp_row(0);
 8002566:	2000      	movs	r0, #0
 8002568:	f7fe fe4c 	bl	8001204 <disp_row>
			  disp_row(1);
 800256c:	2001      	movs	r0, #1
 800256e:	f7fe fe49 	bl	8001204 <disp_row>
			  disp_row(2);
 8002572:	2002      	movs	r0, #2
 8002574:	f7fe fe46 	bl	8001204 <disp_row>
			  disp_row(3);
 8002578:	2003      	movs	r0, #3
 800257a:	f7fe fe43 	bl	8001204 <disp_row>
	  while(!game_over){
 800257e:	4b24      	ldr	r3, [pc, #144]	; (8002610 <main+0x1298>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	f43e af45 	beq.w	8001412 <main+0x9a>

	  }
	  //clear grid
	  for(i = 0; i < 8; i++){
 8002588:	4b1e      	ldr	r3, [pc, #120]	; (8002604 <main+0x128c>)
 800258a:	2200      	movs	r2, #0
 800258c:	701a      	strb	r2, [r3, #0]
 800258e:	e028      	b.n	80025e2 <main+0x126a>
		  for(j = 0; j < 16; j++){
 8002590:	4b1d      	ldr	r3, [pc, #116]	; (8002608 <main+0x1290>)
 8002592:	2200      	movs	r2, #0
 8002594:	701a      	strb	r2, [r3, #0]
 8002596:	e016      	b.n	80025c6 <main+0x124e>
			  grid[i][j] = 0;
 8002598:	4b1a      	ldr	r3, [pc, #104]	; (8002604 <main+0x128c>)
 800259a:	f993 3000 	ldrsb.w	r3, [r3]
 800259e:	4618      	mov	r0, r3
 80025a0:	4b19      	ldr	r3, [pc, #100]	; (8002608 <main+0x1290>)
 80025a2:	f993 3000 	ldrsb.w	r3, [r3]
 80025a6:	4619      	mov	r1, r3
 80025a8:	4a1a      	ldr	r2, [pc, #104]	; (8002614 <main+0x129c>)
 80025aa:	0103      	lsls	r3, r0, #4
 80025ac:	4413      	add	r3, r2
 80025ae:	440b      	add	r3, r1
 80025b0:	2200      	movs	r2, #0
 80025b2:	701a      	strb	r2, [r3, #0]
		  for(j = 0; j < 16; j++){
 80025b4:	4b14      	ldr	r3, [pc, #80]	; (8002608 <main+0x1290>)
 80025b6:	f993 3000 	ldrsb.w	r3, [r3]
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	3301      	adds	r3, #1
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	b25a      	sxtb	r2, r3
 80025c2:	4b11      	ldr	r3, [pc, #68]	; (8002608 <main+0x1290>)
 80025c4:	701a      	strb	r2, [r3, #0]
 80025c6:	4b10      	ldr	r3, [pc, #64]	; (8002608 <main+0x1290>)
 80025c8:	f993 3000 	ldrsb.w	r3, [r3]
 80025cc:	2b0f      	cmp	r3, #15
 80025ce:	dde3      	ble.n	8002598 <main+0x1220>
	  for(i = 0; i < 8; i++){
 80025d0:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <main+0x128c>)
 80025d2:	f993 3000 	ldrsb.w	r3, [r3]
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	3301      	adds	r3, #1
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	b25a      	sxtb	r2, r3
 80025de:	4b09      	ldr	r3, [pc, #36]	; (8002604 <main+0x128c>)
 80025e0:	701a      	strb	r2, [r3, #0]
 80025e2:	4b08      	ldr	r3, [pc, #32]	; (8002604 <main+0x128c>)
 80025e4:	f993 3000 	ldrsb.w	r3, [r3]
 80025e8:	2b07      	cmp	r3, #7
 80025ea:	ddd1      	ble.n	8002590 <main+0x1218>
		  }
	  }
	  HAL_Delay(3000);
 80025ec:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80025f0:	f000 fbda 	bl	8002da8 <HAL_Delay>
	  new_turn = 1;
 80025f4:	4b08      	ldr	r3, [pc, #32]	; (8002618 <main+0x12a0>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	701a      	strb	r2, [r3, #0]
	  game_over = 0;
 80025fa:	4b05      	ldr	r3, [pc, #20]	; (8002610 <main+0x1298>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	701a      	strb	r2, [r3, #0]
	  while(!game_over){
 8002600:	e7bd      	b.n	800257e <main+0x1206>
 8002602:	bf00      	nop
 8002604:	20000351 	.word	0x20000351
 8002608:	20000352 	.word	0x20000352
 800260c:	200002b8 	.word	0x200002b8
 8002610:	20000353 	.word	0x20000353
 8002614:	20000238 	.word	0x20000238
 8002618:	2000000b 	.word	0x2000000b

0800261c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b094      	sub	sp, #80	; 0x50
 8002620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002622:	f107 0320 	add.w	r3, r7, #32
 8002626:	2230      	movs	r2, #48	; 0x30
 8002628:	2100      	movs	r1, #0
 800262a:	4618      	mov	r0, r3
 800262c:	f003 f962 	bl	80058f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002630:	f107 030c 	add.w	r3, r7, #12
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002640:	2300      	movs	r3, #0
 8002642:	60bb      	str	r3, [r7, #8]
 8002644:	4b27      	ldr	r3, [pc, #156]	; (80026e4 <SystemClock_Config+0xc8>)
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	4a26      	ldr	r2, [pc, #152]	; (80026e4 <SystemClock_Config+0xc8>)
 800264a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800264e:	6413      	str	r3, [r2, #64]	; 0x40
 8002650:	4b24      	ldr	r3, [pc, #144]	; (80026e4 <SystemClock_Config+0xc8>)
 8002652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800265c:	2300      	movs	r3, #0
 800265e:	607b      	str	r3, [r7, #4]
 8002660:	4b21      	ldr	r3, [pc, #132]	; (80026e8 <SystemClock_Config+0xcc>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a20      	ldr	r2, [pc, #128]	; (80026e8 <SystemClock_Config+0xcc>)
 8002666:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800266a:	6013      	str	r3, [r2, #0]
 800266c:	4b1e      	ldr	r3, [pc, #120]	; (80026e8 <SystemClock_Config+0xcc>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002674:	607b      	str	r3, [r7, #4]
 8002676:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002678:	2302      	movs	r3, #2
 800267a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800267c:	2301      	movs	r3, #1
 800267e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002680:	2310      	movs	r3, #16
 8002682:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002684:	2302      	movs	r3, #2
 8002686:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002688:	2300      	movs	r3, #0
 800268a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800268c:	2308      	movs	r3, #8
 800268e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002690:	2364      	movs	r3, #100	; 0x64
 8002692:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002694:	2302      	movs	r3, #2
 8002696:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002698:	2304      	movs	r3, #4
 800269a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800269c:	f107 0320 	add.w	r3, r7, #32
 80026a0:	4618      	mov	r0, r3
 80026a2:	f001 fb7b 	bl	8003d9c <HAL_RCC_OscConfig>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80026ac:	f000 f81e 	bl	80026ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026b0:	230f      	movs	r3, #15
 80026b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026b4:	2302      	movs	r3, #2
 80026b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026c2:	2300      	movs	r3, #0
 80026c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80026c6:	f107 030c 	add.w	r3, r7, #12
 80026ca:	2103      	movs	r1, #3
 80026cc:	4618      	mov	r0, r3
 80026ce:	f001 fddd 	bl	800428c <HAL_RCC_ClockConfig>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80026d8:	f000 f808 	bl	80026ec <Error_Handler>
  }
}
 80026dc:	bf00      	nop
 80026de:	3750      	adds	r7, #80	; 0x50
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40023800 	.word	0x40023800
 80026e8:	40007000 	.word	0x40007000

080026ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026f0:	b672      	cpsid	i
}
 80026f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026f4:	e7fe      	b.n	80026f4 <Error_Handler+0x8>
	...

080026f8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80026fc:	4b17      	ldr	r3, [pc, #92]	; (800275c <MX_SPI1_Init+0x64>)
 80026fe:	4a18      	ldr	r2, [pc, #96]	; (8002760 <MX_SPI1_Init+0x68>)
 8002700:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002702:	4b16      	ldr	r3, [pc, #88]	; (800275c <MX_SPI1_Init+0x64>)
 8002704:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002708:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800270a:	4b14      	ldr	r3, [pc, #80]	; (800275c <MX_SPI1_Init+0x64>)
 800270c:	2200      	movs	r2, #0
 800270e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002710:	4b12      	ldr	r3, [pc, #72]	; (800275c <MX_SPI1_Init+0x64>)
 8002712:	2200      	movs	r2, #0
 8002714:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002716:	4b11      	ldr	r3, [pc, #68]	; (800275c <MX_SPI1_Init+0x64>)
 8002718:	2200      	movs	r2, #0
 800271a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800271c:	4b0f      	ldr	r3, [pc, #60]	; (800275c <MX_SPI1_Init+0x64>)
 800271e:	2200      	movs	r2, #0
 8002720:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002722:	4b0e      	ldr	r3, [pc, #56]	; (800275c <MX_SPI1_Init+0x64>)
 8002724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002728:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800272a:	4b0c      	ldr	r3, [pc, #48]	; (800275c <MX_SPI1_Init+0x64>)
 800272c:	2208      	movs	r2, #8
 800272e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002730:	4b0a      	ldr	r3, [pc, #40]	; (800275c <MX_SPI1_Init+0x64>)
 8002732:	2200      	movs	r2, #0
 8002734:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002736:	4b09      	ldr	r3, [pc, #36]	; (800275c <MX_SPI1_Init+0x64>)
 8002738:	2200      	movs	r2, #0
 800273a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800273c:	4b07      	ldr	r3, [pc, #28]	; (800275c <MX_SPI1_Init+0x64>)
 800273e:	2200      	movs	r2, #0
 8002740:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002742:	4b06      	ldr	r3, [pc, #24]	; (800275c <MX_SPI1_Init+0x64>)
 8002744:	220a      	movs	r2, #10
 8002746:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002748:	4804      	ldr	r0, [pc, #16]	; (800275c <MX_SPI1_Init+0x64>)
 800274a:	f001 ff6b 	bl	8004624 <HAL_SPI_Init>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002754:	f7ff ffca 	bl	80026ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002758:	bf00      	nop
 800275a:	bd80      	pop	{r7, pc}
 800275c:	20000358 	.word	0x20000358
 8002760:	40013000 	.word	0x40013000

08002764 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08a      	sub	sp, #40	; 0x28
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800276c:	f107 0314 	add.w	r3, r7, #20
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	60da      	str	r2, [r3, #12]
 800277a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a19      	ldr	r2, [pc, #100]	; (80027e8 <HAL_SPI_MspInit+0x84>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d12b      	bne.n	80027de <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	613b      	str	r3, [r7, #16]
 800278a:	4b18      	ldr	r3, [pc, #96]	; (80027ec <HAL_SPI_MspInit+0x88>)
 800278c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278e:	4a17      	ldr	r2, [pc, #92]	; (80027ec <HAL_SPI_MspInit+0x88>)
 8002790:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002794:	6453      	str	r3, [r2, #68]	; 0x44
 8002796:	4b15      	ldr	r3, [pc, #84]	; (80027ec <HAL_SPI_MspInit+0x88>)
 8002798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800279e:	613b      	str	r3, [r7, #16]
 80027a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	4b11      	ldr	r3, [pc, #68]	; (80027ec <HAL_SPI_MspInit+0x88>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	4a10      	ldr	r2, [pc, #64]	; (80027ec <HAL_SPI_MspInit+0x88>)
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	6313      	str	r3, [r2, #48]	; 0x30
 80027b2:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <HAL_SPI_MspInit+0x88>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80027be:	23a0      	movs	r3, #160	; 0xa0
 80027c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c2:	2302      	movs	r3, #2
 80027c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ca:	2303      	movs	r3, #3
 80027cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80027ce:	2305      	movs	r3, #5
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d2:	f107 0314 	add.w	r3, r7, #20
 80027d6:	4619      	mov	r1, r3
 80027d8:	4805      	ldr	r0, [pc, #20]	; (80027f0 <HAL_SPI_MspInit+0x8c>)
 80027da:	f000 ffd9 	bl	8003790 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80027de:	bf00      	nop
 80027e0:	3728      	adds	r7, #40	; 0x28
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40013000 	.word	0x40013000
 80027ec:	40023800 	.word	0x40023800
 80027f0:	40020000 	.word	0x40020000

080027f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	607b      	str	r3, [r7, #4]
 80027fe:	4b10      	ldr	r3, [pc, #64]	; (8002840 <HAL_MspInit+0x4c>)
 8002800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002802:	4a0f      	ldr	r2, [pc, #60]	; (8002840 <HAL_MspInit+0x4c>)
 8002804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002808:	6453      	str	r3, [r2, #68]	; 0x44
 800280a:	4b0d      	ldr	r3, [pc, #52]	; (8002840 <HAL_MspInit+0x4c>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002812:	607b      	str	r3, [r7, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	603b      	str	r3, [r7, #0]
 800281a:	4b09      	ldr	r3, [pc, #36]	; (8002840 <HAL_MspInit+0x4c>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	4a08      	ldr	r2, [pc, #32]	; (8002840 <HAL_MspInit+0x4c>)
 8002820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002824:	6413      	str	r3, [r2, #64]	; 0x40
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_MspInit+0x4c>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282e:	603b      	str	r3, [r7, #0]
 8002830:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	40023800 	.word	0x40023800

08002844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002848:	e7fe      	b.n	8002848 <NMI_Handler+0x4>

0800284a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800284a:	b480      	push	{r7}
 800284c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800284e:	e7fe      	b.n	800284e <HardFault_Handler+0x4>

08002850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002854:	e7fe      	b.n	8002854 <MemManage_Handler+0x4>

08002856 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002856:	b480      	push	{r7}
 8002858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800285a:	e7fe      	b.n	800285a <BusFault_Handler+0x4>

0800285c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002860:	e7fe      	b.n	8002860 <UsageFault_Handler+0x4>

08002862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002862:	b480      	push	{r7}
 8002864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002866:	bf00      	nop
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002874:	bf00      	nop
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800287e:	b480      	push	{r7}
 8002880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002882:	bf00      	nop
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002890:	f000 fa6a 	bl	8002d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002894:	bf00      	nop
 8002896:	bd80      	pop	{r7, pc}

08002898 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	moved_left = 1;
 800289c:	4b07      	ldr	r3, [pc, #28]	; (80028bc <EXTI0_IRQHandler+0x24>)
 800289e:	2201      	movs	r2, #1
 80028a0:	701a      	strb	r2, [r3, #0]
	gridX--;
 80028a2:	4b07      	ldr	r3, [pc, #28]	; (80028c0 <EXTI0_IRQHandler+0x28>)
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <EXTI0_IRQHandler+0x28>)
 80028ae:	801a      	strh	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LEFT_Pin);
 80028b0:	2001      	movs	r0, #1
 80028b2:	f001 f90b 	bl	8003acc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80028b6:	bf00      	nop
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	2000034d 	.word	0x2000034d
 80028c0:	20000234 	.word	0x20000234

080028c4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	moved_right = 1;
 80028c8:	4b07      	ldr	r3, [pc, #28]	; (80028e8 <EXTI1_IRQHandler+0x24>)
 80028ca:	2201      	movs	r2, #1
 80028cc:	701a      	strb	r2, [r3, #0]
	gridX++;
 80028ce:	4b07      	ldr	r3, [pc, #28]	; (80028ec <EXTI1_IRQHandler+0x28>)
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	3301      	adds	r3, #1
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	4b04      	ldr	r3, [pc, #16]	; (80028ec <EXTI1_IRQHandler+0x28>)
 80028da:	801a      	strh	r2, [r3, #0]
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RIGHT_Pin);
 80028dc:	2002      	movs	r0, #2
 80028de:	f001 f8f5 	bl	8003acc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	2000034e 	.word	0x2000034e
 80028ec:	20000234 	.word	0x20000234

080028f0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	rotated = 1;
 80028f6:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <EXTI2_IRQHandler+0x30>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	701a      	strb	r2, [r3, #0]
	for(int debounce = 0; debounce < 2000; debounce++){
 80028fc:	2300      	movs	r3, #0
 80028fe:	607b      	str	r3, [r7, #4]
 8002900:	e002      	b.n	8002908 <EXTI2_IRQHandler+0x18>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3301      	adds	r3, #1
 8002906:	607b      	str	r3, [r7, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800290e:	dbf8      	blt.n	8002902 <EXTI2_IRQHandler+0x12>
	}
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ROTATE_Pin);
 8002910:	2004      	movs	r0, #4
 8002912:	f001 f8db 	bl	8003acc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	2000034f 	.word	0x2000034f

08002924 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	hard_drop = 1;
 800292a:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <EXTI3_IRQHandler+0x30>)
 800292c:	2201      	movs	r2, #1
 800292e:	701a      	strb	r2, [r3, #0]
	for(int debounce = 0; debounce < 2000; debounce++){
 8002930:	2300      	movs	r3, #0
 8002932:	607b      	str	r3, [r7, #4]
 8002934:	e002      	b.n	800293c <EXTI3_IRQHandler+0x18>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3301      	adds	r3, #1
 800293a:	607b      	str	r3, [r7, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002942:	dbf8      	blt.n	8002936 <EXTI3_IRQHandler+0x12>
	}
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DROP_Pin);
 8002944:	2008      	movs	r0, #8
 8002946:	f001 f8c1 	bl	8003acc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	20000350 	.word	0x20000350

08002958 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	moved_down = 1;
 800295c:	4b07      	ldr	r3, [pc, #28]	; (800297c <TIM3_IRQHandler+0x24>)
 800295e:	2201      	movs	r2, #1
 8002960:	701a      	strb	r2, [r3, #0]
	gridY++;
 8002962:	4b07      	ldr	r3, [pc, #28]	; (8002980 <TIM3_IRQHandler+0x28>)
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	b29b      	uxth	r3, r3
 8002968:	3301      	adds	r3, #1
 800296a:	b29a      	uxth	r2, r3
 800296c:	4b04      	ldr	r3, [pc, #16]	; (8002980 <TIM3_IRQHandler+0x28>)
 800296e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002970:	4804      	ldr	r0, [pc, #16]	; (8002984 <TIM3_IRQHandler+0x2c>)
 8002972:	f002 fa00 	bl	8004d76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	2000034c 	.word	0x2000034c
 8002980:	20000236 	.word	0x20000236
 8002984:	200003b4 	.word	0x200003b4

08002988 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
	return 1;
 800298c:	2301      	movs	r3, #1
}
 800298e:	4618      	mov	r0, r3
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <_kill>:

int _kill(int pid, int sig)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80029a2:	f002 ff6f 	bl	8005884 <__errno>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2216      	movs	r2, #22
 80029aa:	601a      	str	r2, [r3, #0]
	return -1;
 80029ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <_exit>:

void _exit (int status)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80029c0:	f04f 31ff 	mov.w	r1, #4294967295
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff ffe7 	bl	8002998 <_kill>
	while (1) {}		/* Make sure we hang here */
 80029ca:	e7fe      	b.n	80029ca <_exit+0x12>

080029cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]
 80029dc:	e00a      	b.n	80029f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80029de:	f3af 8000 	nop.w
 80029e2:	4601      	mov	r1, r0
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	1c5a      	adds	r2, r3, #1
 80029e8:	60ba      	str	r2, [r7, #8]
 80029ea:	b2ca      	uxtb	r2, r1
 80029ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	3301      	adds	r3, #1
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	dbf0      	blt.n	80029de <_read+0x12>
	}

return len;
 80029fc:	687b      	ldr	r3, [r7, #4]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b086      	sub	sp, #24
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	60f8      	str	r0, [r7, #12]
 8002a0e:	60b9      	str	r1, [r7, #8]
 8002a10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a12:	2300      	movs	r3, #0
 8002a14:	617b      	str	r3, [r7, #20]
 8002a16:	e009      	b.n	8002a2c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	1c5a      	adds	r2, r3, #1
 8002a1c:	60ba      	str	r2, [r7, #8]
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	dbf1      	blt.n	8002a18 <_write+0x12>
	}
	return len;
 8002a34:	687b      	ldr	r3, [r7, #4]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <_close>:

int _close(int file)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
	return -1;
 8002a46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
 8002a5e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a66:	605a      	str	r2, [r3, #4]
	return 0;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <_isatty>:

int _isatty(int file)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
	return 1;
 8002a7e:	2301      	movs	r3, #1
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
	return 0;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
	...

08002aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ab0:	4a14      	ldr	r2, [pc, #80]	; (8002b04 <_sbrk+0x5c>)
 8002ab2:	4b15      	ldr	r3, [pc, #84]	; (8002b08 <_sbrk+0x60>)
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002abc:	4b13      	ldr	r3, [pc, #76]	; (8002b0c <_sbrk+0x64>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d102      	bne.n	8002aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ac4:	4b11      	ldr	r3, [pc, #68]	; (8002b0c <_sbrk+0x64>)
 8002ac6:	4a12      	ldr	r2, [pc, #72]	; (8002b10 <_sbrk+0x68>)
 8002ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002aca:	4b10      	ldr	r3, [pc, #64]	; (8002b0c <_sbrk+0x64>)
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d207      	bcs.n	8002ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ad8:	f002 fed4 	bl	8005884 <__errno>
 8002adc:	4603      	mov	r3, r0
 8002ade:	220c      	movs	r2, #12
 8002ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae6:	e009      	b.n	8002afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ae8:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <_sbrk+0x64>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002aee:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <_sbrk+0x64>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4413      	add	r3, r2
 8002af6:	4a05      	ldr	r2, [pc, #20]	; (8002b0c <_sbrk+0x64>)
 8002af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002afa:	68fb      	ldr	r3, [r7, #12]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	20020000 	.word	0x20020000
 8002b08:	00000400 	.word	0x00000400
 8002b0c:	200003b0 	.word	0x200003b0
 8002b10:	20000410 	.word	0x20000410

08002b14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b18:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <SystemInit+0x20>)
 8002b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1e:	4a05      	ldr	r2, [pc, #20]	; (8002b34 <SystemInit+0x20>)
 8002b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b28:	bf00      	nop
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	e000ed00 	.word	0xe000ed00

08002b38 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08e      	sub	sp, #56	; 0x38
 8002b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b42:	2200      	movs	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	605a      	str	r2, [r3, #4]
 8002b48:	609a      	str	r2, [r3, #8]
 8002b4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b4c:	f107 0320 	add.w	r3, r7, #32
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b56:	1d3b      	adds	r3, r7, #4
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	605a      	str	r2, [r3, #4]
 8002b5e:	609a      	str	r2, [r3, #8]
 8002b60:	60da      	str	r2, [r3, #12]
 8002b62:	611a      	str	r2, [r3, #16]
 8002b64:	615a      	str	r2, [r3, #20]
 8002b66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b68:	4b2b      	ldr	r3, [pc, #172]	; (8002c18 <MX_TIM3_Init+0xe0>)
 8002b6a:	4a2c      	ldr	r2, [pc, #176]	; (8002c1c <MX_TIM3_Init+0xe4>)
 8002b6c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 8002b6e:	4b2a      	ldr	r3, [pc, #168]	; (8002c18 <MX_TIM3_Init+0xe0>)
 8002b70:	f242 720f 	movw	r2, #9999	; 0x270f
 8002b74:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b76:	4b28      	ldr	r3, [pc, #160]	; (8002c18 <MX_TIM3_Init+0xe0>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000/3-1;
 8002b7c:	4b26      	ldr	r3, [pc, #152]	; (8002c18 <MX_TIM3_Init+0xe0>)
 8002b7e:	f640 5204 	movw	r2, #3332	; 0xd04
 8002b82:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b84:	4b24      	ldr	r3, [pc, #144]	; (8002c18 <MX_TIM3_Init+0xe0>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b8a:	4b23      	ldr	r3, [pc, #140]	; (8002c18 <MX_TIM3_Init+0xe0>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b90:	4821      	ldr	r0, [pc, #132]	; (8002c18 <MX_TIM3_Init+0xe0>)
 8002b92:	f001 ffe5 	bl	8004b60 <HAL_TIM_Base_Init>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002b9c:	f7ff fda6 	bl	80026ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ba6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002baa:	4619      	mov	r1, r3
 8002bac:	481a      	ldr	r0, [pc, #104]	; (8002c18 <MX_TIM3_Init+0xe0>)
 8002bae:	f002 fa47 	bl	8005040 <HAL_TIM_ConfigClockSource>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002bb8:	f7ff fd98 	bl	80026ec <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8002bbc:	4816      	ldr	r0, [pc, #88]	; (8002c18 <MX_TIM3_Init+0xe0>)
 8002bbe:	f002 f881 	bl	8004cc4 <HAL_TIM_OC_Init>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002bc8:	f7ff fd90 	bl	80026ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bd4:	f107 0320 	add.w	r3, r7, #32
 8002bd8:	4619      	mov	r1, r3
 8002bda:	480f      	ldr	r0, [pc, #60]	; (8002c18 <MX_TIM3_Init+0xe0>)
 8002bdc:	f002 fdd0 	bl	8005780 <HAL_TIMEx_MasterConfigSynchronization>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002be6:	f7ff fd81 	bl	80026ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002bea:	2300      	movs	r3, #0
 8002bec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bfa:	1d3b      	adds	r3, r7, #4
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4805      	ldr	r0, [pc, #20]	; (8002c18 <MX_TIM3_Init+0xe0>)
 8002c02:	f002 f9c1 	bl	8004f88 <HAL_TIM_OC_ConfigChannel>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002c0c:	f7ff fd6e 	bl	80026ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002c10:	bf00      	nop
 8002c12:	3738      	adds	r7, #56	; 0x38
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	200003b4 	.word	0x200003b4
 8002c1c:	40000400 	.word	0x40000400

08002c20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a0e      	ldr	r2, [pc, #56]	; (8002c68 <HAL_TIM_Base_MspInit+0x48>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d115      	bne.n	8002c5e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	4b0d      	ldr	r3, [pc, #52]	; (8002c6c <HAL_TIM_Base_MspInit+0x4c>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	4a0c      	ldr	r2, [pc, #48]	; (8002c6c <HAL_TIM_Base_MspInit+0x4c>)
 8002c3c:	f043 0302 	orr.w	r3, r3, #2
 8002c40:	6413      	str	r3, [r2, #64]	; 0x40
 8002c42:	4b0a      	ldr	r3, [pc, #40]	; (8002c6c <HAL_TIM_Base_MspInit+0x4c>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2100      	movs	r1, #0
 8002c52:	201d      	movs	r0, #29
 8002c54:	f000 fd65 	bl	8003722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c58:	201d      	movs	r0, #29
 8002c5a:	f000 fd7e 	bl	800375a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002c5e:	bf00      	nop
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40000400 	.word	0x40000400
 8002c6c:	40023800 	.word	0x40023800

08002c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ca8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c74:	480d      	ldr	r0, [pc, #52]	; (8002cac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c76:	490e      	ldr	r1, [pc, #56]	; (8002cb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c78:	4a0e      	ldr	r2, [pc, #56]	; (8002cb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c7c:	e002      	b.n	8002c84 <LoopCopyDataInit>

08002c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c82:	3304      	adds	r3, #4

08002c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c88:	d3f9      	bcc.n	8002c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c8a:	4a0b      	ldr	r2, [pc, #44]	; (8002cb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c8c:	4c0b      	ldr	r4, [pc, #44]	; (8002cbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c90:	e001      	b.n	8002c96 <LoopFillZerobss>

08002c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c94:	3204      	adds	r2, #4

08002c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c98:	d3fb      	bcc.n	8002c92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c9a:	f7ff ff3b 	bl	8002b14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c9e:	f002 fdf7 	bl	8005890 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ca2:	f7fe fb69 	bl	8001378 <main>
  bx  lr    
 8002ca6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ca8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cb0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002cb4:	08006afc 	.word	0x08006afc
  ldr r2, =_sbss
 8002cb8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002cbc:	20000410 	.word	0x20000410

08002cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cc0:	e7fe      	b.n	8002cc0 <ADC_IRQHandler>
	...

08002cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cc8:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <HAL_Init+0x40>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a0d      	ldr	r2, [pc, #52]	; (8002d04 <HAL_Init+0x40>)
 8002cce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <HAL_Init+0x40>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a0a      	ldr	r2, [pc, #40]	; (8002d04 <HAL_Init+0x40>)
 8002cda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ce0:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <HAL_Init+0x40>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a07      	ldr	r2, [pc, #28]	; (8002d04 <HAL_Init+0x40>)
 8002ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cec:	2003      	movs	r0, #3
 8002cee:	f000 fd0d 	bl	800370c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	f000 f808 	bl	8002d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cf8:	f7ff fd7c 	bl	80027f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40023c00 	.word	0x40023c00

08002d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d10:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <HAL_InitTick+0x54>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <HAL_InitTick+0x58>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	4619      	mov	r1, r3
 8002d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 fd25 	bl	8003776 <HAL_SYSTICK_Config>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e00e      	b.n	8002d54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b0f      	cmp	r3, #15
 8002d3a:	d80a      	bhi.n	8002d52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	f04f 30ff 	mov.w	r0, #4294967295
 8002d44:	f000 fced 	bl	8003722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d48:	4a06      	ldr	r2, [pc, #24]	; (8002d64 <HAL_InitTick+0x5c>)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	e000      	b.n	8002d54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	2000000c 	.word	0x2000000c
 8002d60:	20000014 	.word	0x20000014
 8002d64:	20000010 	.word	0x20000010

08002d68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d6c:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <HAL_IncTick+0x20>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	461a      	mov	r2, r3
 8002d72:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <HAL_IncTick+0x24>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4413      	add	r3, r2
 8002d78:	4a04      	ldr	r2, [pc, #16]	; (8002d8c <HAL_IncTick+0x24>)
 8002d7a:	6013      	str	r3, [r2, #0]
}
 8002d7c:	bf00      	nop
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	20000014 	.word	0x20000014
 8002d8c:	200003fc 	.word	0x200003fc

08002d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  return uwTick;
 8002d94:	4b03      	ldr	r3, [pc, #12]	; (8002da4 <HAL_GetTick+0x14>)
 8002d96:	681b      	ldr	r3, [r3, #0]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	200003fc 	.word	0x200003fc

08002da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002db0:	f7ff ffee 	bl	8002d90 <HAL_GetTick>
 8002db4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc0:	d005      	beq.n	8002dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dc2:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <HAL_Delay+0x44>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4413      	add	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dce:	bf00      	nop
 8002dd0:	f7ff ffde 	bl	8002d90 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d8f7      	bhi.n	8002dd0 <HAL_Delay+0x28>
  {
  }
}
 8002de0:	bf00      	nop
 8002de2:	bf00      	nop
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000014 	.word	0x20000014

08002df0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e033      	b.n	8002e6e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d109      	bne.n	8002e22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7fd fc0a 	bl	8000628 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d118      	bne.n	8002e60 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e36:	f023 0302 	bic.w	r3, r3, #2
 8002e3a:	f043 0202 	orr.w	r2, r3, #2
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 fa96 	bl	8003374 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	f023 0303 	bic.w	r3, r3, #3
 8002e56:	f043 0201 	orr.w	r2, r3, #1
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	641a      	str	r2, [r3, #64]	; 0x40
 8002e5e:	e001      	b.n	8002e64 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d101      	bne.n	8002e92 <HAL_ADC_Start+0x1a>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e097      	b.n	8002fc2 <HAL_ADC_Start+0x14a>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d018      	beq.n	8002eda <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689a      	ldr	r2, [r3, #8]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0201 	orr.w	r2, r2, #1
 8002eb6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002eb8:	4b45      	ldr	r3, [pc, #276]	; (8002fd0 <HAL_ADC_Start+0x158>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a45      	ldr	r2, [pc, #276]	; (8002fd4 <HAL_ADC_Start+0x15c>)
 8002ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec2:	0c9a      	lsrs	r2, r3, #18
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	4413      	add	r3, r2
 8002eca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002ecc:	e002      	b.n	8002ed4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f9      	bne.n	8002ece <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d15f      	bne.n	8002fa8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ef0:	f023 0301 	bic.w	r3, r3, #1
 8002ef4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d007      	beq.n	8002f1a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f12:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f26:	d106      	bne.n	8002f36 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2c:	f023 0206 	bic.w	r2, r3, #6
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	645a      	str	r2, [r3, #68]	; 0x44
 8002f34:	e002      	b.n	8002f3c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f44:	4b24      	ldr	r3, [pc, #144]	; (8002fd8 <HAL_ADC_Start+0x160>)
 8002f46:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002f50:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f003 031f 	and.w	r3, r3, #31
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10f      	bne.n	8002f7e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d129      	bne.n	8002fc0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f7a:	609a      	str	r2, [r3, #8]
 8002f7c:	e020      	b.n	8002fc0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a16      	ldr	r2, [pc, #88]	; (8002fdc <HAL_ADC_Start+0x164>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d11b      	bne.n	8002fc0 <HAL_ADC_Start+0x148>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d114      	bne.n	8002fc0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fa4:	609a      	str	r2, [r3, #8]
 8002fa6:	e00b      	b.n	8002fc0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	f043 0210 	orr.w	r2, r3, #16
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb8:	f043 0201 	orr.w	r2, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	2000000c 	.word	0x2000000c
 8002fd4:	431bde83 	.word	0x431bde83
 8002fd8:	40012300 	.word	0x40012300
 8002fdc:	40012000 	.word	0x40012000

08002fe0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ffc:	d113      	bne.n	8003026 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800300c:	d10b      	bne.n	8003026 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	f043 0220 	orr.w	r2, r3, #32
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e063      	b.n	80030ee <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003026:	f7ff feb3 	bl	8002d90 <HAL_GetTick>
 800302a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800302c:	e021      	b.n	8003072 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003034:	d01d      	beq.n	8003072 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d007      	beq.n	800304c <HAL_ADC_PollForConversion+0x6c>
 800303c:	f7ff fea8 	bl	8002d90 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d212      	bcs.n	8003072 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b02      	cmp	r3, #2
 8003058:	d00b      	beq.n	8003072 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f043 0204 	orr.w	r2, r3, #4
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e03d      	b.n	80030ee <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b02      	cmp	r3, #2
 800307e:	d1d6      	bne.n	800302e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0212 	mvn.w	r2, #18
 8003088:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d123      	bne.n	80030ec <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d11f      	bne.n	80030ec <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d006      	beq.n	80030c8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d111      	bne.n	80030ec <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d105      	bne.n	80030ec <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	f043 0201 	orr.w	r2, r3, #1
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003104:	4618      	mov	r0, r3
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800311a:	2300      	movs	r3, #0
 800311c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003124:	2b01      	cmp	r3, #1
 8003126:	d101      	bne.n	800312c <HAL_ADC_ConfigChannel+0x1c>
 8003128:	2302      	movs	r3, #2
 800312a:	e113      	b.n	8003354 <HAL_ADC_ConfigChannel+0x244>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b09      	cmp	r3, #9
 800313a:	d925      	bls.n	8003188 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68d9      	ldr	r1, [r3, #12]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	b29b      	uxth	r3, r3
 8003148:	461a      	mov	r2, r3
 800314a:	4613      	mov	r3, r2
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	4413      	add	r3, r2
 8003150:	3b1e      	subs	r3, #30
 8003152:	2207      	movs	r2, #7
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	43da      	mvns	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	400a      	ands	r2, r1
 8003160:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68d9      	ldr	r1, [r3, #12]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	b29b      	uxth	r3, r3
 8003172:	4618      	mov	r0, r3
 8003174:	4603      	mov	r3, r0
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	4403      	add	r3, r0
 800317a:	3b1e      	subs	r3, #30
 800317c:	409a      	lsls	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	60da      	str	r2, [r3, #12]
 8003186:	e022      	b.n	80031ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6919      	ldr	r1, [r3, #16]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	b29b      	uxth	r3, r3
 8003194:	461a      	mov	r2, r3
 8003196:	4613      	mov	r3, r2
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	4413      	add	r3, r2
 800319c:	2207      	movs	r2, #7
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43da      	mvns	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	400a      	ands	r2, r1
 80031aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6919      	ldr	r1, [r3, #16]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	4618      	mov	r0, r3
 80031be:	4603      	mov	r3, r0
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	4403      	add	r3, r0
 80031c4:	409a      	lsls	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b06      	cmp	r3, #6
 80031d4:	d824      	bhi.n	8003220 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	3b05      	subs	r3, #5
 80031e8:	221f      	movs	r2, #31
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43da      	mvns	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	400a      	ands	r2, r1
 80031f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	b29b      	uxth	r3, r3
 8003204:	4618      	mov	r0, r3
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	4613      	mov	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4413      	add	r3, r2
 8003210:	3b05      	subs	r3, #5
 8003212:	fa00 f203 	lsl.w	r2, r0, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	635a      	str	r2, [r3, #52]	; 0x34
 800321e:	e04c      	b.n	80032ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b0c      	cmp	r3, #12
 8003226:	d824      	bhi.n	8003272 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	3b23      	subs	r3, #35	; 0x23
 800323a:	221f      	movs	r2, #31
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43da      	mvns	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	400a      	ands	r2, r1
 8003248:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	b29b      	uxth	r3, r3
 8003256:	4618      	mov	r0, r3
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	3b23      	subs	r3, #35	; 0x23
 8003264:	fa00 f203 	lsl.w	r2, r0, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	631a      	str	r2, [r3, #48]	; 0x30
 8003270:	e023      	b.n	80032ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	3b41      	subs	r3, #65	; 0x41
 8003284:	221f      	movs	r2, #31
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	43da      	mvns	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	400a      	ands	r2, r1
 8003292:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	4618      	mov	r0, r3
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	3b41      	subs	r3, #65	; 0x41
 80032ae:	fa00 f203 	lsl.w	r2, r0, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032ba:	4b29      	ldr	r3, [pc, #164]	; (8003360 <HAL_ADC_ConfigChannel+0x250>)
 80032bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a28      	ldr	r2, [pc, #160]	; (8003364 <HAL_ADC_ConfigChannel+0x254>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d10f      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x1d8>
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b12      	cmp	r3, #18
 80032ce:	d10b      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a1d      	ldr	r2, [pc, #116]	; (8003364 <HAL_ADC_ConfigChannel+0x254>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d12b      	bne.n	800334a <HAL_ADC_ConfigChannel+0x23a>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a1c      	ldr	r2, [pc, #112]	; (8003368 <HAL_ADC_ConfigChannel+0x258>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d003      	beq.n	8003304 <HAL_ADC_ConfigChannel+0x1f4>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b11      	cmp	r3, #17
 8003302:	d122      	bne.n	800334a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a11      	ldr	r2, [pc, #68]	; (8003368 <HAL_ADC_ConfigChannel+0x258>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d111      	bne.n	800334a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003326:	4b11      	ldr	r3, [pc, #68]	; (800336c <HAL_ADC_ConfigChannel+0x25c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a11      	ldr	r2, [pc, #68]	; (8003370 <HAL_ADC_ConfigChannel+0x260>)
 800332c:	fba2 2303 	umull	r2, r3, r2, r3
 8003330:	0c9a      	lsrs	r2, r3, #18
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800333c:	e002      	b.n	8003344 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	3b01      	subs	r3, #1
 8003342:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f9      	bne.n	800333e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	40012300 	.word	0x40012300
 8003364:	40012000 	.word	0x40012000
 8003368:	10000012 	.word	0x10000012
 800336c:	2000000c 	.word	0x2000000c
 8003370:	431bde83 	.word	0x431bde83

08003374 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800337c:	4b79      	ldr	r3, [pc, #484]	; (8003564 <ADC_Init+0x1f0>)
 800337e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	431a      	orrs	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6859      	ldr	r1, [r3, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	021a      	lsls	r2, r3, #8
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80033cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6859      	ldr	r1, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6899      	ldr	r1, [r3, #8]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003406:	4a58      	ldr	r2, [pc, #352]	; (8003568 <ADC_Init+0x1f4>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d022      	beq.n	8003452 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800341a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6899      	ldr	r1, [r3, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	430a      	orrs	r2, r1
 800342c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800343c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6899      	ldr	r1, [r3, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	609a      	str	r2, [r3, #8]
 8003450:	e00f      	b.n	8003472 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003460:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003470:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0202 	bic.w	r2, r2, #2
 8003480:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6899      	ldr	r1, [r3, #8]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	7e1b      	ldrb	r3, [r3, #24]
 800348c:	005a      	lsls	r2, r3, #1
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3020 	ldrb.w	r3, [r3, #32]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d01b      	beq.n	80034d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80034be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6859      	ldr	r1, [r3, #4]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	3b01      	subs	r3, #1
 80034cc:	035a      	lsls	r2, r3, #13
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	605a      	str	r2, [r3, #4]
 80034d6:	e007      	b.n	80034e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80034f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	3b01      	subs	r3, #1
 8003504:	051a      	lsls	r2, r3, #20
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800351c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6899      	ldr	r1, [r3, #8]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800352a:	025a      	lsls	r2, r3, #9
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003542:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6899      	ldr	r1, [r3, #8]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	029a      	lsls	r2, r3, #10
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	609a      	str	r2, [r3, #8]
}
 8003558:	bf00      	nop
 800355a:	3714      	adds	r7, #20
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	40012300 	.word	0x40012300
 8003568:	0f000001 	.word	0x0f000001

0800356c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800357c:	4b0c      	ldr	r3, [pc, #48]	; (80035b0 <__NVIC_SetPriorityGrouping+0x44>)
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003588:	4013      	ands	r3, r2
 800358a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003594:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800359c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800359e:	4a04      	ldr	r2, [pc, #16]	; (80035b0 <__NVIC_SetPriorityGrouping+0x44>)
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	60d3      	str	r3, [r2, #12]
}
 80035a4:	bf00      	nop
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	e000ed00 	.word	0xe000ed00

080035b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035b8:	4b04      	ldr	r3, [pc, #16]	; (80035cc <__NVIC_GetPriorityGrouping+0x18>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	0a1b      	lsrs	r3, r3, #8
 80035be:	f003 0307 	and.w	r3, r3, #7
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr
 80035cc:	e000ed00 	.word	0xe000ed00

080035d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	4603      	mov	r3, r0
 80035d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	db0b      	blt.n	80035fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035e2:	79fb      	ldrb	r3, [r7, #7]
 80035e4:	f003 021f 	and.w	r2, r3, #31
 80035e8:	4907      	ldr	r1, [pc, #28]	; (8003608 <__NVIC_EnableIRQ+0x38>)
 80035ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ee:	095b      	lsrs	r3, r3, #5
 80035f0:	2001      	movs	r0, #1
 80035f2:	fa00 f202 	lsl.w	r2, r0, r2
 80035f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	e000e100 	.word	0xe000e100

0800360c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	4603      	mov	r3, r0
 8003614:	6039      	str	r1, [r7, #0]
 8003616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361c:	2b00      	cmp	r3, #0
 800361e:	db0a      	blt.n	8003636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	b2da      	uxtb	r2, r3
 8003624:	490c      	ldr	r1, [pc, #48]	; (8003658 <__NVIC_SetPriority+0x4c>)
 8003626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362a:	0112      	lsls	r2, r2, #4
 800362c:	b2d2      	uxtb	r2, r2
 800362e:	440b      	add	r3, r1
 8003630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003634:	e00a      	b.n	800364c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	b2da      	uxtb	r2, r3
 800363a:	4908      	ldr	r1, [pc, #32]	; (800365c <__NVIC_SetPriority+0x50>)
 800363c:	79fb      	ldrb	r3, [r7, #7]
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	3b04      	subs	r3, #4
 8003644:	0112      	lsls	r2, r2, #4
 8003646:	b2d2      	uxtb	r2, r2
 8003648:	440b      	add	r3, r1
 800364a:	761a      	strb	r2, [r3, #24]
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	e000e100 	.word	0xe000e100
 800365c:	e000ed00 	.word	0xe000ed00

08003660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003660:	b480      	push	{r7}
 8003662:	b089      	sub	sp, #36	; 0x24
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	f1c3 0307 	rsb	r3, r3, #7
 800367a:	2b04      	cmp	r3, #4
 800367c:	bf28      	it	cs
 800367e:	2304      	movcs	r3, #4
 8003680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	3304      	adds	r3, #4
 8003686:	2b06      	cmp	r3, #6
 8003688:	d902      	bls.n	8003690 <NVIC_EncodePriority+0x30>
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	3b03      	subs	r3, #3
 800368e:	e000      	b.n	8003692 <NVIC_EncodePriority+0x32>
 8003690:	2300      	movs	r3, #0
 8003692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003694:	f04f 32ff 	mov.w	r2, #4294967295
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	43da      	mvns	r2, r3
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	401a      	ands	r2, r3
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036a8:	f04f 31ff 	mov.w	r1, #4294967295
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	fa01 f303 	lsl.w	r3, r1, r3
 80036b2:	43d9      	mvns	r1, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036b8:	4313      	orrs	r3, r2
         );
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3724      	adds	r7, #36	; 0x24
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
	...

080036c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3b01      	subs	r3, #1
 80036d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036d8:	d301      	bcc.n	80036de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036da:	2301      	movs	r3, #1
 80036dc:	e00f      	b.n	80036fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036de:	4a0a      	ldr	r2, [pc, #40]	; (8003708 <SysTick_Config+0x40>)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036e6:	210f      	movs	r1, #15
 80036e8:	f04f 30ff 	mov.w	r0, #4294967295
 80036ec:	f7ff ff8e 	bl	800360c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036f0:	4b05      	ldr	r3, [pc, #20]	; (8003708 <SysTick_Config+0x40>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036f6:	4b04      	ldr	r3, [pc, #16]	; (8003708 <SysTick_Config+0x40>)
 80036f8:	2207      	movs	r2, #7
 80036fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	e000e010 	.word	0xe000e010

0800370c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f7ff ff29 	bl	800356c <__NVIC_SetPriorityGrouping>
}
 800371a:	bf00      	nop
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003722:	b580      	push	{r7, lr}
 8003724:	b086      	sub	sp, #24
 8003726:	af00      	add	r7, sp, #0
 8003728:	4603      	mov	r3, r0
 800372a:	60b9      	str	r1, [r7, #8]
 800372c:	607a      	str	r2, [r7, #4]
 800372e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003730:	2300      	movs	r3, #0
 8003732:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003734:	f7ff ff3e 	bl	80035b4 <__NVIC_GetPriorityGrouping>
 8003738:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	68b9      	ldr	r1, [r7, #8]
 800373e:	6978      	ldr	r0, [r7, #20]
 8003740:	f7ff ff8e 	bl	8003660 <NVIC_EncodePriority>
 8003744:	4602      	mov	r2, r0
 8003746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800374a:	4611      	mov	r1, r2
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff ff5d 	bl	800360c <__NVIC_SetPriority>
}
 8003752:	bf00      	nop
 8003754:	3718      	adds	r7, #24
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b082      	sub	sp, #8
 800375e:	af00      	add	r7, sp, #0
 8003760:	4603      	mov	r3, r0
 8003762:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff ff31 	bl	80035d0 <__NVIC_EnableIRQ>
}
 800376e:	bf00      	nop
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b082      	sub	sp, #8
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7ff ffa2 	bl	80036c8 <SysTick_Config>
 8003784:	4603      	mov	r3, r0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003790:	b480      	push	{r7}
 8003792:	b089      	sub	sp, #36	; 0x24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800379a:	2300      	movs	r3, #0
 800379c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800379e:	2300      	movs	r3, #0
 80037a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037a6:	2300      	movs	r3, #0
 80037a8:	61fb      	str	r3, [r7, #28]
 80037aa:	e159      	b.n	8003a60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037ac:	2201      	movs	r2, #1
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	4013      	ands	r3, r2
 80037be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	f040 8148 	bne.w	8003a5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d005      	beq.n	80037e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d130      	bne.n	8003844 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	2203      	movs	r2, #3
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	43db      	mvns	r3, r3
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	4013      	ands	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4313      	orrs	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003818:	2201      	movs	r2, #1
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	43db      	mvns	r3, r3
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	4013      	ands	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	091b      	lsrs	r3, r3, #4
 800382e:	f003 0201 	and.w	r2, r3, #1
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	4313      	orrs	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f003 0303 	and.w	r3, r3, #3
 800384c:	2b03      	cmp	r3, #3
 800384e:	d017      	beq.n	8003880 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	2203      	movs	r2, #3
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	43db      	mvns	r3, r3
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4013      	ands	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4313      	orrs	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f003 0303 	and.w	r3, r3, #3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d123      	bne.n	80038d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	08da      	lsrs	r2, r3, #3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3208      	adds	r2, #8
 8003894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003898:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	220f      	movs	r2, #15
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	43db      	mvns	r3, r3
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	4013      	ands	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	691a      	ldr	r2, [r3, #16]
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f003 0307 	and.w	r3, r3, #7
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	08da      	lsrs	r2, r3, #3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3208      	adds	r2, #8
 80038ce:	69b9      	ldr	r1, [r7, #24]
 80038d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	2203      	movs	r2, #3
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	43db      	mvns	r3, r3
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	4013      	ands	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f003 0203 	and.w	r2, r3, #3
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	4313      	orrs	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 80a2 	beq.w	8003a5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003916:	2300      	movs	r3, #0
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	4b57      	ldr	r3, [pc, #348]	; (8003a78 <HAL_GPIO_Init+0x2e8>)
 800391c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391e:	4a56      	ldr	r2, [pc, #344]	; (8003a78 <HAL_GPIO_Init+0x2e8>)
 8003920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003924:	6453      	str	r3, [r2, #68]	; 0x44
 8003926:	4b54      	ldr	r3, [pc, #336]	; (8003a78 <HAL_GPIO_Init+0x2e8>)
 8003928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003932:	4a52      	ldr	r2, [pc, #328]	; (8003a7c <HAL_GPIO_Init+0x2ec>)
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	089b      	lsrs	r3, r3, #2
 8003938:	3302      	adds	r3, #2
 800393a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800393e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	220f      	movs	r2, #15
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	43db      	mvns	r3, r3
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	4013      	ands	r3, r2
 8003954:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a49      	ldr	r2, [pc, #292]	; (8003a80 <HAL_GPIO_Init+0x2f0>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d019      	beq.n	8003992 <HAL_GPIO_Init+0x202>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a48      	ldr	r2, [pc, #288]	; (8003a84 <HAL_GPIO_Init+0x2f4>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d013      	beq.n	800398e <HAL_GPIO_Init+0x1fe>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a47      	ldr	r2, [pc, #284]	; (8003a88 <HAL_GPIO_Init+0x2f8>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00d      	beq.n	800398a <HAL_GPIO_Init+0x1fa>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a46      	ldr	r2, [pc, #280]	; (8003a8c <HAL_GPIO_Init+0x2fc>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d007      	beq.n	8003986 <HAL_GPIO_Init+0x1f6>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a45      	ldr	r2, [pc, #276]	; (8003a90 <HAL_GPIO_Init+0x300>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d101      	bne.n	8003982 <HAL_GPIO_Init+0x1f2>
 800397e:	2304      	movs	r3, #4
 8003980:	e008      	b.n	8003994 <HAL_GPIO_Init+0x204>
 8003982:	2307      	movs	r3, #7
 8003984:	e006      	b.n	8003994 <HAL_GPIO_Init+0x204>
 8003986:	2303      	movs	r3, #3
 8003988:	e004      	b.n	8003994 <HAL_GPIO_Init+0x204>
 800398a:	2302      	movs	r3, #2
 800398c:	e002      	b.n	8003994 <HAL_GPIO_Init+0x204>
 800398e:	2301      	movs	r3, #1
 8003990:	e000      	b.n	8003994 <HAL_GPIO_Init+0x204>
 8003992:	2300      	movs	r3, #0
 8003994:	69fa      	ldr	r2, [r7, #28]
 8003996:	f002 0203 	and.w	r2, r2, #3
 800399a:	0092      	lsls	r2, r2, #2
 800399c:	4093      	lsls	r3, r2
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039a4:	4935      	ldr	r1, [pc, #212]	; (8003a7c <HAL_GPIO_Init+0x2ec>)
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	089b      	lsrs	r3, r3, #2
 80039aa:	3302      	adds	r3, #2
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039b2:	4b38      	ldr	r3, [pc, #224]	; (8003a94 <HAL_GPIO_Init+0x304>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	43db      	mvns	r3, r3
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	4013      	ands	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039d6:	4a2f      	ldr	r2, [pc, #188]	; (8003a94 <HAL_GPIO_Init+0x304>)
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039dc:	4b2d      	ldr	r3, [pc, #180]	; (8003a94 <HAL_GPIO_Init+0x304>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	43db      	mvns	r3, r3
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	4013      	ands	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d003      	beq.n	8003a00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a00:	4a24      	ldr	r2, [pc, #144]	; (8003a94 <HAL_GPIO_Init+0x304>)
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a06:	4b23      	ldr	r3, [pc, #140]	; (8003a94 <HAL_GPIO_Init+0x304>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	4013      	ands	r3, r2
 8003a14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a2a:	4a1a      	ldr	r2, [pc, #104]	; (8003a94 <HAL_GPIO_Init+0x304>)
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a30:	4b18      	ldr	r3, [pc, #96]	; (8003a94 <HAL_GPIO_Init+0x304>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	43db      	mvns	r3, r3
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d003      	beq.n	8003a54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a54:	4a0f      	ldr	r2, [pc, #60]	; (8003a94 <HAL_GPIO_Init+0x304>)
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	61fb      	str	r3, [r7, #28]
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	2b0f      	cmp	r3, #15
 8003a64:	f67f aea2 	bls.w	80037ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a68:	bf00      	nop
 8003a6a:	bf00      	nop
 8003a6c:	3724      	adds	r7, #36	; 0x24
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	40013800 	.word	0x40013800
 8003a80:	40020000 	.word	0x40020000
 8003a84:	40020400 	.word	0x40020400
 8003a88:	40020800 	.word	0x40020800
 8003a8c:	40020c00 	.word	0x40020c00
 8003a90:	40021000 	.word	0x40021000
 8003a94:	40013c00 	.word	0x40013c00

08003a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	807b      	strh	r3, [r7, #2]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003aa8:	787b      	ldrb	r3, [r7, #1]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aae:	887a      	ldrh	r2, [r7, #2]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ab4:	e003      	b.n	8003abe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ab6:	887b      	ldrh	r3, [r7, #2]
 8003ab8:	041a      	lsls	r2, r3, #16
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	619a      	str	r2, [r3, #24]
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
	...

08003acc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003ad6:	4b08      	ldr	r3, [pc, #32]	; (8003af8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ad8:	695a      	ldr	r2, [r3, #20]
 8003ada:	88fb      	ldrh	r3, [r7, #6]
 8003adc:	4013      	ands	r3, r2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d006      	beq.n	8003af0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ae2:	4a05      	ldr	r2, [pc, #20]	; (8003af8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ae4:	88fb      	ldrh	r3, [r7, #6]
 8003ae6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ae8:	88fb      	ldrh	r3, [r7, #6]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 f806 	bl	8003afc <HAL_GPIO_EXTI_Callback>
  }
}
 8003af0:	bf00      	nop
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40013c00 	.word	0x40013c00

08003afc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	4603      	mov	r3, r0
 8003b04:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
	...

08003b14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e12b      	b.n	8003d7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d106      	bne.n	8003b40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7fd f928 	bl	8000d90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2224      	movs	r2, #36	; 0x24
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0201 	bic.w	r2, r2, #1
 8003b56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b78:	f000 fd40 	bl	80045fc <HAL_RCC_GetPCLK1Freq>
 8003b7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	4a81      	ldr	r2, [pc, #516]	; (8003d88 <HAL_I2C_Init+0x274>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d807      	bhi.n	8003b98 <HAL_I2C_Init+0x84>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4a80      	ldr	r2, [pc, #512]	; (8003d8c <HAL_I2C_Init+0x278>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	bf94      	ite	ls
 8003b90:	2301      	movls	r3, #1
 8003b92:	2300      	movhi	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	e006      	b.n	8003ba6 <HAL_I2C_Init+0x92>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	4a7d      	ldr	r2, [pc, #500]	; (8003d90 <HAL_I2C_Init+0x27c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	bf94      	ite	ls
 8003ba0:	2301      	movls	r3, #1
 8003ba2:	2300      	movhi	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e0e7      	b.n	8003d7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	4a78      	ldr	r2, [pc, #480]	; (8003d94 <HAL_I2C_Init+0x280>)
 8003bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb6:	0c9b      	lsrs	r3, r3, #18
 8003bb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	4a6a      	ldr	r2, [pc, #424]	; (8003d88 <HAL_I2C_Init+0x274>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d802      	bhi.n	8003be8 <HAL_I2C_Init+0xd4>
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	3301      	adds	r3, #1
 8003be6:	e009      	b.n	8003bfc <HAL_I2C_Init+0xe8>
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003bee:	fb02 f303 	mul.w	r3, r2, r3
 8003bf2:	4a69      	ldr	r2, [pc, #420]	; (8003d98 <HAL_I2C_Init+0x284>)
 8003bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf8:	099b      	lsrs	r3, r3, #6
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6812      	ldr	r2, [r2, #0]
 8003c00:	430b      	orrs	r3, r1
 8003c02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	495c      	ldr	r1, [pc, #368]	; (8003d88 <HAL_I2C_Init+0x274>)
 8003c18:	428b      	cmp	r3, r1
 8003c1a:	d819      	bhi.n	8003c50 <HAL_I2C_Init+0x13c>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	1e59      	subs	r1, r3, #1
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c2a:	1c59      	adds	r1, r3, #1
 8003c2c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c30:	400b      	ands	r3, r1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00a      	beq.n	8003c4c <HAL_I2C_Init+0x138>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	1e59      	subs	r1, r3, #1
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c44:	3301      	adds	r3, #1
 8003c46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c4a:	e051      	b.n	8003cf0 <HAL_I2C_Init+0x1dc>
 8003c4c:	2304      	movs	r3, #4
 8003c4e:	e04f      	b.n	8003cf0 <HAL_I2C_Init+0x1dc>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d111      	bne.n	8003c7c <HAL_I2C_Init+0x168>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	1e58      	subs	r0, r3, #1
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6859      	ldr	r1, [r3, #4]
 8003c60:	460b      	mov	r3, r1
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	440b      	add	r3, r1
 8003c66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	bf0c      	ite	eq
 8003c74:	2301      	moveq	r3, #1
 8003c76:	2300      	movne	r3, #0
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	e012      	b.n	8003ca2 <HAL_I2C_Init+0x18e>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	1e58      	subs	r0, r3, #1
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6859      	ldr	r1, [r3, #4]
 8003c84:	460b      	mov	r3, r1
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	0099      	lsls	r1, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c92:	3301      	adds	r3, #1
 8003c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	bf0c      	ite	eq
 8003c9c:	2301      	moveq	r3, #1
 8003c9e:	2300      	movne	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <HAL_I2C_Init+0x196>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e022      	b.n	8003cf0 <HAL_I2C_Init+0x1dc>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10e      	bne.n	8003cd0 <HAL_I2C_Init+0x1bc>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	1e58      	subs	r0, r3, #1
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6859      	ldr	r1, [r3, #4]
 8003cba:	460b      	mov	r3, r1
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	440b      	add	r3, r1
 8003cc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cce:	e00f      	b.n	8003cf0 <HAL_I2C_Init+0x1dc>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	1e58      	subs	r0, r3, #1
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6859      	ldr	r1, [r3, #4]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	440b      	add	r3, r1
 8003cde:	0099      	lsls	r1, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cf0:	6879      	ldr	r1, [r7, #4]
 8003cf2:	6809      	ldr	r1, [r1, #0]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69da      	ldr	r2, [r3, #28]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6911      	ldr	r1, [r2, #16]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	68d2      	ldr	r2, [r2, #12]
 8003d2a:	4311      	orrs	r1, r2
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6812      	ldr	r2, [r2, #0]
 8003d30:	430b      	orrs	r3, r1
 8003d32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	695a      	ldr	r2, [r3, #20]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0201 	orr.w	r2, r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	000186a0 	.word	0x000186a0
 8003d8c:	001e847f 	.word	0x001e847f
 8003d90:	003d08ff 	.word	0x003d08ff
 8003d94:	431bde83 	.word	0x431bde83
 8003d98:	10624dd3 	.word	0x10624dd3

08003d9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e267      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d075      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dba:	4b88      	ldr	r3, [pc, #544]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 030c 	and.w	r3, r3, #12
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	d00c      	beq.n	8003de0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dc6:	4b85      	ldr	r3, [pc, #532]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d112      	bne.n	8003df8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dd2:	4b82      	ldr	r3, [pc, #520]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dde:	d10b      	bne.n	8003df8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de0:	4b7e      	ldr	r3, [pc, #504]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d05b      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x108>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d157      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e242      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e00:	d106      	bne.n	8003e10 <HAL_RCC_OscConfig+0x74>
 8003e02:	4b76      	ldr	r3, [pc, #472]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a75      	ldr	r2, [pc, #468]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	e01d      	b.n	8003e4c <HAL_RCC_OscConfig+0xb0>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e18:	d10c      	bne.n	8003e34 <HAL_RCC_OscConfig+0x98>
 8003e1a:	4b70      	ldr	r3, [pc, #448]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a6f      	ldr	r2, [pc, #444]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	4b6d      	ldr	r3, [pc, #436]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a6c      	ldr	r2, [pc, #432]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	e00b      	b.n	8003e4c <HAL_RCC_OscConfig+0xb0>
 8003e34:	4b69      	ldr	r3, [pc, #420]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a68      	ldr	r2, [pc, #416]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	4b66      	ldr	r3, [pc, #408]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a65      	ldr	r2, [pc, #404]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d013      	beq.n	8003e7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e54:	f7fe ff9c 	bl	8002d90 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e5c:	f7fe ff98 	bl	8002d90 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b64      	cmp	r3, #100	; 0x64
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e207      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6e:	4b5b      	ldr	r3, [pc, #364]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0f0      	beq.n	8003e5c <HAL_RCC_OscConfig+0xc0>
 8003e7a:	e014      	b.n	8003ea6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7c:	f7fe ff88 	bl	8002d90 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e84:	f7fe ff84 	bl	8002d90 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b64      	cmp	r3, #100	; 0x64
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e1f3      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e96:	4b51      	ldr	r3, [pc, #324]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f0      	bne.n	8003e84 <HAL_RCC_OscConfig+0xe8>
 8003ea2:	e000      	b.n	8003ea6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d063      	beq.n	8003f7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eb2:	4b4a      	ldr	r3, [pc, #296]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 030c 	and.w	r3, r3, #12
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00b      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ebe:	4b47      	ldr	r3, [pc, #284]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	d11c      	bne.n	8003f04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eca:	4b44      	ldr	r3, [pc, #272]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d116      	bne.n	8003f04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ed6:	4b41      	ldr	r3, [pc, #260]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d005      	beq.n	8003eee <HAL_RCC_OscConfig+0x152>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d001      	beq.n	8003eee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e1c7      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eee:	4b3b      	ldr	r3, [pc, #236]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	4937      	ldr	r1, [pc, #220]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f02:	e03a      	b.n	8003f7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d020      	beq.n	8003f4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f0c:	4b34      	ldr	r3, [pc, #208]	; (8003fe0 <HAL_RCC_OscConfig+0x244>)
 8003f0e:	2201      	movs	r2, #1
 8003f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f12:	f7fe ff3d 	bl	8002d90 <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f1a:	f7fe ff39 	bl	8002d90 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e1a8      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2c:	4b2b      	ldr	r3, [pc, #172]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0f0      	beq.n	8003f1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f38:	4b28      	ldr	r3, [pc, #160]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	4925      	ldr	r1, [pc, #148]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	600b      	str	r3, [r1, #0]
 8003f4c:	e015      	b.n	8003f7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f4e:	4b24      	ldr	r3, [pc, #144]	; (8003fe0 <HAL_RCC_OscConfig+0x244>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f54:	f7fe ff1c 	bl	8002d90 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f5c:	f7fe ff18 	bl	8002d90 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e187      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f6e:	4b1b      	ldr	r3, [pc, #108]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1f0      	bne.n	8003f5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d036      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d016      	beq.n	8003fbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f8e:	4b15      	ldr	r3, [pc, #84]	; (8003fe4 <HAL_RCC_OscConfig+0x248>)
 8003f90:	2201      	movs	r2, #1
 8003f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f94:	f7fe fefc 	bl	8002d90 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f9c:	f7fe fef8 	bl	8002d90 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e167      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fae:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0f0      	beq.n	8003f9c <HAL_RCC_OscConfig+0x200>
 8003fba:	e01b      	b.n	8003ff4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fbc:	4b09      	ldr	r3, [pc, #36]	; (8003fe4 <HAL_RCC_OscConfig+0x248>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fc2:	f7fe fee5 	bl	8002d90 <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fc8:	e00e      	b.n	8003fe8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fca:	f7fe fee1 	bl	8002d90 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d907      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e150      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	42470000 	.word	0x42470000
 8003fe4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fe8:	4b88      	ldr	r3, [pc, #544]	; (800420c <HAL_RCC_OscConfig+0x470>)
 8003fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1ea      	bne.n	8003fca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 8097 	beq.w	8004130 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004002:	2300      	movs	r3, #0
 8004004:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004006:	4b81      	ldr	r3, [pc, #516]	; (800420c <HAL_RCC_OscConfig+0x470>)
 8004008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10f      	bne.n	8004032 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004012:	2300      	movs	r3, #0
 8004014:	60bb      	str	r3, [r7, #8]
 8004016:	4b7d      	ldr	r3, [pc, #500]	; (800420c <HAL_RCC_OscConfig+0x470>)
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	4a7c      	ldr	r2, [pc, #496]	; (800420c <HAL_RCC_OscConfig+0x470>)
 800401c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004020:	6413      	str	r3, [r2, #64]	; 0x40
 8004022:	4b7a      	ldr	r3, [pc, #488]	; (800420c <HAL_RCC_OscConfig+0x470>)
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402a:	60bb      	str	r3, [r7, #8]
 800402c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800402e:	2301      	movs	r3, #1
 8004030:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004032:	4b77      	ldr	r3, [pc, #476]	; (8004210 <HAL_RCC_OscConfig+0x474>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403a:	2b00      	cmp	r3, #0
 800403c:	d118      	bne.n	8004070 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800403e:	4b74      	ldr	r3, [pc, #464]	; (8004210 <HAL_RCC_OscConfig+0x474>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a73      	ldr	r2, [pc, #460]	; (8004210 <HAL_RCC_OscConfig+0x474>)
 8004044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004048:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800404a:	f7fe fea1 	bl	8002d90 <HAL_GetTick>
 800404e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004050:	e008      	b.n	8004064 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004052:	f7fe fe9d 	bl	8002d90 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d901      	bls.n	8004064 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e10c      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004064:	4b6a      	ldr	r3, [pc, #424]	; (8004210 <HAL_RCC_OscConfig+0x474>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0f0      	beq.n	8004052 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d106      	bne.n	8004086 <HAL_RCC_OscConfig+0x2ea>
 8004078:	4b64      	ldr	r3, [pc, #400]	; (800420c <HAL_RCC_OscConfig+0x470>)
 800407a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407c:	4a63      	ldr	r2, [pc, #396]	; (800420c <HAL_RCC_OscConfig+0x470>)
 800407e:	f043 0301 	orr.w	r3, r3, #1
 8004082:	6713      	str	r3, [r2, #112]	; 0x70
 8004084:	e01c      	b.n	80040c0 <HAL_RCC_OscConfig+0x324>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	2b05      	cmp	r3, #5
 800408c:	d10c      	bne.n	80040a8 <HAL_RCC_OscConfig+0x30c>
 800408e:	4b5f      	ldr	r3, [pc, #380]	; (800420c <HAL_RCC_OscConfig+0x470>)
 8004090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004092:	4a5e      	ldr	r2, [pc, #376]	; (800420c <HAL_RCC_OscConfig+0x470>)
 8004094:	f043 0304 	orr.w	r3, r3, #4
 8004098:	6713      	str	r3, [r2, #112]	; 0x70
 800409a:	4b5c      	ldr	r3, [pc, #368]	; (800420c <HAL_RCC_OscConfig+0x470>)
 800409c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409e:	4a5b      	ldr	r2, [pc, #364]	; (800420c <HAL_RCC_OscConfig+0x470>)
 80040a0:	f043 0301 	orr.w	r3, r3, #1
 80040a4:	6713      	str	r3, [r2, #112]	; 0x70
 80040a6:	e00b      	b.n	80040c0 <HAL_RCC_OscConfig+0x324>
 80040a8:	4b58      	ldr	r3, [pc, #352]	; (800420c <HAL_RCC_OscConfig+0x470>)
 80040aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ac:	4a57      	ldr	r2, [pc, #348]	; (800420c <HAL_RCC_OscConfig+0x470>)
 80040ae:	f023 0301 	bic.w	r3, r3, #1
 80040b2:	6713      	str	r3, [r2, #112]	; 0x70
 80040b4:	4b55      	ldr	r3, [pc, #340]	; (800420c <HAL_RCC_OscConfig+0x470>)
 80040b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b8:	4a54      	ldr	r2, [pc, #336]	; (800420c <HAL_RCC_OscConfig+0x470>)
 80040ba:	f023 0304 	bic.w	r3, r3, #4
 80040be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d015      	beq.n	80040f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c8:	f7fe fe62 	bl	8002d90 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ce:	e00a      	b.n	80040e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040d0:	f7fe fe5e 	bl	8002d90 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	f241 3288 	movw	r2, #5000	; 0x1388
 80040de:	4293      	cmp	r3, r2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e0cb      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e6:	4b49      	ldr	r3, [pc, #292]	; (800420c <HAL_RCC_OscConfig+0x470>)
 80040e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0ee      	beq.n	80040d0 <HAL_RCC_OscConfig+0x334>
 80040f2:	e014      	b.n	800411e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040f4:	f7fe fe4c 	bl	8002d90 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040fa:	e00a      	b.n	8004112 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040fc:	f7fe fe48 	bl	8002d90 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	f241 3288 	movw	r2, #5000	; 0x1388
 800410a:	4293      	cmp	r3, r2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e0b5      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004112:	4b3e      	ldr	r3, [pc, #248]	; (800420c <HAL_RCC_OscConfig+0x470>)
 8004114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1ee      	bne.n	80040fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800411e:	7dfb      	ldrb	r3, [r7, #23]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d105      	bne.n	8004130 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004124:	4b39      	ldr	r3, [pc, #228]	; (800420c <HAL_RCC_OscConfig+0x470>)
 8004126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004128:	4a38      	ldr	r2, [pc, #224]	; (800420c <HAL_RCC_OscConfig+0x470>)
 800412a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800412e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 80a1 	beq.w	800427c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800413a:	4b34      	ldr	r3, [pc, #208]	; (800420c <HAL_RCC_OscConfig+0x470>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 030c 	and.w	r3, r3, #12
 8004142:	2b08      	cmp	r3, #8
 8004144:	d05c      	beq.n	8004200 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	2b02      	cmp	r3, #2
 800414c:	d141      	bne.n	80041d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800414e:	4b31      	ldr	r3, [pc, #196]	; (8004214 <HAL_RCC_OscConfig+0x478>)
 8004150:	2200      	movs	r2, #0
 8004152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004154:	f7fe fe1c 	bl	8002d90 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800415c:	f7fe fe18 	bl	8002d90 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e087      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800416e:	4b27      	ldr	r3, [pc, #156]	; (800420c <HAL_RCC_OscConfig+0x470>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1f0      	bne.n	800415c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69da      	ldr	r2, [r3, #28]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	019b      	lsls	r3, r3, #6
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004190:	085b      	lsrs	r3, r3, #1
 8004192:	3b01      	subs	r3, #1
 8004194:	041b      	lsls	r3, r3, #16
 8004196:	431a      	orrs	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419c:	061b      	lsls	r3, r3, #24
 800419e:	491b      	ldr	r1, [pc, #108]	; (800420c <HAL_RCC_OscConfig+0x470>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041a4:	4b1b      	ldr	r3, [pc, #108]	; (8004214 <HAL_RCC_OscConfig+0x478>)
 80041a6:	2201      	movs	r2, #1
 80041a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041aa:	f7fe fdf1 	bl	8002d90 <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b0:	e008      	b.n	80041c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041b2:	f7fe fded 	bl	8002d90 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e05c      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041c4:	4b11      	ldr	r3, [pc, #68]	; (800420c <HAL_RCC_OscConfig+0x470>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0f0      	beq.n	80041b2 <HAL_RCC_OscConfig+0x416>
 80041d0:	e054      	b.n	800427c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041d2:	4b10      	ldr	r3, [pc, #64]	; (8004214 <HAL_RCC_OscConfig+0x478>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d8:	f7fe fdda 	bl	8002d90 <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041e0:	f7fe fdd6 	bl	8002d90 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e045      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041f2:	4b06      	ldr	r3, [pc, #24]	; (800420c <HAL_RCC_OscConfig+0x470>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1f0      	bne.n	80041e0 <HAL_RCC_OscConfig+0x444>
 80041fe:	e03d      	b.n	800427c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d107      	bne.n	8004218 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e038      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
 800420c:	40023800 	.word	0x40023800
 8004210:	40007000 	.word	0x40007000
 8004214:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004218:	4b1b      	ldr	r3, [pc, #108]	; (8004288 <HAL_RCC_OscConfig+0x4ec>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d028      	beq.n	8004278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004230:	429a      	cmp	r2, r3
 8004232:	d121      	bne.n	8004278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800423e:	429a      	cmp	r2, r3
 8004240:	d11a      	bne.n	8004278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004248:	4013      	ands	r3, r2
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800424e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004250:	4293      	cmp	r3, r2
 8004252:	d111      	bne.n	8004278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425e:	085b      	lsrs	r3, r3, #1
 8004260:	3b01      	subs	r3, #1
 8004262:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004264:	429a      	cmp	r2, r3
 8004266:	d107      	bne.n	8004278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004272:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004274:	429a      	cmp	r2, r3
 8004276:	d001      	beq.n	800427c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e000      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3718      	adds	r7, #24
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	40023800 	.word	0x40023800

0800428c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e0cc      	b.n	800443a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042a0:	4b68      	ldr	r3, [pc, #416]	; (8004444 <HAL_RCC_ClockConfig+0x1b8>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d90c      	bls.n	80042c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ae:	4b65      	ldr	r3, [pc, #404]	; (8004444 <HAL_RCC_ClockConfig+0x1b8>)
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	b2d2      	uxtb	r2, r2
 80042b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042b6:	4b63      	ldr	r3, [pc, #396]	; (8004444 <HAL_RCC_ClockConfig+0x1b8>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d001      	beq.n	80042c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e0b8      	b.n	800443a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d020      	beq.n	8004316 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d005      	beq.n	80042ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042e0:	4b59      	ldr	r3, [pc, #356]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	4a58      	ldr	r2, [pc, #352]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 80042e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0308 	and.w	r3, r3, #8
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d005      	beq.n	8004304 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042f8:	4b53      	ldr	r3, [pc, #332]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	4a52      	ldr	r2, [pc, #328]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 80042fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004302:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004304:	4b50      	ldr	r3, [pc, #320]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	494d      	ldr	r1, [pc, #308]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 8004312:	4313      	orrs	r3, r2
 8004314:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d044      	beq.n	80043ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d107      	bne.n	800433a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800432a:	4b47      	ldr	r3, [pc, #284]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d119      	bne.n	800436a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e07f      	b.n	800443a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	2b02      	cmp	r3, #2
 8004340:	d003      	beq.n	800434a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004346:	2b03      	cmp	r3, #3
 8004348:	d107      	bne.n	800435a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800434a:	4b3f      	ldr	r3, [pc, #252]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d109      	bne.n	800436a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e06f      	b.n	800443a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800435a:	4b3b      	ldr	r3, [pc, #236]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e067      	b.n	800443a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800436a:	4b37      	ldr	r3, [pc, #220]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f023 0203 	bic.w	r2, r3, #3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	4934      	ldr	r1, [pc, #208]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 8004378:	4313      	orrs	r3, r2
 800437a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800437c:	f7fe fd08 	bl	8002d90 <HAL_GetTick>
 8004380:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004382:	e00a      	b.n	800439a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004384:	f7fe fd04 	bl	8002d90 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004392:	4293      	cmp	r3, r2
 8004394:	d901      	bls.n	800439a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e04f      	b.n	800443a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800439a:	4b2b      	ldr	r3, [pc, #172]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 020c 	and.w	r2, r3, #12
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d1eb      	bne.n	8004384 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043ac:	4b25      	ldr	r3, [pc, #148]	; (8004444 <HAL_RCC_ClockConfig+0x1b8>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d20c      	bcs.n	80043d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ba:	4b22      	ldr	r3, [pc, #136]	; (8004444 <HAL_RCC_ClockConfig+0x1b8>)
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043c2:	4b20      	ldr	r3, [pc, #128]	; (8004444 <HAL_RCC_ClockConfig+0x1b8>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d001      	beq.n	80043d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e032      	b.n	800443a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d008      	beq.n	80043f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043e0:	4b19      	ldr	r3, [pc, #100]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	4916      	ldr	r1, [pc, #88]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0308 	and.w	r3, r3, #8
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d009      	beq.n	8004412 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043fe:	4b12      	ldr	r3, [pc, #72]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	490e      	ldr	r1, [pc, #56]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 800440e:	4313      	orrs	r3, r2
 8004410:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004412:	f000 f821 	bl	8004458 <HAL_RCC_GetSysClockFreq>
 8004416:	4602      	mov	r2, r0
 8004418:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	091b      	lsrs	r3, r3, #4
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	490a      	ldr	r1, [pc, #40]	; (800444c <HAL_RCC_ClockConfig+0x1c0>)
 8004424:	5ccb      	ldrb	r3, [r1, r3]
 8004426:	fa22 f303 	lsr.w	r3, r2, r3
 800442a:	4a09      	ldr	r2, [pc, #36]	; (8004450 <HAL_RCC_ClockConfig+0x1c4>)
 800442c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800442e:	4b09      	ldr	r3, [pc, #36]	; (8004454 <HAL_RCC_ClockConfig+0x1c8>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4618      	mov	r0, r3
 8004434:	f7fe fc68 	bl	8002d08 <HAL_InitTick>

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	40023c00 	.word	0x40023c00
 8004448:	40023800 	.word	0x40023800
 800444c:	0800698c 	.word	0x0800698c
 8004450:	2000000c 	.word	0x2000000c
 8004454:	20000010 	.word	0x20000010

08004458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800445c:	b090      	sub	sp, #64	; 0x40
 800445e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	637b      	str	r3, [r7, #52]	; 0x34
 8004464:	2300      	movs	r3, #0
 8004466:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004468:	2300      	movs	r3, #0
 800446a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800446c:	2300      	movs	r3, #0
 800446e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004470:	4b59      	ldr	r3, [pc, #356]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 030c 	and.w	r3, r3, #12
 8004478:	2b08      	cmp	r3, #8
 800447a:	d00d      	beq.n	8004498 <HAL_RCC_GetSysClockFreq+0x40>
 800447c:	2b08      	cmp	r3, #8
 800447e:	f200 80a1 	bhi.w	80045c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <HAL_RCC_GetSysClockFreq+0x34>
 8004486:	2b04      	cmp	r3, #4
 8004488:	d003      	beq.n	8004492 <HAL_RCC_GetSysClockFreq+0x3a>
 800448a:	e09b      	b.n	80045c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800448c:	4b53      	ldr	r3, [pc, #332]	; (80045dc <HAL_RCC_GetSysClockFreq+0x184>)
 800448e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004490:	e09b      	b.n	80045ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004492:	4b53      	ldr	r3, [pc, #332]	; (80045e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004494:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004496:	e098      	b.n	80045ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004498:	4b4f      	ldr	r3, [pc, #316]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044a0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044a2:	4b4d      	ldr	r3, [pc, #308]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d028      	beq.n	8004500 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ae:	4b4a      	ldr	r3, [pc, #296]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	099b      	lsrs	r3, r3, #6
 80044b4:	2200      	movs	r2, #0
 80044b6:	623b      	str	r3, [r7, #32]
 80044b8:	627a      	str	r2, [r7, #36]	; 0x24
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80044c0:	2100      	movs	r1, #0
 80044c2:	4b47      	ldr	r3, [pc, #284]	; (80045e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80044c4:	fb03 f201 	mul.w	r2, r3, r1
 80044c8:	2300      	movs	r3, #0
 80044ca:	fb00 f303 	mul.w	r3, r0, r3
 80044ce:	4413      	add	r3, r2
 80044d0:	4a43      	ldr	r2, [pc, #268]	; (80045e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80044d2:	fba0 1202 	umull	r1, r2, r0, r2
 80044d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044d8:	460a      	mov	r2, r1
 80044da:	62ba      	str	r2, [r7, #40]	; 0x28
 80044dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044de:	4413      	add	r3, r2
 80044e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e4:	2200      	movs	r2, #0
 80044e6:	61bb      	str	r3, [r7, #24]
 80044e8:	61fa      	str	r2, [r7, #28]
 80044ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80044f2:	f7fb fec5 	bl	8000280 <__aeabi_uldivmod>
 80044f6:	4602      	mov	r2, r0
 80044f8:	460b      	mov	r3, r1
 80044fa:	4613      	mov	r3, r2
 80044fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044fe:	e053      	b.n	80045a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004500:	4b35      	ldr	r3, [pc, #212]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	099b      	lsrs	r3, r3, #6
 8004506:	2200      	movs	r2, #0
 8004508:	613b      	str	r3, [r7, #16]
 800450a:	617a      	str	r2, [r7, #20]
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004512:	f04f 0b00 	mov.w	fp, #0
 8004516:	4652      	mov	r2, sl
 8004518:	465b      	mov	r3, fp
 800451a:	f04f 0000 	mov.w	r0, #0
 800451e:	f04f 0100 	mov.w	r1, #0
 8004522:	0159      	lsls	r1, r3, #5
 8004524:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004528:	0150      	lsls	r0, r2, #5
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	ebb2 080a 	subs.w	r8, r2, sl
 8004532:	eb63 090b 	sbc.w	r9, r3, fp
 8004536:	f04f 0200 	mov.w	r2, #0
 800453a:	f04f 0300 	mov.w	r3, #0
 800453e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004542:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004546:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800454a:	ebb2 0408 	subs.w	r4, r2, r8
 800454e:	eb63 0509 	sbc.w	r5, r3, r9
 8004552:	f04f 0200 	mov.w	r2, #0
 8004556:	f04f 0300 	mov.w	r3, #0
 800455a:	00eb      	lsls	r3, r5, #3
 800455c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004560:	00e2      	lsls	r2, r4, #3
 8004562:	4614      	mov	r4, r2
 8004564:	461d      	mov	r5, r3
 8004566:	eb14 030a 	adds.w	r3, r4, sl
 800456a:	603b      	str	r3, [r7, #0]
 800456c:	eb45 030b 	adc.w	r3, r5, fp
 8004570:	607b      	str	r3, [r7, #4]
 8004572:	f04f 0200 	mov.w	r2, #0
 8004576:	f04f 0300 	mov.w	r3, #0
 800457a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800457e:	4629      	mov	r1, r5
 8004580:	028b      	lsls	r3, r1, #10
 8004582:	4621      	mov	r1, r4
 8004584:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004588:	4621      	mov	r1, r4
 800458a:	028a      	lsls	r2, r1, #10
 800458c:	4610      	mov	r0, r2
 800458e:	4619      	mov	r1, r3
 8004590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004592:	2200      	movs	r2, #0
 8004594:	60bb      	str	r3, [r7, #8]
 8004596:	60fa      	str	r2, [r7, #12]
 8004598:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800459c:	f7fb fe70 	bl	8000280 <__aeabi_uldivmod>
 80045a0:	4602      	mov	r2, r0
 80045a2:	460b      	mov	r3, r1
 80045a4:	4613      	mov	r3, r2
 80045a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045a8:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	0c1b      	lsrs	r3, r3, #16
 80045ae:	f003 0303 	and.w	r3, r3, #3
 80045b2:	3301      	adds	r3, #1
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80045b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80045c2:	e002      	b.n	80045ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045c4:	4b05      	ldr	r3, [pc, #20]	; (80045dc <HAL_RCC_GetSysClockFreq+0x184>)
 80045c6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80045c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3740      	adds	r7, #64	; 0x40
 80045d0:	46bd      	mov	sp, r7
 80045d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045d6:	bf00      	nop
 80045d8:	40023800 	.word	0x40023800
 80045dc:	00f42400 	.word	0x00f42400
 80045e0:	017d7840 	.word	0x017d7840

080045e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045e8:	4b03      	ldr	r3, [pc, #12]	; (80045f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80045ea:	681b      	ldr	r3, [r3, #0]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	2000000c 	.word	0x2000000c

080045fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004600:	f7ff fff0 	bl	80045e4 <HAL_RCC_GetHCLKFreq>
 8004604:	4602      	mov	r2, r0
 8004606:	4b05      	ldr	r3, [pc, #20]	; (800461c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	0a9b      	lsrs	r3, r3, #10
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	4903      	ldr	r1, [pc, #12]	; (8004620 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004612:	5ccb      	ldrb	r3, [r1, r3]
 8004614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004618:	4618      	mov	r0, r3
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40023800 	.word	0x40023800
 8004620:	0800699c 	.word	0x0800699c

08004624 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e07b      	b.n	800472e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	2b00      	cmp	r3, #0
 800463c:	d108      	bne.n	8004650 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004646:	d009      	beq.n	800465c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	61da      	str	r2, [r3, #28]
 800464e:	e005      	b.n	800465c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d106      	bne.n	800467c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7fe f874 	bl	8002764 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004692:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046a4:	431a      	orrs	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	431a      	orrs	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	431a      	orrs	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046cc:	431a      	orrs	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e0:	ea42 0103 	orr.w	r1, r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	0c1b      	lsrs	r3, r3, #16
 80046fa:	f003 0104 	and.w	r1, r3, #4
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004702:	f003 0210 	and.w	r2, r3, #16
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	69da      	ldr	r2, [r3, #28]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800471c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b088      	sub	sp, #32
 800473a:	af00      	add	r7, sp, #0
 800473c:	60f8      	str	r0, [r7, #12]
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	603b      	str	r3, [r7, #0]
 8004742:	4613      	mov	r3, r2
 8004744:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004746:	2300      	movs	r3, #0
 8004748:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004750:	2b01      	cmp	r3, #1
 8004752:	d101      	bne.n	8004758 <HAL_SPI_Transmit+0x22>
 8004754:	2302      	movs	r3, #2
 8004756:	e126      	b.n	80049a6 <HAL_SPI_Transmit+0x270>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004760:	f7fe fb16 	bl	8002d90 <HAL_GetTick>
 8004764:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004766:	88fb      	ldrh	r3, [r7, #6]
 8004768:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b01      	cmp	r3, #1
 8004774:	d002      	beq.n	800477c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004776:	2302      	movs	r3, #2
 8004778:	77fb      	strb	r3, [r7, #31]
    goto error;
 800477a:	e10b      	b.n	8004994 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <HAL_SPI_Transmit+0x52>
 8004782:	88fb      	ldrh	r3, [r7, #6]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d102      	bne.n	800478e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800478c:	e102      	b.n	8004994 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2203      	movs	r2, #3
 8004792:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	88fa      	ldrh	r2, [r7, #6]
 80047a6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	88fa      	ldrh	r2, [r7, #6]
 80047ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047d4:	d10f      	bne.n	80047f6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004800:	2b40      	cmp	r3, #64	; 0x40
 8004802:	d007      	beq.n	8004814 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004812:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800481c:	d14b      	bne.n	80048b6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <HAL_SPI_Transmit+0xf6>
 8004826:	8afb      	ldrh	r3, [r7, #22]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d13e      	bne.n	80048aa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004830:	881a      	ldrh	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483c:	1c9a      	adds	r2, r3, #2
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004846:	b29b      	uxth	r3, r3
 8004848:	3b01      	subs	r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004850:	e02b      	b.n	80048aa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b02      	cmp	r3, #2
 800485e:	d112      	bne.n	8004886 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004864:	881a      	ldrh	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004870:	1c9a      	adds	r2, r3, #2
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800487a:	b29b      	uxth	r3, r3
 800487c:	3b01      	subs	r3, #1
 800487e:	b29a      	uxth	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	86da      	strh	r2, [r3, #54]	; 0x36
 8004884:	e011      	b.n	80048aa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004886:	f7fe fa83 	bl	8002d90 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	429a      	cmp	r2, r3
 8004894:	d803      	bhi.n	800489e <HAL_SPI_Transmit+0x168>
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489c:	d102      	bne.n	80048a4 <HAL_SPI_Transmit+0x16e>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d102      	bne.n	80048aa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048a8:	e074      	b.n	8004994 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1ce      	bne.n	8004852 <HAL_SPI_Transmit+0x11c>
 80048b4:	e04c      	b.n	8004950 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d002      	beq.n	80048c4 <HAL_SPI_Transmit+0x18e>
 80048be:	8afb      	ldrh	r3, [r7, #22]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d140      	bne.n	8004946 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	330c      	adds	r3, #12
 80048ce:	7812      	ldrb	r2, [r2, #0]
 80048d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d6:	1c5a      	adds	r2, r3, #1
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	3b01      	subs	r3, #1
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80048ea:	e02c      	b.n	8004946 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d113      	bne.n	8004922 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	330c      	adds	r3, #12
 8004904:	7812      	ldrb	r2, [r2, #0]
 8004906:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490c:	1c5a      	adds	r2, r3, #1
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004916:	b29b      	uxth	r3, r3
 8004918:	3b01      	subs	r3, #1
 800491a:	b29a      	uxth	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004920:	e011      	b.n	8004946 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004922:	f7fe fa35 	bl	8002d90 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d803      	bhi.n	800493a <HAL_SPI_Transmit+0x204>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004938:	d102      	bne.n	8004940 <HAL_SPI_Transmit+0x20a>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d102      	bne.n	8004946 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004944:	e026      	b.n	8004994 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800494a:	b29b      	uxth	r3, r3
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1cd      	bne.n	80048ec <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	6839      	ldr	r1, [r7, #0]
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f000 f8c1 	bl	8004adc <SPI_EndRxTxTransaction>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2220      	movs	r2, #32
 8004964:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10a      	bne.n	8004984 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800496e:	2300      	movs	r3, #0
 8004970:	613b      	str	r3, [r7, #16]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	613b      	str	r3, [r7, #16]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	613b      	str	r3, [r7, #16]
 8004982:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004988:	2b00      	cmp	r3, #0
 800498a:	d002      	beq.n	8004992 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	77fb      	strb	r3, [r7, #31]
 8004990:	e000      	b.n	8004994 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004992:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3720      	adds	r7, #32
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049bc:	b2db      	uxtb	r3, r3
}
 80049be:	4618      	mov	r0, r3
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
	...

080049cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b088      	sub	sp, #32
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	603b      	str	r3, [r7, #0]
 80049d8:	4613      	mov	r3, r2
 80049da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049dc:	f7fe f9d8 	bl	8002d90 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e4:	1a9b      	subs	r3, r3, r2
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	4413      	add	r3, r2
 80049ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049ec:	f7fe f9d0 	bl	8002d90 <HAL_GetTick>
 80049f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049f2:	4b39      	ldr	r3, [pc, #228]	; (8004ad8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	015b      	lsls	r3, r3, #5
 80049f8:	0d1b      	lsrs	r3, r3, #20
 80049fa:	69fa      	ldr	r2, [r7, #28]
 80049fc:	fb02 f303 	mul.w	r3, r2, r3
 8004a00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a02:	e054      	b.n	8004aae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0a:	d050      	beq.n	8004aae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a0c:	f7fe f9c0 	bl	8002d90 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	69fa      	ldr	r2, [r7, #28]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d902      	bls.n	8004a22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d13d      	bne.n	8004a9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a3a:	d111      	bne.n	8004a60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a44:	d004      	beq.n	8004a50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a4e:	d107      	bne.n	8004a60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a68:	d10f      	bne.n	8004a8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e017      	b.n	8004ace <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	bf0c      	ite	eq
 8004abe:	2301      	moveq	r3, #1
 8004ac0:	2300      	movne	r3, #0
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	79fb      	ldrb	r3, [r7, #7]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d19b      	bne.n	8004a04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3720      	adds	r7, #32
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	2000000c 	.word	0x2000000c

08004adc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b088      	sub	sp, #32
 8004ae0:	af02      	add	r7, sp, #8
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004ae8:	4b1b      	ldr	r3, [pc, #108]	; (8004b58 <SPI_EndRxTxTransaction+0x7c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a1b      	ldr	r2, [pc, #108]	; (8004b5c <SPI_EndRxTxTransaction+0x80>)
 8004aee:	fba2 2303 	umull	r2, r3, r2, r3
 8004af2:	0d5b      	lsrs	r3, r3, #21
 8004af4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004af8:	fb02 f303 	mul.w	r3, r2, r3
 8004afc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b06:	d112      	bne.n	8004b2e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	9300      	str	r3, [sp, #0]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	2180      	movs	r1, #128	; 0x80
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f7ff ff5a 	bl	80049cc <SPI_WaitFlagStateUntilTimeout>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d016      	beq.n	8004b4c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b22:	f043 0220 	orr.w	r2, r3, #32
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e00f      	b.n	8004b4e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00a      	beq.n	8004b4a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	3b01      	subs	r3, #1
 8004b38:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b44:	2b80      	cmp	r3, #128	; 0x80
 8004b46:	d0f2      	beq.n	8004b2e <SPI_EndRxTxTransaction+0x52>
 8004b48:	e000      	b.n	8004b4c <SPI_EndRxTxTransaction+0x70>
        break;
 8004b4a:	bf00      	nop
  }

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3718      	adds	r7, #24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	2000000c 	.word	0x2000000c
 8004b5c:	165e9f81 	.word	0x165e9f81

08004b60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e041      	b.n	8004bf6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d106      	bne.n	8004b8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7fe f84a 	bl	8002c20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2202      	movs	r2, #2
 8004b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3304      	adds	r3, #4
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	4610      	mov	r0, r2
 8004ba0:	f000 fb48 	bl	8005234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
	...

08004c00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d001      	beq.n	8004c18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e044      	b.n	8004ca2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f042 0201 	orr.w	r2, r2, #1
 8004c2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a1e      	ldr	r2, [pc, #120]	; (8004cb0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d018      	beq.n	8004c6c <HAL_TIM_Base_Start_IT+0x6c>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c42:	d013      	beq.n	8004c6c <HAL_TIM_Base_Start_IT+0x6c>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a1a      	ldr	r2, [pc, #104]	; (8004cb4 <HAL_TIM_Base_Start_IT+0xb4>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d00e      	beq.n	8004c6c <HAL_TIM_Base_Start_IT+0x6c>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a19      	ldr	r2, [pc, #100]	; (8004cb8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d009      	beq.n	8004c6c <HAL_TIM_Base_Start_IT+0x6c>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a17      	ldr	r2, [pc, #92]	; (8004cbc <HAL_TIM_Base_Start_IT+0xbc>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d004      	beq.n	8004c6c <HAL_TIM_Base_Start_IT+0x6c>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a16      	ldr	r2, [pc, #88]	; (8004cc0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d111      	bne.n	8004c90 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f003 0307 	and.w	r3, r3, #7
 8004c76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2b06      	cmp	r3, #6
 8004c7c:	d010      	beq.n	8004ca0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f042 0201 	orr.w	r2, r2, #1
 8004c8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c8e:	e007      	b.n	8004ca0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0201 	orr.w	r2, r2, #1
 8004c9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	40010000 	.word	0x40010000
 8004cb4:	40000400 	.word	0x40000400
 8004cb8:	40000800 	.word	0x40000800
 8004cbc:	40000c00 	.word	0x40000c00
 8004cc0:	40014000 	.word	0x40014000

08004cc4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e041      	b.n	8004d5a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d106      	bne.n	8004cf0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f839 	bl	8004d62 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	3304      	adds	r3, #4
 8004d00:	4619      	mov	r1, r3
 8004d02:	4610      	mov	r0, r2
 8004d04:	f000 fa96 	bl	8005234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b083      	sub	sp, #12
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004d6a:	bf00      	nop
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr

08004d76 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b082      	sub	sp, #8
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d122      	bne.n	8004dd2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d11b      	bne.n	8004dd2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f06f 0202 	mvn.w	r2, #2
 8004da2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	f003 0303 	and.w	r3, r3, #3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d003      	beq.n	8004dc0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 fa1c 	bl	80051f6 <HAL_TIM_IC_CaptureCallback>
 8004dbe:	e005      	b.n	8004dcc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 fa0e 	bl	80051e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 fa1f 	bl	800520a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	f003 0304 	and.w	r3, r3, #4
 8004ddc:	2b04      	cmp	r3, #4
 8004dde:	d122      	bne.n	8004e26 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	f003 0304 	and.w	r3, r3, #4
 8004dea:	2b04      	cmp	r3, #4
 8004dec:	d11b      	bne.n	8004e26 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f06f 0204 	mvn.w	r2, #4
 8004df6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d003      	beq.n	8004e14 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 f9f2 	bl	80051f6 <HAL_TIM_IC_CaptureCallback>
 8004e12:	e005      	b.n	8004e20 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 f9e4 	bl	80051e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f9f5 	bl	800520a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	f003 0308 	and.w	r3, r3, #8
 8004e30:	2b08      	cmp	r3, #8
 8004e32:	d122      	bne.n	8004e7a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f003 0308 	and.w	r3, r3, #8
 8004e3e:	2b08      	cmp	r3, #8
 8004e40:	d11b      	bne.n	8004e7a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f06f 0208 	mvn.w	r2, #8
 8004e4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2204      	movs	r2, #4
 8004e50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	f003 0303 	and.w	r3, r3, #3
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 f9c8 	bl	80051f6 <HAL_TIM_IC_CaptureCallback>
 8004e66:	e005      	b.n	8004e74 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 f9ba 	bl	80051e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f9cb 	bl	800520a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	f003 0310 	and.w	r3, r3, #16
 8004e84:	2b10      	cmp	r3, #16
 8004e86:	d122      	bne.n	8004ece <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f003 0310 	and.w	r3, r3, #16
 8004e92:	2b10      	cmp	r3, #16
 8004e94:	d11b      	bne.n	8004ece <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f06f 0210 	mvn.w	r2, #16
 8004e9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2208      	movs	r2, #8
 8004ea4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 f99e 	bl	80051f6 <HAL_TIM_IC_CaptureCallback>
 8004eba:	e005      	b.n	8004ec8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f990 	bl	80051e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f9a1 	bl	800520a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d10e      	bne.n	8004efa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d107      	bne.n	8004efa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f06f 0201 	mvn.w	r2, #1
 8004ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f96a 	bl	80051ce <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f04:	2b80      	cmp	r3, #128	; 0x80
 8004f06:	d10e      	bne.n	8004f26 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f12:	2b80      	cmp	r3, #128	; 0x80
 8004f14:	d107      	bne.n	8004f26 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 fca5 	bl	8005870 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f30:	2b40      	cmp	r3, #64	; 0x40
 8004f32:	d10e      	bne.n	8004f52 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3e:	2b40      	cmp	r3, #64	; 0x40
 8004f40:	d107      	bne.n	8004f52 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f966 	bl	800521e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	f003 0320 	and.w	r3, r3, #32
 8004f5c:	2b20      	cmp	r3, #32
 8004f5e:	d10e      	bne.n	8004f7e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f003 0320 	and.w	r3, r3, #32
 8004f6a:	2b20      	cmp	r3, #32
 8004f6c:	d107      	bne.n	8004f7e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f06f 0220 	mvn.w	r2, #32
 8004f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 fc6f 	bl	800585c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f7e:	bf00      	nop
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
	...

08004f88 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f94:	2300      	movs	r3, #0
 8004f96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d101      	bne.n	8004fa6 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	e048      	b.n	8005038 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b0c      	cmp	r3, #12
 8004fb2:	d839      	bhi.n	8005028 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004fb4:	a201      	add	r2, pc, #4	; (adr r2, 8004fbc <HAL_TIM_OC_ConfigChannel+0x34>)
 8004fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fba:	bf00      	nop
 8004fbc:	08004ff1 	.word	0x08004ff1
 8004fc0:	08005029 	.word	0x08005029
 8004fc4:	08005029 	.word	0x08005029
 8004fc8:	08005029 	.word	0x08005029
 8004fcc:	08004fff 	.word	0x08004fff
 8004fd0:	08005029 	.word	0x08005029
 8004fd4:	08005029 	.word	0x08005029
 8004fd8:	08005029 	.word	0x08005029
 8004fdc:	0800500d 	.word	0x0800500d
 8004fe0:	08005029 	.word	0x08005029
 8004fe4:	08005029 	.word	0x08005029
 8004fe8:	08005029 	.word	0x08005029
 8004fec:	0800501b 	.word	0x0800501b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68b9      	ldr	r1, [r7, #8]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 f99c 	bl	8005334 <TIM_OC1_SetConfig>
      break;
 8004ffc:	e017      	b.n	800502e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68b9      	ldr	r1, [r7, #8]
 8005004:	4618      	mov	r0, r3
 8005006:	f000 f9fb 	bl	8005400 <TIM_OC2_SetConfig>
      break;
 800500a:	e010      	b.n	800502e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68b9      	ldr	r1, [r7, #8]
 8005012:	4618      	mov	r0, r3
 8005014:	f000 fa60 	bl	80054d8 <TIM_OC3_SetConfig>
      break;
 8005018:	e009      	b.n	800502e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68b9      	ldr	r1, [r7, #8]
 8005020:	4618      	mov	r0, r3
 8005022:	f000 fac3 	bl	80055ac <TIM_OC4_SetConfig>
      break;
 8005026:	e002      	b.n	800502e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	75fb      	strb	r3, [r7, #23]
      break;
 800502c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005036:	7dfb      	ldrb	r3, [r7, #23]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3718      	adds	r7, #24
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800504a:	2300      	movs	r3, #0
 800504c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005054:	2b01      	cmp	r3, #1
 8005056:	d101      	bne.n	800505c <HAL_TIM_ConfigClockSource+0x1c>
 8005058:	2302      	movs	r3, #2
 800505a:	e0b4      	b.n	80051c6 <HAL_TIM_ConfigClockSource+0x186>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2202      	movs	r2, #2
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800507a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005082:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005094:	d03e      	beq.n	8005114 <HAL_TIM_ConfigClockSource+0xd4>
 8005096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800509a:	f200 8087 	bhi.w	80051ac <HAL_TIM_ConfigClockSource+0x16c>
 800509e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050a2:	f000 8086 	beq.w	80051b2 <HAL_TIM_ConfigClockSource+0x172>
 80050a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050aa:	d87f      	bhi.n	80051ac <HAL_TIM_ConfigClockSource+0x16c>
 80050ac:	2b70      	cmp	r3, #112	; 0x70
 80050ae:	d01a      	beq.n	80050e6 <HAL_TIM_ConfigClockSource+0xa6>
 80050b0:	2b70      	cmp	r3, #112	; 0x70
 80050b2:	d87b      	bhi.n	80051ac <HAL_TIM_ConfigClockSource+0x16c>
 80050b4:	2b60      	cmp	r3, #96	; 0x60
 80050b6:	d050      	beq.n	800515a <HAL_TIM_ConfigClockSource+0x11a>
 80050b8:	2b60      	cmp	r3, #96	; 0x60
 80050ba:	d877      	bhi.n	80051ac <HAL_TIM_ConfigClockSource+0x16c>
 80050bc:	2b50      	cmp	r3, #80	; 0x50
 80050be:	d03c      	beq.n	800513a <HAL_TIM_ConfigClockSource+0xfa>
 80050c0:	2b50      	cmp	r3, #80	; 0x50
 80050c2:	d873      	bhi.n	80051ac <HAL_TIM_ConfigClockSource+0x16c>
 80050c4:	2b40      	cmp	r3, #64	; 0x40
 80050c6:	d058      	beq.n	800517a <HAL_TIM_ConfigClockSource+0x13a>
 80050c8:	2b40      	cmp	r3, #64	; 0x40
 80050ca:	d86f      	bhi.n	80051ac <HAL_TIM_ConfigClockSource+0x16c>
 80050cc:	2b30      	cmp	r3, #48	; 0x30
 80050ce:	d064      	beq.n	800519a <HAL_TIM_ConfigClockSource+0x15a>
 80050d0:	2b30      	cmp	r3, #48	; 0x30
 80050d2:	d86b      	bhi.n	80051ac <HAL_TIM_ConfigClockSource+0x16c>
 80050d4:	2b20      	cmp	r3, #32
 80050d6:	d060      	beq.n	800519a <HAL_TIM_ConfigClockSource+0x15a>
 80050d8:	2b20      	cmp	r3, #32
 80050da:	d867      	bhi.n	80051ac <HAL_TIM_ConfigClockSource+0x16c>
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d05c      	beq.n	800519a <HAL_TIM_ConfigClockSource+0x15a>
 80050e0:	2b10      	cmp	r3, #16
 80050e2:	d05a      	beq.n	800519a <HAL_TIM_ConfigClockSource+0x15a>
 80050e4:	e062      	b.n	80051ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6818      	ldr	r0, [r3, #0]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	6899      	ldr	r1, [r3, #8]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	f000 fb23 	bl	8005740 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005108:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	609a      	str	r2, [r3, #8]
      break;
 8005112:	e04f      	b.n	80051b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6818      	ldr	r0, [r3, #0]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	6899      	ldr	r1, [r3, #8]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f000 fb0c 	bl	8005740 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689a      	ldr	r2, [r3, #8]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005136:	609a      	str	r2, [r3, #8]
      break;
 8005138:	e03c      	b.n	80051b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6818      	ldr	r0, [r3, #0]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	6859      	ldr	r1, [r3, #4]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	461a      	mov	r2, r3
 8005148:	f000 fa80 	bl	800564c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2150      	movs	r1, #80	; 0x50
 8005152:	4618      	mov	r0, r3
 8005154:	f000 fad9 	bl	800570a <TIM_ITRx_SetConfig>
      break;
 8005158:	e02c      	b.n	80051b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6818      	ldr	r0, [r3, #0]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	6859      	ldr	r1, [r3, #4]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	461a      	mov	r2, r3
 8005168:	f000 fa9f 	bl	80056aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2160      	movs	r1, #96	; 0x60
 8005172:	4618      	mov	r0, r3
 8005174:	f000 fac9 	bl	800570a <TIM_ITRx_SetConfig>
      break;
 8005178:	e01c      	b.n	80051b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6818      	ldr	r0, [r3, #0]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	6859      	ldr	r1, [r3, #4]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	461a      	mov	r2, r3
 8005188:	f000 fa60 	bl	800564c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2140      	movs	r1, #64	; 0x40
 8005192:	4618      	mov	r0, r3
 8005194:	f000 fab9 	bl	800570a <TIM_ITRx_SetConfig>
      break;
 8005198:	e00c      	b.n	80051b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4619      	mov	r1, r3
 80051a4:	4610      	mov	r0, r2
 80051a6:	f000 fab0 	bl	800570a <TIM_ITRx_SetConfig>
      break;
 80051aa:	e003      	b.n	80051b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	73fb      	strb	r3, [r7, #15]
      break;
 80051b0:	e000      	b.n	80051b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80051b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b083      	sub	sp, #12
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80051d6:	bf00      	nop
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b083      	sub	sp, #12
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051ea:	bf00      	nop
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b083      	sub	sp, #12
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051fe:	bf00      	nop
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800520a:	b480      	push	{r7}
 800520c:	b083      	sub	sp, #12
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005212:	bf00      	nop
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005226:	bf00      	nop
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
	...

08005234 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a34      	ldr	r2, [pc, #208]	; (8005318 <TIM_Base_SetConfig+0xe4>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d00f      	beq.n	800526c <TIM_Base_SetConfig+0x38>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005252:	d00b      	beq.n	800526c <TIM_Base_SetConfig+0x38>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a31      	ldr	r2, [pc, #196]	; (800531c <TIM_Base_SetConfig+0xe8>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d007      	beq.n	800526c <TIM_Base_SetConfig+0x38>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a30      	ldr	r2, [pc, #192]	; (8005320 <TIM_Base_SetConfig+0xec>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d003      	beq.n	800526c <TIM_Base_SetConfig+0x38>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a2f      	ldr	r2, [pc, #188]	; (8005324 <TIM_Base_SetConfig+0xf0>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d108      	bne.n	800527e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005272:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a25      	ldr	r2, [pc, #148]	; (8005318 <TIM_Base_SetConfig+0xe4>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d01b      	beq.n	80052be <TIM_Base_SetConfig+0x8a>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800528c:	d017      	beq.n	80052be <TIM_Base_SetConfig+0x8a>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a22      	ldr	r2, [pc, #136]	; (800531c <TIM_Base_SetConfig+0xe8>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d013      	beq.n	80052be <TIM_Base_SetConfig+0x8a>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a21      	ldr	r2, [pc, #132]	; (8005320 <TIM_Base_SetConfig+0xec>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d00f      	beq.n	80052be <TIM_Base_SetConfig+0x8a>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a20      	ldr	r2, [pc, #128]	; (8005324 <TIM_Base_SetConfig+0xf0>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d00b      	beq.n	80052be <TIM_Base_SetConfig+0x8a>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a1f      	ldr	r2, [pc, #124]	; (8005328 <TIM_Base_SetConfig+0xf4>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d007      	beq.n	80052be <TIM_Base_SetConfig+0x8a>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a1e      	ldr	r2, [pc, #120]	; (800532c <TIM_Base_SetConfig+0xf8>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d003      	beq.n	80052be <TIM_Base_SetConfig+0x8a>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a1d      	ldr	r2, [pc, #116]	; (8005330 <TIM_Base_SetConfig+0xfc>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d108      	bne.n	80052d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a08      	ldr	r2, [pc, #32]	; (8005318 <TIM_Base_SetConfig+0xe4>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d103      	bne.n	8005304 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	691a      	ldr	r2, [r3, #16]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	615a      	str	r2, [r3, #20]
}
 800530a:	bf00      	nop
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	40010000 	.word	0x40010000
 800531c:	40000400 	.word	0x40000400
 8005320:	40000800 	.word	0x40000800
 8005324:	40000c00 	.word	0x40000c00
 8005328:	40014000 	.word	0x40014000
 800532c:	40014400 	.word	0x40014400
 8005330:	40014800 	.word	0x40014800

08005334 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005334:	b480      	push	{r7}
 8005336:	b087      	sub	sp, #28
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	f023 0201 	bic.w	r2, r3, #1
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f023 0303 	bic.w	r3, r3, #3
 800536a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	4313      	orrs	r3, r2
 8005374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f023 0302 	bic.w	r3, r3, #2
 800537c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	4313      	orrs	r3, r2
 8005386:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a1c      	ldr	r2, [pc, #112]	; (80053fc <TIM_OC1_SetConfig+0xc8>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d10c      	bne.n	80053aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f023 0308 	bic.w	r3, r3, #8
 8005396:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	4313      	orrs	r3, r2
 80053a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f023 0304 	bic.w	r3, r3, #4
 80053a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a13      	ldr	r2, [pc, #76]	; (80053fc <TIM_OC1_SetConfig+0xc8>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d111      	bne.n	80053d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	621a      	str	r2, [r3, #32]
}
 80053f0:	bf00      	nop
 80053f2:	371c      	adds	r7, #28
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	40010000 	.word	0x40010000

08005400 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	f023 0210 	bic.w	r2, r3, #16
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800542e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	021b      	lsls	r3, r3, #8
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4313      	orrs	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	f023 0320 	bic.w	r3, r3, #32
 800544a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	011b      	lsls	r3, r3, #4
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	4313      	orrs	r3, r2
 8005456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a1e      	ldr	r2, [pc, #120]	; (80054d4 <TIM_OC2_SetConfig+0xd4>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d10d      	bne.n	800547c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005466:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	011b      	lsls	r3, r3, #4
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	4313      	orrs	r3, r2
 8005472:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800547a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a15      	ldr	r2, [pc, #84]	; (80054d4 <TIM_OC2_SetConfig+0xd4>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d113      	bne.n	80054ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800548a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005492:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	4313      	orrs	r3, r2
 800549e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	621a      	str	r2, [r3, #32]
}
 80054c6:	bf00      	nop
 80054c8:	371c      	adds	r7, #28
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	40010000 	.word	0x40010000

080054d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f023 0303 	bic.w	r3, r3, #3
 800550e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	4313      	orrs	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	021b      	lsls	r3, r3, #8
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	4313      	orrs	r3, r2
 800552c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a1d      	ldr	r2, [pc, #116]	; (80055a8 <TIM_OC3_SetConfig+0xd0>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d10d      	bne.n	8005552 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800553c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	021b      	lsls	r3, r3, #8
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	4313      	orrs	r3, r2
 8005548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005550:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a14      	ldr	r2, [pc, #80]	; (80055a8 <TIM_OC3_SetConfig+0xd0>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d113      	bne.n	8005582 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	011b      	lsls	r3, r3, #4
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	4313      	orrs	r3, r2
 8005574:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	011b      	lsls	r3, r3, #4
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	4313      	orrs	r3, r2
 8005580:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	621a      	str	r2, [r3, #32]
}
 800559c:	bf00      	nop
 800559e:	371c      	adds	r7, #28
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr
 80055a8:	40010000 	.word	0x40010000

080055ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	021b      	lsls	r3, r3, #8
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	031b      	lsls	r3, r3, #12
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	4313      	orrs	r3, r2
 8005602:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a10      	ldr	r2, [pc, #64]	; (8005648 <TIM_OC4_SetConfig+0x9c>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d109      	bne.n	8005620 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005612:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	019b      	lsls	r3, r3, #6
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	4313      	orrs	r3, r2
 800561e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	621a      	str	r2, [r3, #32]
}
 800563a:	bf00      	nop
 800563c:	371c      	adds	r7, #28
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	40010000 	.word	0x40010000

0800564c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	f023 0201 	bic.w	r2, r3, #1
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005676:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	011b      	lsls	r3, r3, #4
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	4313      	orrs	r3, r2
 8005680:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f023 030a 	bic.w	r3, r3, #10
 8005688:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	4313      	orrs	r3, r2
 8005690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	621a      	str	r2, [r3, #32]
}
 800569e:	bf00      	nop
 80056a0:	371c      	adds	r7, #28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b087      	sub	sp, #28
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	60f8      	str	r0, [r7, #12]
 80056b2:	60b9      	str	r1, [r7, #8]
 80056b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	f023 0210 	bic.w	r2, r3, #16
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	031b      	lsls	r3, r3, #12
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	621a      	str	r2, [r3, #32]
}
 80056fe:	bf00      	nop
 8005700:	371c      	adds	r7, #28
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800570a:	b480      	push	{r7}
 800570c:	b085      	sub	sp, #20
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005720:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4313      	orrs	r3, r2
 8005728:	f043 0307 	orr.w	r3, r3, #7
 800572c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	609a      	str	r2, [r3, #8]
}
 8005734:	bf00      	nop
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005740:	b480      	push	{r7}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
 800574c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800575a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	021a      	lsls	r2, r3, #8
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	431a      	orrs	r2, r3
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	4313      	orrs	r3, r2
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	4313      	orrs	r3, r2
 800576c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	609a      	str	r2, [r3, #8]
}
 8005774:	bf00      	nop
 8005776:	371c      	adds	r7, #28
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005790:	2b01      	cmp	r3, #1
 8005792:	d101      	bne.n	8005798 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005794:	2302      	movs	r3, #2
 8005796:	e050      	b.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2202      	movs	r2, #2
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a1c      	ldr	r2, [pc, #112]	; (8005848 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d018      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057e4:	d013      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a18      	ldr	r2, [pc, #96]	; (800584c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d00e      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a16      	ldr	r2, [pc, #88]	; (8005850 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d009      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a15      	ldr	r2, [pc, #84]	; (8005854 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d004      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a13      	ldr	r2, [pc, #76]	; (8005858 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d10c      	bne.n	8005828 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005814:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	4313      	orrs	r3, r2
 800581e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	40010000 	.word	0x40010000
 800584c:	40000400 	.word	0x40000400
 8005850:	40000800 	.word	0x40000800
 8005854:	40000c00 	.word	0x40000c00
 8005858:	40014000 	.word	0x40014000

0800585c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <__errno>:
 8005884:	4b01      	ldr	r3, [pc, #4]	; (800588c <__errno+0x8>)
 8005886:	6818      	ldr	r0, [r3, #0]
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	20000018 	.word	0x20000018

08005890 <__libc_init_array>:
 8005890:	b570      	push	{r4, r5, r6, lr}
 8005892:	4d0d      	ldr	r5, [pc, #52]	; (80058c8 <__libc_init_array+0x38>)
 8005894:	4c0d      	ldr	r4, [pc, #52]	; (80058cc <__libc_init_array+0x3c>)
 8005896:	1b64      	subs	r4, r4, r5
 8005898:	10a4      	asrs	r4, r4, #2
 800589a:	2600      	movs	r6, #0
 800589c:	42a6      	cmp	r6, r4
 800589e:	d109      	bne.n	80058b4 <__libc_init_array+0x24>
 80058a0:	4d0b      	ldr	r5, [pc, #44]	; (80058d0 <__libc_init_array+0x40>)
 80058a2:	4c0c      	ldr	r4, [pc, #48]	; (80058d4 <__libc_init_array+0x44>)
 80058a4:	f001 f866 	bl	8006974 <_init>
 80058a8:	1b64      	subs	r4, r4, r5
 80058aa:	10a4      	asrs	r4, r4, #2
 80058ac:	2600      	movs	r6, #0
 80058ae:	42a6      	cmp	r6, r4
 80058b0:	d105      	bne.n	80058be <__libc_init_array+0x2e>
 80058b2:	bd70      	pop	{r4, r5, r6, pc}
 80058b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80058b8:	4798      	blx	r3
 80058ba:	3601      	adds	r6, #1
 80058bc:	e7ee      	b.n	800589c <__libc_init_array+0xc>
 80058be:	f855 3b04 	ldr.w	r3, [r5], #4
 80058c2:	4798      	blx	r3
 80058c4:	3601      	adds	r6, #1
 80058c6:	e7f2      	b.n	80058ae <__libc_init_array+0x1e>
 80058c8:	08006af4 	.word	0x08006af4
 80058cc:	08006af4 	.word	0x08006af4
 80058d0:	08006af4 	.word	0x08006af4
 80058d4:	08006af8 	.word	0x08006af8

080058d8 <memcpy>:
 80058d8:	440a      	add	r2, r1
 80058da:	4291      	cmp	r1, r2
 80058dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80058e0:	d100      	bne.n	80058e4 <memcpy+0xc>
 80058e2:	4770      	bx	lr
 80058e4:	b510      	push	{r4, lr}
 80058e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058ee:	4291      	cmp	r1, r2
 80058f0:	d1f9      	bne.n	80058e6 <memcpy+0xe>
 80058f2:	bd10      	pop	{r4, pc}

080058f4 <memset>:
 80058f4:	4402      	add	r2, r0
 80058f6:	4603      	mov	r3, r0
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d100      	bne.n	80058fe <memset+0xa>
 80058fc:	4770      	bx	lr
 80058fe:	f803 1b01 	strb.w	r1, [r3], #1
 8005902:	e7f9      	b.n	80058f8 <memset+0x4>

08005904 <rand>:
 8005904:	4b16      	ldr	r3, [pc, #88]	; (8005960 <rand+0x5c>)
 8005906:	b510      	push	{r4, lr}
 8005908:	681c      	ldr	r4, [r3, #0]
 800590a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800590c:	b9b3      	cbnz	r3, 800593c <rand+0x38>
 800590e:	2018      	movs	r0, #24
 8005910:	f000 f95e 	bl	8005bd0 <malloc>
 8005914:	63a0      	str	r0, [r4, #56]	; 0x38
 8005916:	b928      	cbnz	r0, 8005924 <rand+0x20>
 8005918:	4602      	mov	r2, r0
 800591a:	4b12      	ldr	r3, [pc, #72]	; (8005964 <rand+0x60>)
 800591c:	4812      	ldr	r0, [pc, #72]	; (8005968 <rand+0x64>)
 800591e:	214e      	movs	r1, #78	; 0x4e
 8005920:	f000 f82e 	bl	8005980 <__assert_func>
 8005924:	4a11      	ldr	r2, [pc, #68]	; (800596c <rand+0x68>)
 8005926:	4b12      	ldr	r3, [pc, #72]	; (8005970 <rand+0x6c>)
 8005928:	e9c0 2300 	strd	r2, r3, [r0]
 800592c:	4b11      	ldr	r3, [pc, #68]	; (8005974 <rand+0x70>)
 800592e:	6083      	str	r3, [r0, #8]
 8005930:	230b      	movs	r3, #11
 8005932:	8183      	strh	r3, [r0, #12]
 8005934:	2201      	movs	r2, #1
 8005936:	2300      	movs	r3, #0
 8005938:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800593c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800593e:	4a0e      	ldr	r2, [pc, #56]	; (8005978 <rand+0x74>)
 8005940:	6920      	ldr	r0, [r4, #16]
 8005942:	6963      	ldr	r3, [r4, #20]
 8005944:	490d      	ldr	r1, [pc, #52]	; (800597c <rand+0x78>)
 8005946:	4342      	muls	r2, r0
 8005948:	fb01 2203 	mla	r2, r1, r3, r2
 800594c:	fba0 0101 	umull	r0, r1, r0, r1
 8005950:	1c43      	adds	r3, r0, #1
 8005952:	eb42 0001 	adc.w	r0, r2, r1
 8005956:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800595a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800595e:	bd10      	pop	{r4, pc}
 8005960:	20000018 	.word	0x20000018
 8005964:	080069a8 	.word	0x080069a8
 8005968:	080069bf 	.word	0x080069bf
 800596c:	abcd330e 	.word	0xabcd330e
 8005970:	e66d1234 	.word	0xe66d1234
 8005974:	0005deec 	.word	0x0005deec
 8005978:	5851f42d 	.word	0x5851f42d
 800597c:	4c957f2d 	.word	0x4c957f2d

08005980 <__assert_func>:
 8005980:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005982:	4614      	mov	r4, r2
 8005984:	461a      	mov	r2, r3
 8005986:	4b09      	ldr	r3, [pc, #36]	; (80059ac <__assert_func+0x2c>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4605      	mov	r5, r0
 800598c:	68d8      	ldr	r0, [r3, #12]
 800598e:	b14c      	cbz	r4, 80059a4 <__assert_func+0x24>
 8005990:	4b07      	ldr	r3, [pc, #28]	; (80059b0 <__assert_func+0x30>)
 8005992:	9100      	str	r1, [sp, #0]
 8005994:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005998:	4906      	ldr	r1, [pc, #24]	; (80059b4 <__assert_func+0x34>)
 800599a:	462b      	mov	r3, r5
 800599c:	f000 f8e4 	bl	8005b68 <fiprintf>
 80059a0:	f000 fe12 	bl	80065c8 <abort>
 80059a4:	4b04      	ldr	r3, [pc, #16]	; (80059b8 <__assert_func+0x38>)
 80059a6:	461c      	mov	r4, r3
 80059a8:	e7f3      	b.n	8005992 <__assert_func+0x12>
 80059aa:	bf00      	nop
 80059ac:	20000018 	.word	0x20000018
 80059b0:	08006a1a 	.word	0x08006a1a
 80059b4:	08006a27 	.word	0x08006a27
 80059b8:	08006a55 	.word	0x08006a55

080059bc <std>:
 80059bc:	2300      	movs	r3, #0
 80059be:	b510      	push	{r4, lr}
 80059c0:	4604      	mov	r4, r0
 80059c2:	e9c0 3300 	strd	r3, r3, [r0]
 80059c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059ca:	6083      	str	r3, [r0, #8]
 80059cc:	8181      	strh	r1, [r0, #12]
 80059ce:	6643      	str	r3, [r0, #100]	; 0x64
 80059d0:	81c2      	strh	r2, [r0, #14]
 80059d2:	6183      	str	r3, [r0, #24]
 80059d4:	4619      	mov	r1, r3
 80059d6:	2208      	movs	r2, #8
 80059d8:	305c      	adds	r0, #92	; 0x5c
 80059da:	f7ff ff8b 	bl	80058f4 <memset>
 80059de:	4b05      	ldr	r3, [pc, #20]	; (80059f4 <std+0x38>)
 80059e0:	6263      	str	r3, [r4, #36]	; 0x24
 80059e2:	4b05      	ldr	r3, [pc, #20]	; (80059f8 <std+0x3c>)
 80059e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80059e6:	4b05      	ldr	r3, [pc, #20]	; (80059fc <std+0x40>)
 80059e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80059ea:	4b05      	ldr	r3, [pc, #20]	; (8005a00 <std+0x44>)
 80059ec:	6224      	str	r4, [r4, #32]
 80059ee:	6323      	str	r3, [r4, #48]	; 0x30
 80059f0:	bd10      	pop	{r4, pc}
 80059f2:	bf00      	nop
 80059f4:	0800639d 	.word	0x0800639d
 80059f8:	080063bf 	.word	0x080063bf
 80059fc:	080063f7 	.word	0x080063f7
 8005a00:	0800641b 	.word	0x0800641b

08005a04 <_cleanup_r>:
 8005a04:	4901      	ldr	r1, [pc, #4]	; (8005a0c <_cleanup_r+0x8>)
 8005a06:	f000 b8c1 	b.w	8005b8c <_fwalk_reent>
 8005a0a:	bf00      	nop
 8005a0c:	08006705 	.word	0x08006705

08005a10 <__sfmoreglue>:
 8005a10:	b570      	push	{r4, r5, r6, lr}
 8005a12:	2268      	movs	r2, #104	; 0x68
 8005a14:	1e4d      	subs	r5, r1, #1
 8005a16:	4355      	muls	r5, r2
 8005a18:	460e      	mov	r6, r1
 8005a1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005a1e:	f000 f94b 	bl	8005cb8 <_malloc_r>
 8005a22:	4604      	mov	r4, r0
 8005a24:	b140      	cbz	r0, 8005a38 <__sfmoreglue+0x28>
 8005a26:	2100      	movs	r1, #0
 8005a28:	e9c0 1600 	strd	r1, r6, [r0]
 8005a2c:	300c      	adds	r0, #12
 8005a2e:	60a0      	str	r0, [r4, #8]
 8005a30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005a34:	f7ff ff5e 	bl	80058f4 <memset>
 8005a38:	4620      	mov	r0, r4
 8005a3a:	bd70      	pop	{r4, r5, r6, pc}

08005a3c <__sfp_lock_acquire>:
 8005a3c:	4801      	ldr	r0, [pc, #4]	; (8005a44 <__sfp_lock_acquire+0x8>)
 8005a3e:	f000 b8c5 	b.w	8005bcc <__retarget_lock_acquire_recursive>
 8005a42:	bf00      	nop
 8005a44:	20000401 	.word	0x20000401

08005a48 <__sfp_lock_release>:
 8005a48:	4801      	ldr	r0, [pc, #4]	; (8005a50 <__sfp_lock_release+0x8>)
 8005a4a:	f000 b8c0 	b.w	8005bce <__retarget_lock_release_recursive>
 8005a4e:	bf00      	nop
 8005a50:	20000401 	.word	0x20000401

08005a54 <__sinit_lock_acquire>:
 8005a54:	4801      	ldr	r0, [pc, #4]	; (8005a5c <__sinit_lock_acquire+0x8>)
 8005a56:	f000 b8b9 	b.w	8005bcc <__retarget_lock_acquire_recursive>
 8005a5a:	bf00      	nop
 8005a5c:	20000402 	.word	0x20000402

08005a60 <__sinit_lock_release>:
 8005a60:	4801      	ldr	r0, [pc, #4]	; (8005a68 <__sinit_lock_release+0x8>)
 8005a62:	f000 b8b4 	b.w	8005bce <__retarget_lock_release_recursive>
 8005a66:	bf00      	nop
 8005a68:	20000402 	.word	0x20000402

08005a6c <__sinit>:
 8005a6c:	b510      	push	{r4, lr}
 8005a6e:	4604      	mov	r4, r0
 8005a70:	f7ff fff0 	bl	8005a54 <__sinit_lock_acquire>
 8005a74:	69a3      	ldr	r3, [r4, #24]
 8005a76:	b11b      	cbz	r3, 8005a80 <__sinit+0x14>
 8005a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a7c:	f7ff bff0 	b.w	8005a60 <__sinit_lock_release>
 8005a80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005a84:	6523      	str	r3, [r4, #80]	; 0x50
 8005a86:	4b13      	ldr	r3, [pc, #76]	; (8005ad4 <__sinit+0x68>)
 8005a88:	4a13      	ldr	r2, [pc, #76]	; (8005ad8 <__sinit+0x6c>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a8e:	42a3      	cmp	r3, r4
 8005a90:	bf04      	itt	eq
 8005a92:	2301      	moveq	r3, #1
 8005a94:	61a3      	streq	r3, [r4, #24]
 8005a96:	4620      	mov	r0, r4
 8005a98:	f000 f820 	bl	8005adc <__sfp>
 8005a9c:	6060      	str	r0, [r4, #4]
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	f000 f81c 	bl	8005adc <__sfp>
 8005aa4:	60a0      	str	r0, [r4, #8]
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	f000 f818 	bl	8005adc <__sfp>
 8005aac:	2200      	movs	r2, #0
 8005aae:	60e0      	str	r0, [r4, #12]
 8005ab0:	2104      	movs	r1, #4
 8005ab2:	6860      	ldr	r0, [r4, #4]
 8005ab4:	f7ff ff82 	bl	80059bc <std>
 8005ab8:	68a0      	ldr	r0, [r4, #8]
 8005aba:	2201      	movs	r2, #1
 8005abc:	2109      	movs	r1, #9
 8005abe:	f7ff ff7d 	bl	80059bc <std>
 8005ac2:	68e0      	ldr	r0, [r4, #12]
 8005ac4:	2202      	movs	r2, #2
 8005ac6:	2112      	movs	r1, #18
 8005ac8:	f7ff ff78 	bl	80059bc <std>
 8005acc:	2301      	movs	r3, #1
 8005ace:	61a3      	str	r3, [r4, #24]
 8005ad0:	e7d2      	b.n	8005a78 <__sinit+0xc>
 8005ad2:	bf00      	nop
 8005ad4:	080069a4 	.word	0x080069a4
 8005ad8:	08005a05 	.word	0x08005a05

08005adc <__sfp>:
 8005adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ade:	4607      	mov	r7, r0
 8005ae0:	f7ff ffac 	bl	8005a3c <__sfp_lock_acquire>
 8005ae4:	4b1e      	ldr	r3, [pc, #120]	; (8005b60 <__sfp+0x84>)
 8005ae6:	681e      	ldr	r6, [r3, #0]
 8005ae8:	69b3      	ldr	r3, [r6, #24]
 8005aea:	b913      	cbnz	r3, 8005af2 <__sfp+0x16>
 8005aec:	4630      	mov	r0, r6
 8005aee:	f7ff ffbd 	bl	8005a6c <__sinit>
 8005af2:	3648      	adds	r6, #72	; 0x48
 8005af4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005af8:	3b01      	subs	r3, #1
 8005afa:	d503      	bpl.n	8005b04 <__sfp+0x28>
 8005afc:	6833      	ldr	r3, [r6, #0]
 8005afe:	b30b      	cbz	r3, 8005b44 <__sfp+0x68>
 8005b00:	6836      	ldr	r6, [r6, #0]
 8005b02:	e7f7      	b.n	8005af4 <__sfp+0x18>
 8005b04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005b08:	b9d5      	cbnz	r5, 8005b40 <__sfp+0x64>
 8005b0a:	4b16      	ldr	r3, [pc, #88]	; (8005b64 <__sfp+0x88>)
 8005b0c:	60e3      	str	r3, [r4, #12]
 8005b0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b12:	6665      	str	r5, [r4, #100]	; 0x64
 8005b14:	f000 f859 	bl	8005bca <__retarget_lock_init_recursive>
 8005b18:	f7ff ff96 	bl	8005a48 <__sfp_lock_release>
 8005b1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005b20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005b24:	6025      	str	r5, [r4, #0]
 8005b26:	61a5      	str	r5, [r4, #24]
 8005b28:	2208      	movs	r2, #8
 8005b2a:	4629      	mov	r1, r5
 8005b2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005b30:	f7ff fee0 	bl	80058f4 <memset>
 8005b34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005b38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005b3c:	4620      	mov	r0, r4
 8005b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b40:	3468      	adds	r4, #104	; 0x68
 8005b42:	e7d9      	b.n	8005af8 <__sfp+0x1c>
 8005b44:	2104      	movs	r1, #4
 8005b46:	4638      	mov	r0, r7
 8005b48:	f7ff ff62 	bl	8005a10 <__sfmoreglue>
 8005b4c:	4604      	mov	r4, r0
 8005b4e:	6030      	str	r0, [r6, #0]
 8005b50:	2800      	cmp	r0, #0
 8005b52:	d1d5      	bne.n	8005b00 <__sfp+0x24>
 8005b54:	f7ff ff78 	bl	8005a48 <__sfp_lock_release>
 8005b58:	230c      	movs	r3, #12
 8005b5a:	603b      	str	r3, [r7, #0]
 8005b5c:	e7ee      	b.n	8005b3c <__sfp+0x60>
 8005b5e:	bf00      	nop
 8005b60:	080069a4 	.word	0x080069a4
 8005b64:	ffff0001 	.word	0xffff0001

08005b68 <fiprintf>:
 8005b68:	b40e      	push	{r1, r2, r3}
 8005b6a:	b503      	push	{r0, r1, lr}
 8005b6c:	4601      	mov	r1, r0
 8005b6e:	ab03      	add	r3, sp, #12
 8005b70:	4805      	ldr	r0, [pc, #20]	; (8005b88 <fiprintf+0x20>)
 8005b72:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b76:	6800      	ldr	r0, [r0, #0]
 8005b78:	9301      	str	r3, [sp, #4]
 8005b7a:	f000 f93b 	bl	8005df4 <_vfiprintf_r>
 8005b7e:	b002      	add	sp, #8
 8005b80:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b84:	b003      	add	sp, #12
 8005b86:	4770      	bx	lr
 8005b88:	20000018 	.word	0x20000018

08005b8c <_fwalk_reent>:
 8005b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b90:	4606      	mov	r6, r0
 8005b92:	4688      	mov	r8, r1
 8005b94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b98:	2700      	movs	r7, #0
 8005b9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b9e:	f1b9 0901 	subs.w	r9, r9, #1
 8005ba2:	d505      	bpl.n	8005bb0 <_fwalk_reent+0x24>
 8005ba4:	6824      	ldr	r4, [r4, #0]
 8005ba6:	2c00      	cmp	r4, #0
 8005ba8:	d1f7      	bne.n	8005b9a <_fwalk_reent+0xe>
 8005baa:	4638      	mov	r0, r7
 8005bac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bb0:	89ab      	ldrh	r3, [r5, #12]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d907      	bls.n	8005bc6 <_fwalk_reent+0x3a>
 8005bb6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	d003      	beq.n	8005bc6 <_fwalk_reent+0x3a>
 8005bbe:	4629      	mov	r1, r5
 8005bc0:	4630      	mov	r0, r6
 8005bc2:	47c0      	blx	r8
 8005bc4:	4307      	orrs	r7, r0
 8005bc6:	3568      	adds	r5, #104	; 0x68
 8005bc8:	e7e9      	b.n	8005b9e <_fwalk_reent+0x12>

08005bca <__retarget_lock_init_recursive>:
 8005bca:	4770      	bx	lr

08005bcc <__retarget_lock_acquire_recursive>:
 8005bcc:	4770      	bx	lr

08005bce <__retarget_lock_release_recursive>:
 8005bce:	4770      	bx	lr

08005bd0 <malloc>:
 8005bd0:	4b02      	ldr	r3, [pc, #8]	; (8005bdc <malloc+0xc>)
 8005bd2:	4601      	mov	r1, r0
 8005bd4:	6818      	ldr	r0, [r3, #0]
 8005bd6:	f000 b86f 	b.w	8005cb8 <_malloc_r>
 8005bda:	bf00      	nop
 8005bdc:	20000018 	.word	0x20000018

08005be0 <_free_r>:
 8005be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005be2:	2900      	cmp	r1, #0
 8005be4:	d044      	beq.n	8005c70 <_free_r+0x90>
 8005be6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bea:	9001      	str	r0, [sp, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f1a1 0404 	sub.w	r4, r1, #4
 8005bf2:	bfb8      	it	lt
 8005bf4:	18e4      	addlt	r4, r4, r3
 8005bf6:	f000 fe39 	bl	800686c <__malloc_lock>
 8005bfa:	4a1e      	ldr	r2, [pc, #120]	; (8005c74 <_free_r+0x94>)
 8005bfc:	9801      	ldr	r0, [sp, #4]
 8005bfe:	6813      	ldr	r3, [r2, #0]
 8005c00:	b933      	cbnz	r3, 8005c10 <_free_r+0x30>
 8005c02:	6063      	str	r3, [r4, #4]
 8005c04:	6014      	str	r4, [r2, #0]
 8005c06:	b003      	add	sp, #12
 8005c08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c0c:	f000 be34 	b.w	8006878 <__malloc_unlock>
 8005c10:	42a3      	cmp	r3, r4
 8005c12:	d908      	bls.n	8005c26 <_free_r+0x46>
 8005c14:	6825      	ldr	r5, [r4, #0]
 8005c16:	1961      	adds	r1, r4, r5
 8005c18:	428b      	cmp	r3, r1
 8005c1a:	bf01      	itttt	eq
 8005c1c:	6819      	ldreq	r1, [r3, #0]
 8005c1e:	685b      	ldreq	r3, [r3, #4]
 8005c20:	1949      	addeq	r1, r1, r5
 8005c22:	6021      	streq	r1, [r4, #0]
 8005c24:	e7ed      	b.n	8005c02 <_free_r+0x22>
 8005c26:	461a      	mov	r2, r3
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	b10b      	cbz	r3, 8005c30 <_free_r+0x50>
 8005c2c:	42a3      	cmp	r3, r4
 8005c2e:	d9fa      	bls.n	8005c26 <_free_r+0x46>
 8005c30:	6811      	ldr	r1, [r2, #0]
 8005c32:	1855      	adds	r5, r2, r1
 8005c34:	42a5      	cmp	r5, r4
 8005c36:	d10b      	bne.n	8005c50 <_free_r+0x70>
 8005c38:	6824      	ldr	r4, [r4, #0]
 8005c3a:	4421      	add	r1, r4
 8005c3c:	1854      	adds	r4, r2, r1
 8005c3e:	42a3      	cmp	r3, r4
 8005c40:	6011      	str	r1, [r2, #0]
 8005c42:	d1e0      	bne.n	8005c06 <_free_r+0x26>
 8005c44:	681c      	ldr	r4, [r3, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	6053      	str	r3, [r2, #4]
 8005c4a:	4421      	add	r1, r4
 8005c4c:	6011      	str	r1, [r2, #0]
 8005c4e:	e7da      	b.n	8005c06 <_free_r+0x26>
 8005c50:	d902      	bls.n	8005c58 <_free_r+0x78>
 8005c52:	230c      	movs	r3, #12
 8005c54:	6003      	str	r3, [r0, #0]
 8005c56:	e7d6      	b.n	8005c06 <_free_r+0x26>
 8005c58:	6825      	ldr	r5, [r4, #0]
 8005c5a:	1961      	adds	r1, r4, r5
 8005c5c:	428b      	cmp	r3, r1
 8005c5e:	bf04      	itt	eq
 8005c60:	6819      	ldreq	r1, [r3, #0]
 8005c62:	685b      	ldreq	r3, [r3, #4]
 8005c64:	6063      	str	r3, [r4, #4]
 8005c66:	bf04      	itt	eq
 8005c68:	1949      	addeq	r1, r1, r5
 8005c6a:	6021      	streq	r1, [r4, #0]
 8005c6c:	6054      	str	r4, [r2, #4]
 8005c6e:	e7ca      	b.n	8005c06 <_free_r+0x26>
 8005c70:	b003      	add	sp, #12
 8005c72:	bd30      	pop	{r4, r5, pc}
 8005c74:	20000404 	.word	0x20000404

08005c78 <sbrk_aligned>:
 8005c78:	b570      	push	{r4, r5, r6, lr}
 8005c7a:	4e0e      	ldr	r6, [pc, #56]	; (8005cb4 <sbrk_aligned+0x3c>)
 8005c7c:	460c      	mov	r4, r1
 8005c7e:	6831      	ldr	r1, [r6, #0]
 8005c80:	4605      	mov	r5, r0
 8005c82:	b911      	cbnz	r1, 8005c8a <sbrk_aligned+0x12>
 8005c84:	f000 fb7a 	bl	800637c <_sbrk_r>
 8005c88:	6030      	str	r0, [r6, #0]
 8005c8a:	4621      	mov	r1, r4
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	f000 fb75 	bl	800637c <_sbrk_r>
 8005c92:	1c43      	adds	r3, r0, #1
 8005c94:	d00a      	beq.n	8005cac <sbrk_aligned+0x34>
 8005c96:	1cc4      	adds	r4, r0, #3
 8005c98:	f024 0403 	bic.w	r4, r4, #3
 8005c9c:	42a0      	cmp	r0, r4
 8005c9e:	d007      	beq.n	8005cb0 <sbrk_aligned+0x38>
 8005ca0:	1a21      	subs	r1, r4, r0
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	f000 fb6a 	bl	800637c <_sbrk_r>
 8005ca8:	3001      	adds	r0, #1
 8005caa:	d101      	bne.n	8005cb0 <sbrk_aligned+0x38>
 8005cac:	f04f 34ff 	mov.w	r4, #4294967295
 8005cb0:	4620      	mov	r0, r4
 8005cb2:	bd70      	pop	{r4, r5, r6, pc}
 8005cb4:	20000408 	.word	0x20000408

08005cb8 <_malloc_r>:
 8005cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cbc:	1ccd      	adds	r5, r1, #3
 8005cbe:	f025 0503 	bic.w	r5, r5, #3
 8005cc2:	3508      	adds	r5, #8
 8005cc4:	2d0c      	cmp	r5, #12
 8005cc6:	bf38      	it	cc
 8005cc8:	250c      	movcc	r5, #12
 8005cca:	2d00      	cmp	r5, #0
 8005ccc:	4607      	mov	r7, r0
 8005cce:	db01      	blt.n	8005cd4 <_malloc_r+0x1c>
 8005cd0:	42a9      	cmp	r1, r5
 8005cd2:	d905      	bls.n	8005ce0 <_malloc_r+0x28>
 8005cd4:	230c      	movs	r3, #12
 8005cd6:	603b      	str	r3, [r7, #0]
 8005cd8:	2600      	movs	r6, #0
 8005cda:	4630      	mov	r0, r6
 8005cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ce0:	4e2e      	ldr	r6, [pc, #184]	; (8005d9c <_malloc_r+0xe4>)
 8005ce2:	f000 fdc3 	bl	800686c <__malloc_lock>
 8005ce6:	6833      	ldr	r3, [r6, #0]
 8005ce8:	461c      	mov	r4, r3
 8005cea:	bb34      	cbnz	r4, 8005d3a <_malloc_r+0x82>
 8005cec:	4629      	mov	r1, r5
 8005cee:	4638      	mov	r0, r7
 8005cf0:	f7ff ffc2 	bl	8005c78 <sbrk_aligned>
 8005cf4:	1c43      	adds	r3, r0, #1
 8005cf6:	4604      	mov	r4, r0
 8005cf8:	d14d      	bne.n	8005d96 <_malloc_r+0xde>
 8005cfa:	6834      	ldr	r4, [r6, #0]
 8005cfc:	4626      	mov	r6, r4
 8005cfe:	2e00      	cmp	r6, #0
 8005d00:	d140      	bne.n	8005d84 <_malloc_r+0xcc>
 8005d02:	6823      	ldr	r3, [r4, #0]
 8005d04:	4631      	mov	r1, r6
 8005d06:	4638      	mov	r0, r7
 8005d08:	eb04 0803 	add.w	r8, r4, r3
 8005d0c:	f000 fb36 	bl	800637c <_sbrk_r>
 8005d10:	4580      	cmp	r8, r0
 8005d12:	d13a      	bne.n	8005d8a <_malloc_r+0xd2>
 8005d14:	6821      	ldr	r1, [r4, #0]
 8005d16:	3503      	adds	r5, #3
 8005d18:	1a6d      	subs	r5, r5, r1
 8005d1a:	f025 0503 	bic.w	r5, r5, #3
 8005d1e:	3508      	adds	r5, #8
 8005d20:	2d0c      	cmp	r5, #12
 8005d22:	bf38      	it	cc
 8005d24:	250c      	movcc	r5, #12
 8005d26:	4629      	mov	r1, r5
 8005d28:	4638      	mov	r0, r7
 8005d2a:	f7ff ffa5 	bl	8005c78 <sbrk_aligned>
 8005d2e:	3001      	adds	r0, #1
 8005d30:	d02b      	beq.n	8005d8a <_malloc_r+0xd2>
 8005d32:	6823      	ldr	r3, [r4, #0]
 8005d34:	442b      	add	r3, r5
 8005d36:	6023      	str	r3, [r4, #0]
 8005d38:	e00e      	b.n	8005d58 <_malloc_r+0xa0>
 8005d3a:	6822      	ldr	r2, [r4, #0]
 8005d3c:	1b52      	subs	r2, r2, r5
 8005d3e:	d41e      	bmi.n	8005d7e <_malloc_r+0xc6>
 8005d40:	2a0b      	cmp	r2, #11
 8005d42:	d916      	bls.n	8005d72 <_malloc_r+0xba>
 8005d44:	1961      	adds	r1, r4, r5
 8005d46:	42a3      	cmp	r3, r4
 8005d48:	6025      	str	r5, [r4, #0]
 8005d4a:	bf18      	it	ne
 8005d4c:	6059      	strne	r1, [r3, #4]
 8005d4e:	6863      	ldr	r3, [r4, #4]
 8005d50:	bf08      	it	eq
 8005d52:	6031      	streq	r1, [r6, #0]
 8005d54:	5162      	str	r2, [r4, r5]
 8005d56:	604b      	str	r3, [r1, #4]
 8005d58:	4638      	mov	r0, r7
 8005d5a:	f104 060b 	add.w	r6, r4, #11
 8005d5e:	f000 fd8b 	bl	8006878 <__malloc_unlock>
 8005d62:	f026 0607 	bic.w	r6, r6, #7
 8005d66:	1d23      	adds	r3, r4, #4
 8005d68:	1af2      	subs	r2, r6, r3
 8005d6a:	d0b6      	beq.n	8005cda <_malloc_r+0x22>
 8005d6c:	1b9b      	subs	r3, r3, r6
 8005d6e:	50a3      	str	r3, [r4, r2]
 8005d70:	e7b3      	b.n	8005cda <_malloc_r+0x22>
 8005d72:	6862      	ldr	r2, [r4, #4]
 8005d74:	42a3      	cmp	r3, r4
 8005d76:	bf0c      	ite	eq
 8005d78:	6032      	streq	r2, [r6, #0]
 8005d7a:	605a      	strne	r2, [r3, #4]
 8005d7c:	e7ec      	b.n	8005d58 <_malloc_r+0xa0>
 8005d7e:	4623      	mov	r3, r4
 8005d80:	6864      	ldr	r4, [r4, #4]
 8005d82:	e7b2      	b.n	8005cea <_malloc_r+0x32>
 8005d84:	4634      	mov	r4, r6
 8005d86:	6876      	ldr	r6, [r6, #4]
 8005d88:	e7b9      	b.n	8005cfe <_malloc_r+0x46>
 8005d8a:	230c      	movs	r3, #12
 8005d8c:	603b      	str	r3, [r7, #0]
 8005d8e:	4638      	mov	r0, r7
 8005d90:	f000 fd72 	bl	8006878 <__malloc_unlock>
 8005d94:	e7a1      	b.n	8005cda <_malloc_r+0x22>
 8005d96:	6025      	str	r5, [r4, #0]
 8005d98:	e7de      	b.n	8005d58 <_malloc_r+0xa0>
 8005d9a:	bf00      	nop
 8005d9c:	20000404 	.word	0x20000404

08005da0 <__sfputc_r>:
 8005da0:	6893      	ldr	r3, [r2, #8]
 8005da2:	3b01      	subs	r3, #1
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	b410      	push	{r4}
 8005da8:	6093      	str	r3, [r2, #8]
 8005daa:	da08      	bge.n	8005dbe <__sfputc_r+0x1e>
 8005dac:	6994      	ldr	r4, [r2, #24]
 8005dae:	42a3      	cmp	r3, r4
 8005db0:	db01      	blt.n	8005db6 <__sfputc_r+0x16>
 8005db2:	290a      	cmp	r1, #10
 8005db4:	d103      	bne.n	8005dbe <__sfputc_r+0x1e>
 8005db6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dba:	f000 bb33 	b.w	8006424 <__swbuf_r>
 8005dbe:	6813      	ldr	r3, [r2, #0]
 8005dc0:	1c58      	adds	r0, r3, #1
 8005dc2:	6010      	str	r0, [r2, #0]
 8005dc4:	7019      	strb	r1, [r3, #0]
 8005dc6:	4608      	mov	r0, r1
 8005dc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <__sfputs_r>:
 8005dce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dd0:	4606      	mov	r6, r0
 8005dd2:	460f      	mov	r7, r1
 8005dd4:	4614      	mov	r4, r2
 8005dd6:	18d5      	adds	r5, r2, r3
 8005dd8:	42ac      	cmp	r4, r5
 8005dda:	d101      	bne.n	8005de0 <__sfputs_r+0x12>
 8005ddc:	2000      	movs	r0, #0
 8005dde:	e007      	b.n	8005df0 <__sfputs_r+0x22>
 8005de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005de4:	463a      	mov	r2, r7
 8005de6:	4630      	mov	r0, r6
 8005de8:	f7ff ffda 	bl	8005da0 <__sfputc_r>
 8005dec:	1c43      	adds	r3, r0, #1
 8005dee:	d1f3      	bne.n	8005dd8 <__sfputs_r+0xa>
 8005df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005df4 <_vfiprintf_r>:
 8005df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df8:	460d      	mov	r5, r1
 8005dfa:	b09d      	sub	sp, #116	; 0x74
 8005dfc:	4614      	mov	r4, r2
 8005dfe:	4698      	mov	r8, r3
 8005e00:	4606      	mov	r6, r0
 8005e02:	b118      	cbz	r0, 8005e0c <_vfiprintf_r+0x18>
 8005e04:	6983      	ldr	r3, [r0, #24]
 8005e06:	b90b      	cbnz	r3, 8005e0c <_vfiprintf_r+0x18>
 8005e08:	f7ff fe30 	bl	8005a6c <__sinit>
 8005e0c:	4b89      	ldr	r3, [pc, #548]	; (8006034 <_vfiprintf_r+0x240>)
 8005e0e:	429d      	cmp	r5, r3
 8005e10:	d11b      	bne.n	8005e4a <_vfiprintf_r+0x56>
 8005e12:	6875      	ldr	r5, [r6, #4]
 8005e14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e16:	07d9      	lsls	r1, r3, #31
 8005e18:	d405      	bmi.n	8005e26 <_vfiprintf_r+0x32>
 8005e1a:	89ab      	ldrh	r3, [r5, #12]
 8005e1c:	059a      	lsls	r2, r3, #22
 8005e1e:	d402      	bmi.n	8005e26 <_vfiprintf_r+0x32>
 8005e20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e22:	f7ff fed3 	bl	8005bcc <__retarget_lock_acquire_recursive>
 8005e26:	89ab      	ldrh	r3, [r5, #12]
 8005e28:	071b      	lsls	r3, r3, #28
 8005e2a:	d501      	bpl.n	8005e30 <_vfiprintf_r+0x3c>
 8005e2c:	692b      	ldr	r3, [r5, #16]
 8005e2e:	b9eb      	cbnz	r3, 8005e6c <_vfiprintf_r+0x78>
 8005e30:	4629      	mov	r1, r5
 8005e32:	4630      	mov	r0, r6
 8005e34:	f000 fb5a 	bl	80064ec <__swsetup_r>
 8005e38:	b1c0      	cbz	r0, 8005e6c <_vfiprintf_r+0x78>
 8005e3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e3c:	07dc      	lsls	r4, r3, #31
 8005e3e:	d50e      	bpl.n	8005e5e <_vfiprintf_r+0x6a>
 8005e40:	f04f 30ff 	mov.w	r0, #4294967295
 8005e44:	b01d      	add	sp, #116	; 0x74
 8005e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e4a:	4b7b      	ldr	r3, [pc, #492]	; (8006038 <_vfiprintf_r+0x244>)
 8005e4c:	429d      	cmp	r5, r3
 8005e4e:	d101      	bne.n	8005e54 <_vfiprintf_r+0x60>
 8005e50:	68b5      	ldr	r5, [r6, #8]
 8005e52:	e7df      	b.n	8005e14 <_vfiprintf_r+0x20>
 8005e54:	4b79      	ldr	r3, [pc, #484]	; (800603c <_vfiprintf_r+0x248>)
 8005e56:	429d      	cmp	r5, r3
 8005e58:	bf08      	it	eq
 8005e5a:	68f5      	ldreq	r5, [r6, #12]
 8005e5c:	e7da      	b.n	8005e14 <_vfiprintf_r+0x20>
 8005e5e:	89ab      	ldrh	r3, [r5, #12]
 8005e60:	0598      	lsls	r0, r3, #22
 8005e62:	d4ed      	bmi.n	8005e40 <_vfiprintf_r+0x4c>
 8005e64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e66:	f7ff feb2 	bl	8005bce <__retarget_lock_release_recursive>
 8005e6a:	e7e9      	b.n	8005e40 <_vfiprintf_r+0x4c>
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e70:	2320      	movs	r3, #32
 8005e72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e76:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e7a:	2330      	movs	r3, #48	; 0x30
 8005e7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006040 <_vfiprintf_r+0x24c>
 8005e80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e84:	f04f 0901 	mov.w	r9, #1
 8005e88:	4623      	mov	r3, r4
 8005e8a:	469a      	mov	sl, r3
 8005e8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e90:	b10a      	cbz	r2, 8005e96 <_vfiprintf_r+0xa2>
 8005e92:	2a25      	cmp	r2, #37	; 0x25
 8005e94:	d1f9      	bne.n	8005e8a <_vfiprintf_r+0x96>
 8005e96:	ebba 0b04 	subs.w	fp, sl, r4
 8005e9a:	d00b      	beq.n	8005eb4 <_vfiprintf_r+0xc0>
 8005e9c:	465b      	mov	r3, fp
 8005e9e:	4622      	mov	r2, r4
 8005ea0:	4629      	mov	r1, r5
 8005ea2:	4630      	mov	r0, r6
 8005ea4:	f7ff ff93 	bl	8005dce <__sfputs_r>
 8005ea8:	3001      	adds	r0, #1
 8005eaa:	f000 80aa 	beq.w	8006002 <_vfiprintf_r+0x20e>
 8005eae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005eb0:	445a      	add	r2, fp
 8005eb2:	9209      	str	r2, [sp, #36]	; 0x24
 8005eb4:	f89a 3000 	ldrb.w	r3, [sl]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f000 80a2 	beq.w	8006002 <_vfiprintf_r+0x20e>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ec8:	f10a 0a01 	add.w	sl, sl, #1
 8005ecc:	9304      	str	r3, [sp, #16]
 8005ece:	9307      	str	r3, [sp, #28]
 8005ed0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ed4:	931a      	str	r3, [sp, #104]	; 0x68
 8005ed6:	4654      	mov	r4, sl
 8005ed8:	2205      	movs	r2, #5
 8005eda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ede:	4858      	ldr	r0, [pc, #352]	; (8006040 <_vfiprintf_r+0x24c>)
 8005ee0:	f7fa f97e 	bl	80001e0 <memchr>
 8005ee4:	9a04      	ldr	r2, [sp, #16]
 8005ee6:	b9d8      	cbnz	r0, 8005f20 <_vfiprintf_r+0x12c>
 8005ee8:	06d1      	lsls	r1, r2, #27
 8005eea:	bf44      	itt	mi
 8005eec:	2320      	movmi	r3, #32
 8005eee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ef2:	0713      	lsls	r3, r2, #28
 8005ef4:	bf44      	itt	mi
 8005ef6:	232b      	movmi	r3, #43	; 0x2b
 8005ef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005efc:	f89a 3000 	ldrb.w	r3, [sl]
 8005f00:	2b2a      	cmp	r3, #42	; 0x2a
 8005f02:	d015      	beq.n	8005f30 <_vfiprintf_r+0x13c>
 8005f04:	9a07      	ldr	r2, [sp, #28]
 8005f06:	4654      	mov	r4, sl
 8005f08:	2000      	movs	r0, #0
 8005f0a:	f04f 0c0a 	mov.w	ip, #10
 8005f0e:	4621      	mov	r1, r4
 8005f10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f14:	3b30      	subs	r3, #48	; 0x30
 8005f16:	2b09      	cmp	r3, #9
 8005f18:	d94e      	bls.n	8005fb8 <_vfiprintf_r+0x1c4>
 8005f1a:	b1b0      	cbz	r0, 8005f4a <_vfiprintf_r+0x156>
 8005f1c:	9207      	str	r2, [sp, #28]
 8005f1e:	e014      	b.n	8005f4a <_vfiprintf_r+0x156>
 8005f20:	eba0 0308 	sub.w	r3, r0, r8
 8005f24:	fa09 f303 	lsl.w	r3, r9, r3
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	9304      	str	r3, [sp, #16]
 8005f2c:	46a2      	mov	sl, r4
 8005f2e:	e7d2      	b.n	8005ed6 <_vfiprintf_r+0xe2>
 8005f30:	9b03      	ldr	r3, [sp, #12]
 8005f32:	1d19      	adds	r1, r3, #4
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	9103      	str	r1, [sp, #12]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	bfbb      	ittet	lt
 8005f3c:	425b      	neglt	r3, r3
 8005f3e:	f042 0202 	orrlt.w	r2, r2, #2
 8005f42:	9307      	strge	r3, [sp, #28]
 8005f44:	9307      	strlt	r3, [sp, #28]
 8005f46:	bfb8      	it	lt
 8005f48:	9204      	strlt	r2, [sp, #16]
 8005f4a:	7823      	ldrb	r3, [r4, #0]
 8005f4c:	2b2e      	cmp	r3, #46	; 0x2e
 8005f4e:	d10c      	bne.n	8005f6a <_vfiprintf_r+0x176>
 8005f50:	7863      	ldrb	r3, [r4, #1]
 8005f52:	2b2a      	cmp	r3, #42	; 0x2a
 8005f54:	d135      	bne.n	8005fc2 <_vfiprintf_r+0x1ce>
 8005f56:	9b03      	ldr	r3, [sp, #12]
 8005f58:	1d1a      	adds	r2, r3, #4
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	9203      	str	r2, [sp, #12]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	bfb8      	it	lt
 8005f62:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f66:	3402      	adds	r4, #2
 8005f68:	9305      	str	r3, [sp, #20]
 8005f6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006050 <_vfiprintf_r+0x25c>
 8005f6e:	7821      	ldrb	r1, [r4, #0]
 8005f70:	2203      	movs	r2, #3
 8005f72:	4650      	mov	r0, sl
 8005f74:	f7fa f934 	bl	80001e0 <memchr>
 8005f78:	b140      	cbz	r0, 8005f8c <_vfiprintf_r+0x198>
 8005f7a:	2340      	movs	r3, #64	; 0x40
 8005f7c:	eba0 000a 	sub.w	r0, r0, sl
 8005f80:	fa03 f000 	lsl.w	r0, r3, r0
 8005f84:	9b04      	ldr	r3, [sp, #16]
 8005f86:	4303      	orrs	r3, r0
 8005f88:	3401      	adds	r4, #1
 8005f8a:	9304      	str	r3, [sp, #16]
 8005f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f90:	482c      	ldr	r0, [pc, #176]	; (8006044 <_vfiprintf_r+0x250>)
 8005f92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f96:	2206      	movs	r2, #6
 8005f98:	f7fa f922 	bl	80001e0 <memchr>
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	d03f      	beq.n	8006020 <_vfiprintf_r+0x22c>
 8005fa0:	4b29      	ldr	r3, [pc, #164]	; (8006048 <_vfiprintf_r+0x254>)
 8005fa2:	bb1b      	cbnz	r3, 8005fec <_vfiprintf_r+0x1f8>
 8005fa4:	9b03      	ldr	r3, [sp, #12]
 8005fa6:	3307      	adds	r3, #7
 8005fa8:	f023 0307 	bic.w	r3, r3, #7
 8005fac:	3308      	adds	r3, #8
 8005fae:	9303      	str	r3, [sp, #12]
 8005fb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fb2:	443b      	add	r3, r7
 8005fb4:	9309      	str	r3, [sp, #36]	; 0x24
 8005fb6:	e767      	b.n	8005e88 <_vfiprintf_r+0x94>
 8005fb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fbc:	460c      	mov	r4, r1
 8005fbe:	2001      	movs	r0, #1
 8005fc0:	e7a5      	b.n	8005f0e <_vfiprintf_r+0x11a>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	3401      	adds	r4, #1
 8005fc6:	9305      	str	r3, [sp, #20]
 8005fc8:	4619      	mov	r1, r3
 8005fca:	f04f 0c0a 	mov.w	ip, #10
 8005fce:	4620      	mov	r0, r4
 8005fd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fd4:	3a30      	subs	r2, #48	; 0x30
 8005fd6:	2a09      	cmp	r2, #9
 8005fd8:	d903      	bls.n	8005fe2 <_vfiprintf_r+0x1ee>
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d0c5      	beq.n	8005f6a <_vfiprintf_r+0x176>
 8005fde:	9105      	str	r1, [sp, #20]
 8005fe0:	e7c3      	b.n	8005f6a <_vfiprintf_r+0x176>
 8005fe2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fe6:	4604      	mov	r4, r0
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e7f0      	b.n	8005fce <_vfiprintf_r+0x1da>
 8005fec:	ab03      	add	r3, sp, #12
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	462a      	mov	r2, r5
 8005ff2:	4b16      	ldr	r3, [pc, #88]	; (800604c <_vfiprintf_r+0x258>)
 8005ff4:	a904      	add	r1, sp, #16
 8005ff6:	4630      	mov	r0, r6
 8005ff8:	f3af 8000 	nop.w
 8005ffc:	4607      	mov	r7, r0
 8005ffe:	1c78      	adds	r0, r7, #1
 8006000:	d1d6      	bne.n	8005fb0 <_vfiprintf_r+0x1bc>
 8006002:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006004:	07d9      	lsls	r1, r3, #31
 8006006:	d405      	bmi.n	8006014 <_vfiprintf_r+0x220>
 8006008:	89ab      	ldrh	r3, [r5, #12]
 800600a:	059a      	lsls	r2, r3, #22
 800600c:	d402      	bmi.n	8006014 <_vfiprintf_r+0x220>
 800600e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006010:	f7ff fddd 	bl	8005bce <__retarget_lock_release_recursive>
 8006014:	89ab      	ldrh	r3, [r5, #12]
 8006016:	065b      	lsls	r3, r3, #25
 8006018:	f53f af12 	bmi.w	8005e40 <_vfiprintf_r+0x4c>
 800601c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800601e:	e711      	b.n	8005e44 <_vfiprintf_r+0x50>
 8006020:	ab03      	add	r3, sp, #12
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	462a      	mov	r2, r5
 8006026:	4b09      	ldr	r3, [pc, #36]	; (800604c <_vfiprintf_r+0x258>)
 8006028:	a904      	add	r1, sp, #16
 800602a:	4630      	mov	r0, r6
 800602c:	f000 f880 	bl	8006130 <_printf_i>
 8006030:	e7e4      	b.n	8005ffc <_vfiprintf_r+0x208>
 8006032:	bf00      	nop
 8006034:	08006a78 	.word	0x08006a78
 8006038:	08006a98 	.word	0x08006a98
 800603c:	08006a58 	.word	0x08006a58
 8006040:	08006ab8 	.word	0x08006ab8
 8006044:	08006ac2 	.word	0x08006ac2
 8006048:	00000000 	.word	0x00000000
 800604c:	08005dcf 	.word	0x08005dcf
 8006050:	08006abe 	.word	0x08006abe

08006054 <_printf_common>:
 8006054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006058:	4616      	mov	r6, r2
 800605a:	4699      	mov	r9, r3
 800605c:	688a      	ldr	r2, [r1, #8]
 800605e:	690b      	ldr	r3, [r1, #16]
 8006060:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006064:	4293      	cmp	r3, r2
 8006066:	bfb8      	it	lt
 8006068:	4613      	movlt	r3, r2
 800606a:	6033      	str	r3, [r6, #0]
 800606c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006070:	4607      	mov	r7, r0
 8006072:	460c      	mov	r4, r1
 8006074:	b10a      	cbz	r2, 800607a <_printf_common+0x26>
 8006076:	3301      	adds	r3, #1
 8006078:	6033      	str	r3, [r6, #0]
 800607a:	6823      	ldr	r3, [r4, #0]
 800607c:	0699      	lsls	r1, r3, #26
 800607e:	bf42      	ittt	mi
 8006080:	6833      	ldrmi	r3, [r6, #0]
 8006082:	3302      	addmi	r3, #2
 8006084:	6033      	strmi	r3, [r6, #0]
 8006086:	6825      	ldr	r5, [r4, #0]
 8006088:	f015 0506 	ands.w	r5, r5, #6
 800608c:	d106      	bne.n	800609c <_printf_common+0x48>
 800608e:	f104 0a19 	add.w	sl, r4, #25
 8006092:	68e3      	ldr	r3, [r4, #12]
 8006094:	6832      	ldr	r2, [r6, #0]
 8006096:	1a9b      	subs	r3, r3, r2
 8006098:	42ab      	cmp	r3, r5
 800609a:	dc26      	bgt.n	80060ea <_printf_common+0x96>
 800609c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060a0:	1e13      	subs	r3, r2, #0
 80060a2:	6822      	ldr	r2, [r4, #0]
 80060a4:	bf18      	it	ne
 80060a6:	2301      	movne	r3, #1
 80060a8:	0692      	lsls	r2, r2, #26
 80060aa:	d42b      	bmi.n	8006104 <_printf_common+0xb0>
 80060ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060b0:	4649      	mov	r1, r9
 80060b2:	4638      	mov	r0, r7
 80060b4:	47c0      	blx	r8
 80060b6:	3001      	adds	r0, #1
 80060b8:	d01e      	beq.n	80060f8 <_printf_common+0xa4>
 80060ba:	6823      	ldr	r3, [r4, #0]
 80060bc:	68e5      	ldr	r5, [r4, #12]
 80060be:	6832      	ldr	r2, [r6, #0]
 80060c0:	f003 0306 	and.w	r3, r3, #6
 80060c4:	2b04      	cmp	r3, #4
 80060c6:	bf08      	it	eq
 80060c8:	1aad      	subeq	r5, r5, r2
 80060ca:	68a3      	ldr	r3, [r4, #8]
 80060cc:	6922      	ldr	r2, [r4, #16]
 80060ce:	bf0c      	ite	eq
 80060d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060d4:	2500      	movne	r5, #0
 80060d6:	4293      	cmp	r3, r2
 80060d8:	bfc4      	itt	gt
 80060da:	1a9b      	subgt	r3, r3, r2
 80060dc:	18ed      	addgt	r5, r5, r3
 80060de:	2600      	movs	r6, #0
 80060e0:	341a      	adds	r4, #26
 80060e2:	42b5      	cmp	r5, r6
 80060e4:	d11a      	bne.n	800611c <_printf_common+0xc8>
 80060e6:	2000      	movs	r0, #0
 80060e8:	e008      	b.n	80060fc <_printf_common+0xa8>
 80060ea:	2301      	movs	r3, #1
 80060ec:	4652      	mov	r2, sl
 80060ee:	4649      	mov	r1, r9
 80060f0:	4638      	mov	r0, r7
 80060f2:	47c0      	blx	r8
 80060f4:	3001      	adds	r0, #1
 80060f6:	d103      	bne.n	8006100 <_printf_common+0xac>
 80060f8:	f04f 30ff 	mov.w	r0, #4294967295
 80060fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006100:	3501      	adds	r5, #1
 8006102:	e7c6      	b.n	8006092 <_printf_common+0x3e>
 8006104:	18e1      	adds	r1, r4, r3
 8006106:	1c5a      	adds	r2, r3, #1
 8006108:	2030      	movs	r0, #48	; 0x30
 800610a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800610e:	4422      	add	r2, r4
 8006110:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006114:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006118:	3302      	adds	r3, #2
 800611a:	e7c7      	b.n	80060ac <_printf_common+0x58>
 800611c:	2301      	movs	r3, #1
 800611e:	4622      	mov	r2, r4
 8006120:	4649      	mov	r1, r9
 8006122:	4638      	mov	r0, r7
 8006124:	47c0      	blx	r8
 8006126:	3001      	adds	r0, #1
 8006128:	d0e6      	beq.n	80060f8 <_printf_common+0xa4>
 800612a:	3601      	adds	r6, #1
 800612c:	e7d9      	b.n	80060e2 <_printf_common+0x8e>
	...

08006130 <_printf_i>:
 8006130:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006134:	7e0f      	ldrb	r7, [r1, #24]
 8006136:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006138:	2f78      	cmp	r7, #120	; 0x78
 800613a:	4691      	mov	r9, r2
 800613c:	4680      	mov	r8, r0
 800613e:	460c      	mov	r4, r1
 8006140:	469a      	mov	sl, r3
 8006142:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006146:	d807      	bhi.n	8006158 <_printf_i+0x28>
 8006148:	2f62      	cmp	r7, #98	; 0x62
 800614a:	d80a      	bhi.n	8006162 <_printf_i+0x32>
 800614c:	2f00      	cmp	r7, #0
 800614e:	f000 80d8 	beq.w	8006302 <_printf_i+0x1d2>
 8006152:	2f58      	cmp	r7, #88	; 0x58
 8006154:	f000 80a3 	beq.w	800629e <_printf_i+0x16e>
 8006158:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800615c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006160:	e03a      	b.n	80061d8 <_printf_i+0xa8>
 8006162:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006166:	2b15      	cmp	r3, #21
 8006168:	d8f6      	bhi.n	8006158 <_printf_i+0x28>
 800616a:	a101      	add	r1, pc, #4	; (adr r1, 8006170 <_printf_i+0x40>)
 800616c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006170:	080061c9 	.word	0x080061c9
 8006174:	080061dd 	.word	0x080061dd
 8006178:	08006159 	.word	0x08006159
 800617c:	08006159 	.word	0x08006159
 8006180:	08006159 	.word	0x08006159
 8006184:	08006159 	.word	0x08006159
 8006188:	080061dd 	.word	0x080061dd
 800618c:	08006159 	.word	0x08006159
 8006190:	08006159 	.word	0x08006159
 8006194:	08006159 	.word	0x08006159
 8006198:	08006159 	.word	0x08006159
 800619c:	080062e9 	.word	0x080062e9
 80061a0:	0800620d 	.word	0x0800620d
 80061a4:	080062cb 	.word	0x080062cb
 80061a8:	08006159 	.word	0x08006159
 80061ac:	08006159 	.word	0x08006159
 80061b0:	0800630b 	.word	0x0800630b
 80061b4:	08006159 	.word	0x08006159
 80061b8:	0800620d 	.word	0x0800620d
 80061bc:	08006159 	.word	0x08006159
 80061c0:	08006159 	.word	0x08006159
 80061c4:	080062d3 	.word	0x080062d3
 80061c8:	682b      	ldr	r3, [r5, #0]
 80061ca:	1d1a      	adds	r2, r3, #4
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	602a      	str	r2, [r5, #0]
 80061d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061d8:	2301      	movs	r3, #1
 80061da:	e0a3      	b.n	8006324 <_printf_i+0x1f4>
 80061dc:	6820      	ldr	r0, [r4, #0]
 80061de:	6829      	ldr	r1, [r5, #0]
 80061e0:	0606      	lsls	r6, r0, #24
 80061e2:	f101 0304 	add.w	r3, r1, #4
 80061e6:	d50a      	bpl.n	80061fe <_printf_i+0xce>
 80061e8:	680e      	ldr	r6, [r1, #0]
 80061ea:	602b      	str	r3, [r5, #0]
 80061ec:	2e00      	cmp	r6, #0
 80061ee:	da03      	bge.n	80061f8 <_printf_i+0xc8>
 80061f0:	232d      	movs	r3, #45	; 0x2d
 80061f2:	4276      	negs	r6, r6
 80061f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061f8:	485e      	ldr	r0, [pc, #376]	; (8006374 <_printf_i+0x244>)
 80061fa:	230a      	movs	r3, #10
 80061fc:	e019      	b.n	8006232 <_printf_i+0x102>
 80061fe:	680e      	ldr	r6, [r1, #0]
 8006200:	602b      	str	r3, [r5, #0]
 8006202:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006206:	bf18      	it	ne
 8006208:	b236      	sxthne	r6, r6
 800620a:	e7ef      	b.n	80061ec <_printf_i+0xbc>
 800620c:	682b      	ldr	r3, [r5, #0]
 800620e:	6820      	ldr	r0, [r4, #0]
 8006210:	1d19      	adds	r1, r3, #4
 8006212:	6029      	str	r1, [r5, #0]
 8006214:	0601      	lsls	r1, r0, #24
 8006216:	d501      	bpl.n	800621c <_printf_i+0xec>
 8006218:	681e      	ldr	r6, [r3, #0]
 800621a:	e002      	b.n	8006222 <_printf_i+0xf2>
 800621c:	0646      	lsls	r6, r0, #25
 800621e:	d5fb      	bpl.n	8006218 <_printf_i+0xe8>
 8006220:	881e      	ldrh	r6, [r3, #0]
 8006222:	4854      	ldr	r0, [pc, #336]	; (8006374 <_printf_i+0x244>)
 8006224:	2f6f      	cmp	r7, #111	; 0x6f
 8006226:	bf0c      	ite	eq
 8006228:	2308      	moveq	r3, #8
 800622a:	230a      	movne	r3, #10
 800622c:	2100      	movs	r1, #0
 800622e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006232:	6865      	ldr	r5, [r4, #4]
 8006234:	60a5      	str	r5, [r4, #8]
 8006236:	2d00      	cmp	r5, #0
 8006238:	bfa2      	ittt	ge
 800623a:	6821      	ldrge	r1, [r4, #0]
 800623c:	f021 0104 	bicge.w	r1, r1, #4
 8006240:	6021      	strge	r1, [r4, #0]
 8006242:	b90e      	cbnz	r6, 8006248 <_printf_i+0x118>
 8006244:	2d00      	cmp	r5, #0
 8006246:	d04d      	beq.n	80062e4 <_printf_i+0x1b4>
 8006248:	4615      	mov	r5, r2
 800624a:	fbb6 f1f3 	udiv	r1, r6, r3
 800624e:	fb03 6711 	mls	r7, r3, r1, r6
 8006252:	5dc7      	ldrb	r7, [r0, r7]
 8006254:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006258:	4637      	mov	r7, r6
 800625a:	42bb      	cmp	r3, r7
 800625c:	460e      	mov	r6, r1
 800625e:	d9f4      	bls.n	800624a <_printf_i+0x11a>
 8006260:	2b08      	cmp	r3, #8
 8006262:	d10b      	bne.n	800627c <_printf_i+0x14c>
 8006264:	6823      	ldr	r3, [r4, #0]
 8006266:	07de      	lsls	r6, r3, #31
 8006268:	d508      	bpl.n	800627c <_printf_i+0x14c>
 800626a:	6923      	ldr	r3, [r4, #16]
 800626c:	6861      	ldr	r1, [r4, #4]
 800626e:	4299      	cmp	r1, r3
 8006270:	bfde      	ittt	le
 8006272:	2330      	movle	r3, #48	; 0x30
 8006274:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006278:	f105 35ff 	addle.w	r5, r5, #4294967295
 800627c:	1b52      	subs	r2, r2, r5
 800627e:	6122      	str	r2, [r4, #16]
 8006280:	f8cd a000 	str.w	sl, [sp]
 8006284:	464b      	mov	r3, r9
 8006286:	aa03      	add	r2, sp, #12
 8006288:	4621      	mov	r1, r4
 800628a:	4640      	mov	r0, r8
 800628c:	f7ff fee2 	bl	8006054 <_printf_common>
 8006290:	3001      	adds	r0, #1
 8006292:	d14c      	bne.n	800632e <_printf_i+0x1fe>
 8006294:	f04f 30ff 	mov.w	r0, #4294967295
 8006298:	b004      	add	sp, #16
 800629a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800629e:	4835      	ldr	r0, [pc, #212]	; (8006374 <_printf_i+0x244>)
 80062a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80062a4:	6829      	ldr	r1, [r5, #0]
 80062a6:	6823      	ldr	r3, [r4, #0]
 80062a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80062ac:	6029      	str	r1, [r5, #0]
 80062ae:	061d      	lsls	r5, r3, #24
 80062b0:	d514      	bpl.n	80062dc <_printf_i+0x1ac>
 80062b2:	07df      	lsls	r7, r3, #31
 80062b4:	bf44      	itt	mi
 80062b6:	f043 0320 	orrmi.w	r3, r3, #32
 80062ba:	6023      	strmi	r3, [r4, #0]
 80062bc:	b91e      	cbnz	r6, 80062c6 <_printf_i+0x196>
 80062be:	6823      	ldr	r3, [r4, #0]
 80062c0:	f023 0320 	bic.w	r3, r3, #32
 80062c4:	6023      	str	r3, [r4, #0]
 80062c6:	2310      	movs	r3, #16
 80062c8:	e7b0      	b.n	800622c <_printf_i+0xfc>
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	f043 0320 	orr.w	r3, r3, #32
 80062d0:	6023      	str	r3, [r4, #0]
 80062d2:	2378      	movs	r3, #120	; 0x78
 80062d4:	4828      	ldr	r0, [pc, #160]	; (8006378 <_printf_i+0x248>)
 80062d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062da:	e7e3      	b.n	80062a4 <_printf_i+0x174>
 80062dc:	0659      	lsls	r1, r3, #25
 80062de:	bf48      	it	mi
 80062e0:	b2b6      	uxthmi	r6, r6
 80062e2:	e7e6      	b.n	80062b2 <_printf_i+0x182>
 80062e4:	4615      	mov	r5, r2
 80062e6:	e7bb      	b.n	8006260 <_printf_i+0x130>
 80062e8:	682b      	ldr	r3, [r5, #0]
 80062ea:	6826      	ldr	r6, [r4, #0]
 80062ec:	6961      	ldr	r1, [r4, #20]
 80062ee:	1d18      	adds	r0, r3, #4
 80062f0:	6028      	str	r0, [r5, #0]
 80062f2:	0635      	lsls	r5, r6, #24
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	d501      	bpl.n	80062fc <_printf_i+0x1cc>
 80062f8:	6019      	str	r1, [r3, #0]
 80062fa:	e002      	b.n	8006302 <_printf_i+0x1d2>
 80062fc:	0670      	lsls	r0, r6, #25
 80062fe:	d5fb      	bpl.n	80062f8 <_printf_i+0x1c8>
 8006300:	8019      	strh	r1, [r3, #0]
 8006302:	2300      	movs	r3, #0
 8006304:	6123      	str	r3, [r4, #16]
 8006306:	4615      	mov	r5, r2
 8006308:	e7ba      	b.n	8006280 <_printf_i+0x150>
 800630a:	682b      	ldr	r3, [r5, #0]
 800630c:	1d1a      	adds	r2, r3, #4
 800630e:	602a      	str	r2, [r5, #0]
 8006310:	681d      	ldr	r5, [r3, #0]
 8006312:	6862      	ldr	r2, [r4, #4]
 8006314:	2100      	movs	r1, #0
 8006316:	4628      	mov	r0, r5
 8006318:	f7f9 ff62 	bl	80001e0 <memchr>
 800631c:	b108      	cbz	r0, 8006322 <_printf_i+0x1f2>
 800631e:	1b40      	subs	r0, r0, r5
 8006320:	6060      	str	r0, [r4, #4]
 8006322:	6863      	ldr	r3, [r4, #4]
 8006324:	6123      	str	r3, [r4, #16]
 8006326:	2300      	movs	r3, #0
 8006328:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800632c:	e7a8      	b.n	8006280 <_printf_i+0x150>
 800632e:	6923      	ldr	r3, [r4, #16]
 8006330:	462a      	mov	r2, r5
 8006332:	4649      	mov	r1, r9
 8006334:	4640      	mov	r0, r8
 8006336:	47d0      	blx	sl
 8006338:	3001      	adds	r0, #1
 800633a:	d0ab      	beq.n	8006294 <_printf_i+0x164>
 800633c:	6823      	ldr	r3, [r4, #0]
 800633e:	079b      	lsls	r3, r3, #30
 8006340:	d413      	bmi.n	800636a <_printf_i+0x23a>
 8006342:	68e0      	ldr	r0, [r4, #12]
 8006344:	9b03      	ldr	r3, [sp, #12]
 8006346:	4298      	cmp	r0, r3
 8006348:	bfb8      	it	lt
 800634a:	4618      	movlt	r0, r3
 800634c:	e7a4      	b.n	8006298 <_printf_i+0x168>
 800634e:	2301      	movs	r3, #1
 8006350:	4632      	mov	r2, r6
 8006352:	4649      	mov	r1, r9
 8006354:	4640      	mov	r0, r8
 8006356:	47d0      	blx	sl
 8006358:	3001      	adds	r0, #1
 800635a:	d09b      	beq.n	8006294 <_printf_i+0x164>
 800635c:	3501      	adds	r5, #1
 800635e:	68e3      	ldr	r3, [r4, #12]
 8006360:	9903      	ldr	r1, [sp, #12]
 8006362:	1a5b      	subs	r3, r3, r1
 8006364:	42ab      	cmp	r3, r5
 8006366:	dcf2      	bgt.n	800634e <_printf_i+0x21e>
 8006368:	e7eb      	b.n	8006342 <_printf_i+0x212>
 800636a:	2500      	movs	r5, #0
 800636c:	f104 0619 	add.w	r6, r4, #25
 8006370:	e7f5      	b.n	800635e <_printf_i+0x22e>
 8006372:	bf00      	nop
 8006374:	08006ac9 	.word	0x08006ac9
 8006378:	08006ada 	.word	0x08006ada

0800637c <_sbrk_r>:
 800637c:	b538      	push	{r3, r4, r5, lr}
 800637e:	4d06      	ldr	r5, [pc, #24]	; (8006398 <_sbrk_r+0x1c>)
 8006380:	2300      	movs	r3, #0
 8006382:	4604      	mov	r4, r0
 8006384:	4608      	mov	r0, r1
 8006386:	602b      	str	r3, [r5, #0]
 8006388:	f7fc fb8e 	bl	8002aa8 <_sbrk>
 800638c:	1c43      	adds	r3, r0, #1
 800638e:	d102      	bne.n	8006396 <_sbrk_r+0x1a>
 8006390:	682b      	ldr	r3, [r5, #0]
 8006392:	b103      	cbz	r3, 8006396 <_sbrk_r+0x1a>
 8006394:	6023      	str	r3, [r4, #0]
 8006396:	bd38      	pop	{r3, r4, r5, pc}
 8006398:	2000040c 	.word	0x2000040c

0800639c <__sread>:
 800639c:	b510      	push	{r4, lr}
 800639e:	460c      	mov	r4, r1
 80063a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063a4:	f000 fa6e 	bl	8006884 <_read_r>
 80063a8:	2800      	cmp	r0, #0
 80063aa:	bfab      	itete	ge
 80063ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80063ae:	89a3      	ldrhlt	r3, [r4, #12]
 80063b0:	181b      	addge	r3, r3, r0
 80063b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80063b6:	bfac      	ite	ge
 80063b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80063ba:	81a3      	strhlt	r3, [r4, #12]
 80063bc:	bd10      	pop	{r4, pc}

080063be <__swrite>:
 80063be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063c2:	461f      	mov	r7, r3
 80063c4:	898b      	ldrh	r3, [r1, #12]
 80063c6:	05db      	lsls	r3, r3, #23
 80063c8:	4605      	mov	r5, r0
 80063ca:	460c      	mov	r4, r1
 80063cc:	4616      	mov	r6, r2
 80063ce:	d505      	bpl.n	80063dc <__swrite+0x1e>
 80063d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063d4:	2302      	movs	r3, #2
 80063d6:	2200      	movs	r2, #0
 80063d8:	f000 f9d0 	bl	800677c <_lseek_r>
 80063dc:	89a3      	ldrh	r3, [r4, #12]
 80063de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063e6:	81a3      	strh	r3, [r4, #12]
 80063e8:	4632      	mov	r2, r6
 80063ea:	463b      	mov	r3, r7
 80063ec:	4628      	mov	r0, r5
 80063ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063f2:	f000 b869 	b.w	80064c8 <_write_r>

080063f6 <__sseek>:
 80063f6:	b510      	push	{r4, lr}
 80063f8:	460c      	mov	r4, r1
 80063fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063fe:	f000 f9bd 	bl	800677c <_lseek_r>
 8006402:	1c43      	adds	r3, r0, #1
 8006404:	89a3      	ldrh	r3, [r4, #12]
 8006406:	bf15      	itete	ne
 8006408:	6560      	strne	r0, [r4, #84]	; 0x54
 800640a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800640e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006412:	81a3      	strheq	r3, [r4, #12]
 8006414:	bf18      	it	ne
 8006416:	81a3      	strhne	r3, [r4, #12]
 8006418:	bd10      	pop	{r4, pc}

0800641a <__sclose>:
 800641a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800641e:	f000 b8db 	b.w	80065d8 <_close_r>
	...

08006424 <__swbuf_r>:
 8006424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006426:	460e      	mov	r6, r1
 8006428:	4614      	mov	r4, r2
 800642a:	4605      	mov	r5, r0
 800642c:	b118      	cbz	r0, 8006436 <__swbuf_r+0x12>
 800642e:	6983      	ldr	r3, [r0, #24]
 8006430:	b90b      	cbnz	r3, 8006436 <__swbuf_r+0x12>
 8006432:	f7ff fb1b 	bl	8005a6c <__sinit>
 8006436:	4b21      	ldr	r3, [pc, #132]	; (80064bc <__swbuf_r+0x98>)
 8006438:	429c      	cmp	r4, r3
 800643a:	d12b      	bne.n	8006494 <__swbuf_r+0x70>
 800643c:	686c      	ldr	r4, [r5, #4]
 800643e:	69a3      	ldr	r3, [r4, #24]
 8006440:	60a3      	str	r3, [r4, #8]
 8006442:	89a3      	ldrh	r3, [r4, #12]
 8006444:	071a      	lsls	r2, r3, #28
 8006446:	d52f      	bpl.n	80064a8 <__swbuf_r+0x84>
 8006448:	6923      	ldr	r3, [r4, #16]
 800644a:	b36b      	cbz	r3, 80064a8 <__swbuf_r+0x84>
 800644c:	6923      	ldr	r3, [r4, #16]
 800644e:	6820      	ldr	r0, [r4, #0]
 8006450:	1ac0      	subs	r0, r0, r3
 8006452:	6963      	ldr	r3, [r4, #20]
 8006454:	b2f6      	uxtb	r6, r6
 8006456:	4283      	cmp	r3, r0
 8006458:	4637      	mov	r7, r6
 800645a:	dc04      	bgt.n	8006466 <__swbuf_r+0x42>
 800645c:	4621      	mov	r1, r4
 800645e:	4628      	mov	r0, r5
 8006460:	f000 f950 	bl	8006704 <_fflush_r>
 8006464:	bb30      	cbnz	r0, 80064b4 <__swbuf_r+0x90>
 8006466:	68a3      	ldr	r3, [r4, #8]
 8006468:	3b01      	subs	r3, #1
 800646a:	60a3      	str	r3, [r4, #8]
 800646c:	6823      	ldr	r3, [r4, #0]
 800646e:	1c5a      	adds	r2, r3, #1
 8006470:	6022      	str	r2, [r4, #0]
 8006472:	701e      	strb	r6, [r3, #0]
 8006474:	6963      	ldr	r3, [r4, #20]
 8006476:	3001      	adds	r0, #1
 8006478:	4283      	cmp	r3, r0
 800647a:	d004      	beq.n	8006486 <__swbuf_r+0x62>
 800647c:	89a3      	ldrh	r3, [r4, #12]
 800647e:	07db      	lsls	r3, r3, #31
 8006480:	d506      	bpl.n	8006490 <__swbuf_r+0x6c>
 8006482:	2e0a      	cmp	r6, #10
 8006484:	d104      	bne.n	8006490 <__swbuf_r+0x6c>
 8006486:	4621      	mov	r1, r4
 8006488:	4628      	mov	r0, r5
 800648a:	f000 f93b 	bl	8006704 <_fflush_r>
 800648e:	b988      	cbnz	r0, 80064b4 <__swbuf_r+0x90>
 8006490:	4638      	mov	r0, r7
 8006492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006494:	4b0a      	ldr	r3, [pc, #40]	; (80064c0 <__swbuf_r+0x9c>)
 8006496:	429c      	cmp	r4, r3
 8006498:	d101      	bne.n	800649e <__swbuf_r+0x7a>
 800649a:	68ac      	ldr	r4, [r5, #8]
 800649c:	e7cf      	b.n	800643e <__swbuf_r+0x1a>
 800649e:	4b09      	ldr	r3, [pc, #36]	; (80064c4 <__swbuf_r+0xa0>)
 80064a0:	429c      	cmp	r4, r3
 80064a2:	bf08      	it	eq
 80064a4:	68ec      	ldreq	r4, [r5, #12]
 80064a6:	e7ca      	b.n	800643e <__swbuf_r+0x1a>
 80064a8:	4621      	mov	r1, r4
 80064aa:	4628      	mov	r0, r5
 80064ac:	f000 f81e 	bl	80064ec <__swsetup_r>
 80064b0:	2800      	cmp	r0, #0
 80064b2:	d0cb      	beq.n	800644c <__swbuf_r+0x28>
 80064b4:	f04f 37ff 	mov.w	r7, #4294967295
 80064b8:	e7ea      	b.n	8006490 <__swbuf_r+0x6c>
 80064ba:	bf00      	nop
 80064bc:	08006a78 	.word	0x08006a78
 80064c0:	08006a98 	.word	0x08006a98
 80064c4:	08006a58 	.word	0x08006a58

080064c8 <_write_r>:
 80064c8:	b538      	push	{r3, r4, r5, lr}
 80064ca:	4d07      	ldr	r5, [pc, #28]	; (80064e8 <_write_r+0x20>)
 80064cc:	4604      	mov	r4, r0
 80064ce:	4608      	mov	r0, r1
 80064d0:	4611      	mov	r1, r2
 80064d2:	2200      	movs	r2, #0
 80064d4:	602a      	str	r2, [r5, #0]
 80064d6:	461a      	mov	r2, r3
 80064d8:	f7fc fa95 	bl	8002a06 <_write>
 80064dc:	1c43      	adds	r3, r0, #1
 80064de:	d102      	bne.n	80064e6 <_write_r+0x1e>
 80064e0:	682b      	ldr	r3, [r5, #0]
 80064e2:	b103      	cbz	r3, 80064e6 <_write_r+0x1e>
 80064e4:	6023      	str	r3, [r4, #0]
 80064e6:	bd38      	pop	{r3, r4, r5, pc}
 80064e8:	2000040c 	.word	0x2000040c

080064ec <__swsetup_r>:
 80064ec:	4b32      	ldr	r3, [pc, #200]	; (80065b8 <__swsetup_r+0xcc>)
 80064ee:	b570      	push	{r4, r5, r6, lr}
 80064f0:	681d      	ldr	r5, [r3, #0]
 80064f2:	4606      	mov	r6, r0
 80064f4:	460c      	mov	r4, r1
 80064f6:	b125      	cbz	r5, 8006502 <__swsetup_r+0x16>
 80064f8:	69ab      	ldr	r3, [r5, #24]
 80064fa:	b913      	cbnz	r3, 8006502 <__swsetup_r+0x16>
 80064fc:	4628      	mov	r0, r5
 80064fe:	f7ff fab5 	bl	8005a6c <__sinit>
 8006502:	4b2e      	ldr	r3, [pc, #184]	; (80065bc <__swsetup_r+0xd0>)
 8006504:	429c      	cmp	r4, r3
 8006506:	d10f      	bne.n	8006528 <__swsetup_r+0x3c>
 8006508:	686c      	ldr	r4, [r5, #4]
 800650a:	89a3      	ldrh	r3, [r4, #12]
 800650c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006510:	0719      	lsls	r1, r3, #28
 8006512:	d42c      	bmi.n	800656e <__swsetup_r+0x82>
 8006514:	06dd      	lsls	r5, r3, #27
 8006516:	d411      	bmi.n	800653c <__swsetup_r+0x50>
 8006518:	2309      	movs	r3, #9
 800651a:	6033      	str	r3, [r6, #0]
 800651c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006520:	81a3      	strh	r3, [r4, #12]
 8006522:	f04f 30ff 	mov.w	r0, #4294967295
 8006526:	e03e      	b.n	80065a6 <__swsetup_r+0xba>
 8006528:	4b25      	ldr	r3, [pc, #148]	; (80065c0 <__swsetup_r+0xd4>)
 800652a:	429c      	cmp	r4, r3
 800652c:	d101      	bne.n	8006532 <__swsetup_r+0x46>
 800652e:	68ac      	ldr	r4, [r5, #8]
 8006530:	e7eb      	b.n	800650a <__swsetup_r+0x1e>
 8006532:	4b24      	ldr	r3, [pc, #144]	; (80065c4 <__swsetup_r+0xd8>)
 8006534:	429c      	cmp	r4, r3
 8006536:	bf08      	it	eq
 8006538:	68ec      	ldreq	r4, [r5, #12]
 800653a:	e7e6      	b.n	800650a <__swsetup_r+0x1e>
 800653c:	0758      	lsls	r0, r3, #29
 800653e:	d512      	bpl.n	8006566 <__swsetup_r+0x7a>
 8006540:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006542:	b141      	cbz	r1, 8006556 <__swsetup_r+0x6a>
 8006544:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006548:	4299      	cmp	r1, r3
 800654a:	d002      	beq.n	8006552 <__swsetup_r+0x66>
 800654c:	4630      	mov	r0, r6
 800654e:	f7ff fb47 	bl	8005be0 <_free_r>
 8006552:	2300      	movs	r3, #0
 8006554:	6363      	str	r3, [r4, #52]	; 0x34
 8006556:	89a3      	ldrh	r3, [r4, #12]
 8006558:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800655c:	81a3      	strh	r3, [r4, #12]
 800655e:	2300      	movs	r3, #0
 8006560:	6063      	str	r3, [r4, #4]
 8006562:	6923      	ldr	r3, [r4, #16]
 8006564:	6023      	str	r3, [r4, #0]
 8006566:	89a3      	ldrh	r3, [r4, #12]
 8006568:	f043 0308 	orr.w	r3, r3, #8
 800656c:	81a3      	strh	r3, [r4, #12]
 800656e:	6923      	ldr	r3, [r4, #16]
 8006570:	b94b      	cbnz	r3, 8006586 <__swsetup_r+0x9a>
 8006572:	89a3      	ldrh	r3, [r4, #12]
 8006574:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800657c:	d003      	beq.n	8006586 <__swsetup_r+0x9a>
 800657e:	4621      	mov	r1, r4
 8006580:	4630      	mov	r0, r6
 8006582:	f000 f933 	bl	80067ec <__smakebuf_r>
 8006586:	89a0      	ldrh	r0, [r4, #12]
 8006588:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800658c:	f010 0301 	ands.w	r3, r0, #1
 8006590:	d00a      	beq.n	80065a8 <__swsetup_r+0xbc>
 8006592:	2300      	movs	r3, #0
 8006594:	60a3      	str	r3, [r4, #8]
 8006596:	6963      	ldr	r3, [r4, #20]
 8006598:	425b      	negs	r3, r3
 800659a:	61a3      	str	r3, [r4, #24]
 800659c:	6923      	ldr	r3, [r4, #16]
 800659e:	b943      	cbnz	r3, 80065b2 <__swsetup_r+0xc6>
 80065a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80065a4:	d1ba      	bne.n	800651c <__swsetup_r+0x30>
 80065a6:	bd70      	pop	{r4, r5, r6, pc}
 80065a8:	0781      	lsls	r1, r0, #30
 80065aa:	bf58      	it	pl
 80065ac:	6963      	ldrpl	r3, [r4, #20]
 80065ae:	60a3      	str	r3, [r4, #8]
 80065b0:	e7f4      	b.n	800659c <__swsetup_r+0xb0>
 80065b2:	2000      	movs	r0, #0
 80065b4:	e7f7      	b.n	80065a6 <__swsetup_r+0xba>
 80065b6:	bf00      	nop
 80065b8:	20000018 	.word	0x20000018
 80065bc:	08006a78 	.word	0x08006a78
 80065c0:	08006a98 	.word	0x08006a98
 80065c4:	08006a58 	.word	0x08006a58

080065c8 <abort>:
 80065c8:	b508      	push	{r3, lr}
 80065ca:	2006      	movs	r0, #6
 80065cc:	f000 f994 	bl	80068f8 <raise>
 80065d0:	2001      	movs	r0, #1
 80065d2:	f7fc f9f1 	bl	80029b8 <_exit>
	...

080065d8 <_close_r>:
 80065d8:	b538      	push	{r3, r4, r5, lr}
 80065da:	4d06      	ldr	r5, [pc, #24]	; (80065f4 <_close_r+0x1c>)
 80065dc:	2300      	movs	r3, #0
 80065de:	4604      	mov	r4, r0
 80065e0:	4608      	mov	r0, r1
 80065e2:	602b      	str	r3, [r5, #0]
 80065e4:	f7fc fa2b 	bl	8002a3e <_close>
 80065e8:	1c43      	adds	r3, r0, #1
 80065ea:	d102      	bne.n	80065f2 <_close_r+0x1a>
 80065ec:	682b      	ldr	r3, [r5, #0]
 80065ee:	b103      	cbz	r3, 80065f2 <_close_r+0x1a>
 80065f0:	6023      	str	r3, [r4, #0]
 80065f2:	bd38      	pop	{r3, r4, r5, pc}
 80065f4:	2000040c 	.word	0x2000040c

080065f8 <__sflush_r>:
 80065f8:	898a      	ldrh	r2, [r1, #12]
 80065fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065fe:	4605      	mov	r5, r0
 8006600:	0710      	lsls	r0, r2, #28
 8006602:	460c      	mov	r4, r1
 8006604:	d458      	bmi.n	80066b8 <__sflush_r+0xc0>
 8006606:	684b      	ldr	r3, [r1, #4]
 8006608:	2b00      	cmp	r3, #0
 800660a:	dc05      	bgt.n	8006618 <__sflush_r+0x20>
 800660c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800660e:	2b00      	cmp	r3, #0
 8006610:	dc02      	bgt.n	8006618 <__sflush_r+0x20>
 8006612:	2000      	movs	r0, #0
 8006614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006618:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800661a:	2e00      	cmp	r6, #0
 800661c:	d0f9      	beq.n	8006612 <__sflush_r+0x1a>
 800661e:	2300      	movs	r3, #0
 8006620:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006624:	682f      	ldr	r7, [r5, #0]
 8006626:	602b      	str	r3, [r5, #0]
 8006628:	d032      	beq.n	8006690 <__sflush_r+0x98>
 800662a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800662c:	89a3      	ldrh	r3, [r4, #12]
 800662e:	075a      	lsls	r2, r3, #29
 8006630:	d505      	bpl.n	800663e <__sflush_r+0x46>
 8006632:	6863      	ldr	r3, [r4, #4]
 8006634:	1ac0      	subs	r0, r0, r3
 8006636:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006638:	b10b      	cbz	r3, 800663e <__sflush_r+0x46>
 800663a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800663c:	1ac0      	subs	r0, r0, r3
 800663e:	2300      	movs	r3, #0
 8006640:	4602      	mov	r2, r0
 8006642:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006644:	6a21      	ldr	r1, [r4, #32]
 8006646:	4628      	mov	r0, r5
 8006648:	47b0      	blx	r6
 800664a:	1c43      	adds	r3, r0, #1
 800664c:	89a3      	ldrh	r3, [r4, #12]
 800664e:	d106      	bne.n	800665e <__sflush_r+0x66>
 8006650:	6829      	ldr	r1, [r5, #0]
 8006652:	291d      	cmp	r1, #29
 8006654:	d82c      	bhi.n	80066b0 <__sflush_r+0xb8>
 8006656:	4a2a      	ldr	r2, [pc, #168]	; (8006700 <__sflush_r+0x108>)
 8006658:	40ca      	lsrs	r2, r1
 800665a:	07d6      	lsls	r6, r2, #31
 800665c:	d528      	bpl.n	80066b0 <__sflush_r+0xb8>
 800665e:	2200      	movs	r2, #0
 8006660:	6062      	str	r2, [r4, #4]
 8006662:	04d9      	lsls	r1, r3, #19
 8006664:	6922      	ldr	r2, [r4, #16]
 8006666:	6022      	str	r2, [r4, #0]
 8006668:	d504      	bpl.n	8006674 <__sflush_r+0x7c>
 800666a:	1c42      	adds	r2, r0, #1
 800666c:	d101      	bne.n	8006672 <__sflush_r+0x7a>
 800666e:	682b      	ldr	r3, [r5, #0]
 8006670:	b903      	cbnz	r3, 8006674 <__sflush_r+0x7c>
 8006672:	6560      	str	r0, [r4, #84]	; 0x54
 8006674:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006676:	602f      	str	r7, [r5, #0]
 8006678:	2900      	cmp	r1, #0
 800667a:	d0ca      	beq.n	8006612 <__sflush_r+0x1a>
 800667c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006680:	4299      	cmp	r1, r3
 8006682:	d002      	beq.n	800668a <__sflush_r+0x92>
 8006684:	4628      	mov	r0, r5
 8006686:	f7ff faab 	bl	8005be0 <_free_r>
 800668a:	2000      	movs	r0, #0
 800668c:	6360      	str	r0, [r4, #52]	; 0x34
 800668e:	e7c1      	b.n	8006614 <__sflush_r+0x1c>
 8006690:	6a21      	ldr	r1, [r4, #32]
 8006692:	2301      	movs	r3, #1
 8006694:	4628      	mov	r0, r5
 8006696:	47b0      	blx	r6
 8006698:	1c41      	adds	r1, r0, #1
 800669a:	d1c7      	bne.n	800662c <__sflush_r+0x34>
 800669c:	682b      	ldr	r3, [r5, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d0c4      	beq.n	800662c <__sflush_r+0x34>
 80066a2:	2b1d      	cmp	r3, #29
 80066a4:	d001      	beq.n	80066aa <__sflush_r+0xb2>
 80066a6:	2b16      	cmp	r3, #22
 80066a8:	d101      	bne.n	80066ae <__sflush_r+0xb6>
 80066aa:	602f      	str	r7, [r5, #0]
 80066ac:	e7b1      	b.n	8006612 <__sflush_r+0x1a>
 80066ae:	89a3      	ldrh	r3, [r4, #12]
 80066b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066b4:	81a3      	strh	r3, [r4, #12]
 80066b6:	e7ad      	b.n	8006614 <__sflush_r+0x1c>
 80066b8:	690f      	ldr	r7, [r1, #16]
 80066ba:	2f00      	cmp	r7, #0
 80066bc:	d0a9      	beq.n	8006612 <__sflush_r+0x1a>
 80066be:	0793      	lsls	r3, r2, #30
 80066c0:	680e      	ldr	r6, [r1, #0]
 80066c2:	bf08      	it	eq
 80066c4:	694b      	ldreq	r3, [r1, #20]
 80066c6:	600f      	str	r7, [r1, #0]
 80066c8:	bf18      	it	ne
 80066ca:	2300      	movne	r3, #0
 80066cc:	eba6 0807 	sub.w	r8, r6, r7
 80066d0:	608b      	str	r3, [r1, #8]
 80066d2:	f1b8 0f00 	cmp.w	r8, #0
 80066d6:	dd9c      	ble.n	8006612 <__sflush_r+0x1a>
 80066d8:	6a21      	ldr	r1, [r4, #32]
 80066da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80066dc:	4643      	mov	r3, r8
 80066de:	463a      	mov	r2, r7
 80066e0:	4628      	mov	r0, r5
 80066e2:	47b0      	blx	r6
 80066e4:	2800      	cmp	r0, #0
 80066e6:	dc06      	bgt.n	80066f6 <__sflush_r+0xfe>
 80066e8:	89a3      	ldrh	r3, [r4, #12]
 80066ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066ee:	81a3      	strh	r3, [r4, #12]
 80066f0:	f04f 30ff 	mov.w	r0, #4294967295
 80066f4:	e78e      	b.n	8006614 <__sflush_r+0x1c>
 80066f6:	4407      	add	r7, r0
 80066f8:	eba8 0800 	sub.w	r8, r8, r0
 80066fc:	e7e9      	b.n	80066d2 <__sflush_r+0xda>
 80066fe:	bf00      	nop
 8006700:	20400001 	.word	0x20400001

08006704 <_fflush_r>:
 8006704:	b538      	push	{r3, r4, r5, lr}
 8006706:	690b      	ldr	r3, [r1, #16]
 8006708:	4605      	mov	r5, r0
 800670a:	460c      	mov	r4, r1
 800670c:	b913      	cbnz	r3, 8006714 <_fflush_r+0x10>
 800670e:	2500      	movs	r5, #0
 8006710:	4628      	mov	r0, r5
 8006712:	bd38      	pop	{r3, r4, r5, pc}
 8006714:	b118      	cbz	r0, 800671e <_fflush_r+0x1a>
 8006716:	6983      	ldr	r3, [r0, #24]
 8006718:	b90b      	cbnz	r3, 800671e <_fflush_r+0x1a>
 800671a:	f7ff f9a7 	bl	8005a6c <__sinit>
 800671e:	4b14      	ldr	r3, [pc, #80]	; (8006770 <_fflush_r+0x6c>)
 8006720:	429c      	cmp	r4, r3
 8006722:	d11b      	bne.n	800675c <_fflush_r+0x58>
 8006724:	686c      	ldr	r4, [r5, #4]
 8006726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d0ef      	beq.n	800670e <_fflush_r+0xa>
 800672e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006730:	07d0      	lsls	r0, r2, #31
 8006732:	d404      	bmi.n	800673e <_fflush_r+0x3a>
 8006734:	0599      	lsls	r1, r3, #22
 8006736:	d402      	bmi.n	800673e <_fflush_r+0x3a>
 8006738:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800673a:	f7ff fa47 	bl	8005bcc <__retarget_lock_acquire_recursive>
 800673e:	4628      	mov	r0, r5
 8006740:	4621      	mov	r1, r4
 8006742:	f7ff ff59 	bl	80065f8 <__sflush_r>
 8006746:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006748:	07da      	lsls	r2, r3, #31
 800674a:	4605      	mov	r5, r0
 800674c:	d4e0      	bmi.n	8006710 <_fflush_r+0xc>
 800674e:	89a3      	ldrh	r3, [r4, #12]
 8006750:	059b      	lsls	r3, r3, #22
 8006752:	d4dd      	bmi.n	8006710 <_fflush_r+0xc>
 8006754:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006756:	f7ff fa3a 	bl	8005bce <__retarget_lock_release_recursive>
 800675a:	e7d9      	b.n	8006710 <_fflush_r+0xc>
 800675c:	4b05      	ldr	r3, [pc, #20]	; (8006774 <_fflush_r+0x70>)
 800675e:	429c      	cmp	r4, r3
 8006760:	d101      	bne.n	8006766 <_fflush_r+0x62>
 8006762:	68ac      	ldr	r4, [r5, #8]
 8006764:	e7df      	b.n	8006726 <_fflush_r+0x22>
 8006766:	4b04      	ldr	r3, [pc, #16]	; (8006778 <_fflush_r+0x74>)
 8006768:	429c      	cmp	r4, r3
 800676a:	bf08      	it	eq
 800676c:	68ec      	ldreq	r4, [r5, #12]
 800676e:	e7da      	b.n	8006726 <_fflush_r+0x22>
 8006770:	08006a78 	.word	0x08006a78
 8006774:	08006a98 	.word	0x08006a98
 8006778:	08006a58 	.word	0x08006a58

0800677c <_lseek_r>:
 800677c:	b538      	push	{r3, r4, r5, lr}
 800677e:	4d07      	ldr	r5, [pc, #28]	; (800679c <_lseek_r+0x20>)
 8006780:	4604      	mov	r4, r0
 8006782:	4608      	mov	r0, r1
 8006784:	4611      	mov	r1, r2
 8006786:	2200      	movs	r2, #0
 8006788:	602a      	str	r2, [r5, #0]
 800678a:	461a      	mov	r2, r3
 800678c:	f7fc f97e 	bl	8002a8c <_lseek>
 8006790:	1c43      	adds	r3, r0, #1
 8006792:	d102      	bne.n	800679a <_lseek_r+0x1e>
 8006794:	682b      	ldr	r3, [r5, #0]
 8006796:	b103      	cbz	r3, 800679a <_lseek_r+0x1e>
 8006798:	6023      	str	r3, [r4, #0]
 800679a:	bd38      	pop	{r3, r4, r5, pc}
 800679c:	2000040c 	.word	0x2000040c

080067a0 <__swhatbuf_r>:
 80067a0:	b570      	push	{r4, r5, r6, lr}
 80067a2:	460e      	mov	r6, r1
 80067a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067a8:	2900      	cmp	r1, #0
 80067aa:	b096      	sub	sp, #88	; 0x58
 80067ac:	4614      	mov	r4, r2
 80067ae:	461d      	mov	r5, r3
 80067b0:	da08      	bge.n	80067c4 <__swhatbuf_r+0x24>
 80067b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	602a      	str	r2, [r5, #0]
 80067ba:	061a      	lsls	r2, r3, #24
 80067bc:	d410      	bmi.n	80067e0 <__swhatbuf_r+0x40>
 80067be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067c2:	e00e      	b.n	80067e2 <__swhatbuf_r+0x42>
 80067c4:	466a      	mov	r2, sp
 80067c6:	f000 f8b3 	bl	8006930 <_fstat_r>
 80067ca:	2800      	cmp	r0, #0
 80067cc:	dbf1      	blt.n	80067b2 <__swhatbuf_r+0x12>
 80067ce:	9a01      	ldr	r2, [sp, #4]
 80067d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80067d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80067d8:	425a      	negs	r2, r3
 80067da:	415a      	adcs	r2, r3
 80067dc:	602a      	str	r2, [r5, #0]
 80067de:	e7ee      	b.n	80067be <__swhatbuf_r+0x1e>
 80067e0:	2340      	movs	r3, #64	; 0x40
 80067e2:	2000      	movs	r0, #0
 80067e4:	6023      	str	r3, [r4, #0]
 80067e6:	b016      	add	sp, #88	; 0x58
 80067e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080067ec <__smakebuf_r>:
 80067ec:	898b      	ldrh	r3, [r1, #12]
 80067ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80067f0:	079d      	lsls	r5, r3, #30
 80067f2:	4606      	mov	r6, r0
 80067f4:	460c      	mov	r4, r1
 80067f6:	d507      	bpl.n	8006808 <__smakebuf_r+0x1c>
 80067f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80067fc:	6023      	str	r3, [r4, #0]
 80067fe:	6123      	str	r3, [r4, #16]
 8006800:	2301      	movs	r3, #1
 8006802:	6163      	str	r3, [r4, #20]
 8006804:	b002      	add	sp, #8
 8006806:	bd70      	pop	{r4, r5, r6, pc}
 8006808:	ab01      	add	r3, sp, #4
 800680a:	466a      	mov	r2, sp
 800680c:	f7ff ffc8 	bl	80067a0 <__swhatbuf_r>
 8006810:	9900      	ldr	r1, [sp, #0]
 8006812:	4605      	mov	r5, r0
 8006814:	4630      	mov	r0, r6
 8006816:	f7ff fa4f 	bl	8005cb8 <_malloc_r>
 800681a:	b948      	cbnz	r0, 8006830 <__smakebuf_r+0x44>
 800681c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006820:	059a      	lsls	r2, r3, #22
 8006822:	d4ef      	bmi.n	8006804 <__smakebuf_r+0x18>
 8006824:	f023 0303 	bic.w	r3, r3, #3
 8006828:	f043 0302 	orr.w	r3, r3, #2
 800682c:	81a3      	strh	r3, [r4, #12]
 800682e:	e7e3      	b.n	80067f8 <__smakebuf_r+0xc>
 8006830:	4b0d      	ldr	r3, [pc, #52]	; (8006868 <__smakebuf_r+0x7c>)
 8006832:	62b3      	str	r3, [r6, #40]	; 0x28
 8006834:	89a3      	ldrh	r3, [r4, #12]
 8006836:	6020      	str	r0, [r4, #0]
 8006838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800683c:	81a3      	strh	r3, [r4, #12]
 800683e:	9b00      	ldr	r3, [sp, #0]
 8006840:	6163      	str	r3, [r4, #20]
 8006842:	9b01      	ldr	r3, [sp, #4]
 8006844:	6120      	str	r0, [r4, #16]
 8006846:	b15b      	cbz	r3, 8006860 <__smakebuf_r+0x74>
 8006848:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800684c:	4630      	mov	r0, r6
 800684e:	f000 f881 	bl	8006954 <_isatty_r>
 8006852:	b128      	cbz	r0, 8006860 <__smakebuf_r+0x74>
 8006854:	89a3      	ldrh	r3, [r4, #12]
 8006856:	f023 0303 	bic.w	r3, r3, #3
 800685a:	f043 0301 	orr.w	r3, r3, #1
 800685e:	81a3      	strh	r3, [r4, #12]
 8006860:	89a0      	ldrh	r0, [r4, #12]
 8006862:	4305      	orrs	r5, r0
 8006864:	81a5      	strh	r5, [r4, #12]
 8006866:	e7cd      	b.n	8006804 <__smakebuf_r+0x18>
 8006868:	08005a05 	.word	0x08005a05

0800686c <__malloc_lock>:
 800686c:	4801      	ldr	r0, [pc, #4]	; (8006874 <__malloc_lock+0x8>)
 800686e:	f7ff b9ad 	b.w	8005bcc <__retarget_lock_acquire_recursive>
 8006872:	bf00      	nop
 8006874:	20000400 	.word	0x20000400

08006878 <__malloc_unlock>:
 8006878:	4801      	ldr	r0, [pc, #4]	; (8006880 <__malloc_unlock+0x8>)
 800687a:	f7ff b9a8 	b.w	8005bce <__retarget_lock_release_recursive>
 800687e:	bf00      	nop
 8006880:	20000400 	.word	0x20000400

08006884 <_read_r>:
 8006884:	b538      	push	{r3, r4, r5, lr}
 8006886:	4d07      	ldr	r5, [pc, #28]	; (80068a4 <_read_r+0x20>)
 8006888:	4604      	mov	r4, r0
 800688a:	4608      	mov	r0, r1
 800688c:	4611      	mov	r1, r2
 800688e:	2200      	movs	r2, #0
 8006890:	602a      	str	r2, [r5, #0]
 8006892:	461a      	mov	r2, r3
 8006894:	f7fc f89a 	bl	80029cc <_read>
 8006898:	1c43      	adds	r3, r0, #1
 800689a:	d102      	bne.n	80068a2 <_read_r+0x1e>
 800689c:	682b      	ldr	r3, [r5, #0]
 800689e:	b103      	cbz	r3, 80068a2 <_read_r+0x1e>
 80068a0:	6023      	str	r3, [r4, #0]
 80068a2:	bd38      	pop	{r3, r4, r5, pc}
 80068a4:	2000040c 	.word	0x2000040c

080068a8 <_raise_r>:
 80068a8:	291f      	cmp	r1, #31
 80068aa:	b538      	push	{r3, r4, r5, lr}
 80068ac:	4604      	mov	r4, r0
 80068ae:	460d      	mov	r5, r1
 80068b0:	d904      	bls.n	80068bc <_raise_r+0x14>
 80068b2:	2316      	movs	r3, #22
 80068b4:	6003      	str	r3, [r0, #0]
 80068b6:	f04f 30ff 	mov.w	r0, #4294967295
 80068ba:	bd38      	pop	{r3, r4, r5, pc}
 80068bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80068be:	b112      	cbz	r2, 80068c6 <_raise_r+0x1e>
 80068c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80068c4:	b94b      	cbnz	r3, 80068da <_raise_r+0x32>
 80068c6:	4620      	mov	r0, r4
 80068c8:	f000 f830 	bl	800692c <_getpid_r>
 80068cc:	462a      	mov	r2, r5
 80068ce:	4601      	mov	r1, r0
 80068d0:	4620      	mov	r0, r4
 80068d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068d6:	f000 b817 	b.w	8006908 <_kill_r>
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d00a      	beq.n	80068f4 <_raise_r+0x4c>
 80068de:	1c59      	adds	r1, r3, #1
 80068e0:	d103      	bne.n	80068ea <_raise_r+0x42>
 80068e2:	2316      	movs	r3, #22
 80068e4:	6003      	str	r3, [r0, #0]
 80068e6:	2001      	movs	r0, #1
 80068e8:	e7e7      	b.n	80068ba <_raise_r+0x12>
 80068ea:	2400      	movs	r4, #0
 80068ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80068f0:	4628      	mov	r0, r5
 80068f2:	4798      	blx	r3
 80068f4:	2000      	movs	r0, #0
 80068f6:	e7e0      	b.n	80068ba <_raise_r+0x12>

080068f8 <raise>:
 80068f8:	4b02      	ldr	r3, [pc, #8]	; (8006904 <raise+0xc>)
 80068fa:	4601      	mov	r1, r0
 80068fc:	6818      	ldr	r0, [r3, #0]
 80068fe:	f7ff bfd3 	b.w	80068a8 <_raise_r>
 8006902:	bf00      	nop
 8006904:	20000018 	.word	0x20000018

08006908 <_kill_r>:
 8006908:	b538      	push	{r3, r4, r5, lr}
 800690a:	4d07      	ldr	r5, [pc, #28]	; (8006928 <_kill_r+0x20>)
 800690c:	2300      	movs	r3, #0
 800690e:	4604      	mov	r4, r0
 8006910:	4608      	mov	r0, r1
 8006912:	4611      	mov	r1, r2
 8006914:	602b      	str	r3, [r5, #0]
 8006916:	f7fc f83f 	bl	8002998 <_kill>
 800691a:	1c43      	adds	r3, r0, #1
 800691c:	d102      	bne.n	8006924 <_kill_r+0x1c>
 800691e:	682b      	ldr	r3, [r5, #0]
 8006920:	b103      	cbz	r3, 8006924 <_kill_r+0x1c>
 8006922:	6023      	str	r3, [r4, #0]
 8006924:	bd38      	pop	{r3, r4, r5, pc}
 8006926:	bf00      	nop
 8006928:	2000040c 	.word	0x2000040c

0800692c <_getpid_r>:
 800692c:	f7fc b82c 	b.w	8002988 <_getpid>

08006930 <_fstat_r>:
 8006930:	b538      	push	{r3, r4, r5, lr}
 8006932:	4d07      	ldr	r5, [pc, #28]	; (8006950 <_fstat_r+0x20>)
 8006934:	2300      	movs	r3, #0
 8006936:	4604      	mov	r4, r0
 8006938:	4608      	mov	r0, r1
 800693a:	4611      	mov	r1, r2
 800693c:	602b      	str	r3, [r5, #0]
 800693e:	f7fc f88a 	bl	8002a56 <_fstat>
 8006942:	1c43      	adds	r3, r0, #1
 8006944:	d102      	bne.n	800694c <_fstat_r+0x1c>
 8006946:	682b      	ldr	r3, [r5, #0]
 8006948:	b103      	cbz	r3, 800694c <_fstat_r+0x1c>
 800694a:	6023      	str	r3, [r4, #0]
 800694c:	bd38      	pop	{r3, r4, r5, pc}
 800694e:	bf00      	nop
 8006950:	2000040c 	.word	0x2000040c

08006954 <_isatty_r>:
 8006954:	b538      	push	{r3, r4, r5, lr}
 8006956:	4d06      	ldr	r5, [pc, #24]	; (8006970 <_isatty_r+0x1c>)
 8006958:	2300      	movs	r3, #0
 800695a:	4604      	mov	r4, r0
 800695c:	4608      	mov	r0, r1
 800695e:	602b      	str	r3, [r5, #0]
 8006960:	f7fc f889 	bl	8002a76 <_isatty>
 8006964:	1c43      	adds	r3, r0, #1
 8006966:	d102      	bne.n	800696e <_isatty_r+0x1a>
 8006968:	682b      	ldr	r3, [r5, #0]
 800696a:	b103      	cbz	r3, 800696e <_isatty_r+0x1a>
 800696c:	6023      	str	r3, [r4, #0]
 800696e:	bd38      	pop	{r3, r4, r5, pc}
 8006970:	2000040c 	.word	0x2000040c

08006974 <_init>:
 8006974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006976:	bf00      	nop
 8006978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800697a:	bc08      	pop	{r3}
 800697c:	469e      	mov	lr, r3
 800697e:	4770      	bx	lr

08006980 <_fini>:
 8006980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006982:	bf00      	nop
 8006984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006986:	bc08      	pop	{r3}
 8006988:	469e      	mov	lr, r3
 800698a:	4770      	bx	lr
